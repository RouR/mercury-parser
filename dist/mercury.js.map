{"version":3,"file":"mercury.js","sources":["../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/page-num-from-url.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/resource/utils/constants.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/utils/dom/constants.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/utils/dom/clean-tags.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/clean.js","../src/resource/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/utils/merge-supported-domains.js","../src/extractors/add-extractor.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/custom/www.ladbible.com/index.js","../src/extractors/custom/timesofindia.indiatimes.com/index.js","../src/extractors/custom/ma.ttias.be/index.js","../src/extractors/custom/pastebin.com/index.js","../src/extractors/custom/www.abendblatt.de/index.js","../src/extractors/custom/www.gruene.de/index.js","../src/extractors/custom/www.engadget.com/index.js","../src/extractors/custom/arstechnica.com/index.js","../src/extractors/custom/www.ndtv.com/index.js","../src/extractors/custom/www.spektrum.de/index.js","../src/extractors/custom/postlight.com/index.js","../src/extractors/custom/www.investmentexecutive.com/index.js","../src/extractors/custom/www.cbc.ca/index.js","../src/extractors/all.js","../src/cleaners/constants.js","../src/cleaners/author.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/cleaners/index.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/content/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/generic/index.js","../src/extractors/detect-by-html.js","../src/extractors/get-extractor.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/mercury.js"],"sourcesContent":["const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\r\n\r\nexport default function normalizeSpaces(text) {\r\n  return text.replace(NORMALIZE_RE, ' ').trim();\r\n}\r\n","// Given a node type to search for, and a list of regular expressions,\r\n// look to see if this extraction can be found in the URL. Expects\r\n// that each expression in r_list will return group(1) as the proper\r\n// string to be cleaned.\r\n// Only used for date_published currently.\r\nexport default function extractFromUrl(url, regexList) {\r\n  const matchRe = regexList.find(re => re.test(url));\r\n  if (matchRe) {\r\n    return matchRe.exec(url)[1];\r\n  }\r\n\r\n  return null;\r\n}\r\n","// An expression that looks to try to find the page digit within a URL, if\r\n// it exists.\r\n// Matches:\r\n//  page=1\r\n//  pg=1\r\n//  p=1\r\n//  paging=12\r\n//  pag=7\r\n//  pagination/1\r\n//  paging/88\r\n//  pa/83\r\n//  p/11\r\n//\r\n// Does not match:\r\n//  pg=102\r\n//  page:2\r\nexport const PAGE_IN_HREF_RE = new RegExp(\r\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\r\n  'i'\r\n);\r\n\r\nexport const HAS_ALPHA_RE = /[a-z]/i;\r\n\r\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\r\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\r\n\r\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\r\nexport const DEFAULT_ENCODING = 'utf-8';\r\n","import { PAGE_IN_HREF_RE } from './constants';\r\n\r\nexport default function pageNumFromUrl(url) {\r\n  const matches = url.match(PAGE_IN_HREF_RE);\r\n  if (!matches) return null;\r\n\r\n  const pageNum = parseInt(matches[6], 10);\r\n\r\n  // Return pageNum < 100, otherwise\r\n  // return null\r\n  return pageNum < 100 ? pageNum : null;\r\n}\r\n","export default function removeAnchor(url) {\r\n  return url.split('#')[0].replace(/\\/$/, '');\r\n}\r\n","import URL from 'url';\r\n\r\nimport {\r\n  HAS_ALPHA_RE,\r\n  IS_ALPHA_RE,\r\n  IS_DIGIT_RE,\r\n  PAGE_IN_HREF_RE,\r\n} from './constants';\r\n\r\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\r\n  let goodSegment = true;\r\n\r\n  // If this is purely a number, and it's the first or second\r\n  // url_segment, it's probably a page number. Remove it.\r\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\r\n    goodSegment = true;\r\n  }\r\n\r\n  // If this is the first url_segment and it's just \"index\",\r\n  // remove it\r\n  if (index === 0 && segment.toLowerCase() === 'index') {\r\n    goodSegment = false;\r\n  }\r\n\r\n  // If our first or second url_segment is smaller than 3 characters,\r\n  // and the first url_segment had no alphas, remove it.\r\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\r\n    goodSegment = false;\r\n  }\r\n\r\n  return goodSegment;\r\n}\r\n\r\n// Take a URL, and return the article base of said URL. That is, no\r\n// pagination data exists in it. Useful for comparing to other links\r\n// that might have pagination data within them.\r\nexport default function articleBaseUrl(url, parsed) {\r\n  const parsedUrl = parsed || URL.parse(url);\r\n  const { protocol, host, path } = parsedUrl;\r\n\r\n  let firstSegmentHasLetters = false;\r\n  const cleanedSegments = path\r\n    .split('/')\r\n    .reverse()\r\n    .reduce((acc, rawSegment, index) => {\r\n      let segment = rawSegment;\r\n\r\n      // Split off and save anything that looks like a file type.\r\n      if (segment.includes('.')) {\r\n        const [possibleSegment, fileExt] = segment.split('.');\r\n        if (IS_ALPHA_RE.test(fileExt)) {\r\n          segment = possibleSegment;\r\n        }\r\n      }\r\n\r\n      // If our first or second segment has anything looking like a page\r\n      // number, remove it.\r\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\r\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\r\n      }\r\n\r\n      // If we're on the first segment, check to see if we have any\r\n      // characters in it. The first segment is actually the last bit of\r\n      // the URL, and this will be helpful to determine if we're on a URL\r\n      // segment that looks like \"/2/\" for example.\r\n      if (index === 0) {\r\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\r\n      }\r\n\r\n      // If it's not marked for deletion, push it to cleaned_segments.\r\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\r\n        acc.push(segment);\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\r\n}\r\n","// Given a string, return True if it appears to have an ending sentence\r\n// within it, false otherwise.\r\nconst SENTENCE_END_RE = new RegExp('.( |$)');\r\nexport default function hasSentenceEnd(text) {\r\n  return SENTENCE_END_RE.test(text);\r\n}\r\n","export default function excerptContent(content, words = 10) {\r\n  return content\r\n    .trim()\r\n    .split(/\\s+/)\r\n    .slice(0, words)\r\n    .join(' ');\r\n}\r\n","import iconv from 'iconv-lite';\r\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\r\n\r\n// check a string for encoding; this is\r\n// used in our fetchResource function to\r\n// ensure correctly encoded responses\r\nexport default function getEncoding(str) {\r\n  let encoding = DEFAULT_ENCODING;\r\n  const matches = ENCODING_RE.exec(str);\r\n  if (matches !== null) {\r\n    [, str] = matches;\r\n  }\r\n  if (iconv.encodingExists(str)) {\r\n    encoding = str;\r\n  }\r\n  return encoding;\r\n}\r\n","import cheerio from 'cheerio';\r\n\r\n// Browser does not like us setting user agent\r\nexport const REQUEST_HEADERS = cheerio.browser\r\n  ? {}\r\n  : {\r\n      'User-Agent':\r\n        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\r\n    };\r\n\r\n// The number of milliseconds to attempt to fetch a resource before timing out.\r\nexport const FETCH_TIMEOUT = 10000;\r\n\r\n// Content types that we do not extract content from\r\nconst BAD_CONTENT_TYPES = [\r\n  'audio/mpeg',\r\n  'image/gif',\r\n  'image/jpeg',\r\n  'image/jpg',\r\n];\r\n\r\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\r\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// Use this setting as the maximum size an article can be\r\n// for us to attempt parsing. Defaults to 5 MB.\r\nexport const MAX_CONTENT_LENGTH = 5242880;\r\n\r\n// Turn the global proxy on or off\r\n// Proxying is not currently enabled in Python source\r\n// so not implementing logic in port.\r\nexport const PROXY_DOMAINS = false;\r\nexport const REQUESTS_PROXIES = {\r\n  http: 'http://38.98.105.139:33333',\r\n  https: 'http://38.98.105.139:33333',\r\n};\r\n\r\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\r\n","import URL from 'url';\r\nimport request from 'postman-request';\r\n\r\nimport {\r\n  REQUEST_HEADERS,\r\n  FETCH_TIMEOUT,\r\n  BAD_CONTENT_TYPES_RE,\r\n  MAX_CONTENT_LENGTH,\r\n} from './constants';\r\n\r\nfunction get(options) {\r\n  return new Promise((resolve, reject) => {\r\n    request(options, (err, response, body) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve({ body, response });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// Evaluate a response to ensure it's something we should be keeping.\r\n// This does not validate in the sense of a response being 200 or not.\r\n// Validation here means that we haven't found reason to bail from\r\n// further processing of this url.\r\n\r\nexport function validateResponse(response, parseNon200 = false) {\r\n  // Check if we got a valid status code\r\n  // This isn't great, but I'm requiring a statusMessage to be set\r\n  // before short circuiting b/c nock doesn't set it in tests\r\n  // statusMessage only not set in nock response, in which case\r\n  // I check statusCode, which is currently only 200 for OK responses\r\n  // in tests\r\n  if (\r\n    (response.statusMessage && response.statusMessage !== 'OK') ||\r\n    response.statusCode !== 200\r\n  ) {\r\n    if (!response.statusCode) {\r\n      throw new Error(\r\n        `Unable to fetch content. Original exception was ${response.error}`\r\n      );\r\n    } else if (!parseNon200) {\r\n      throw new Error(\r\n        `Resource returned a response status code of ${\r\n          response.statusCode\r\n        } and resource was instructed to reject non-200 status codes.`\r\n      );\r\n    }\r\n  }\r\n\r\n  const {\r\n    'content-type': contentType,\r\n    'content-length': contentLength,\r\n  } = response.headers;\r\n\r\n  // Check that the content is not in BAD_CONTENT_TYPES\r\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\r\n    throw new Error(\r\n      `Content-type for this resource was ${contentType} and is not allowed.`\r\n    );\r\n  }\r\n\r\n  // Check that the content length is below maximum\r\n  if (contentLength > MAX_CONTENT_LENGTH) {\r\n    throw new Error(\r\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\r\n    );\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Grabs the last two pieces of the URL and joins them back together\r\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\r\nexport function baseDomain({ host }) {\r\n  return host\r\n    .split('.')\r\n    .slice(-2)\r\n    .join('.');\r\n}\r\n\r\n// Set our response attribute to the result of fetching our URL.\r\n// TODO: This should gracefully handle timeouts and raise the\r\n//       proper exceptions on the many failure cases of HTTP.\r\n// TODO: Ensure we are not fetching something enormous. Always return\r\n//       unicode content for HTML, with charset conversion.\r\n\r\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\r\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\r\n  const options = {\r\n    url: parsedUrl.href,\r\n    headers: { ...REQUEST_HEADERS, ...headers },\r\n    timeout: FETCH_TIMEOUT,\r\n    // Accept cookies\r\n    jar: true,\r\n    // Set to null so the response returns as binary and body as buffer\r\n    // https://github.com/request/request#requestoptions-callback\r\n    encoding: null,\r\n    // Accept and decode gzip\r\n    gzip: true,\r\n    // Follow any non-GET redirects\r\n    followAllRedirects: true,\r\n    ...(typeof window !== 'undefined'\r\n      ? {}\r\n      : {\r\n          // Follow GET redirects; this option is for Node only\r\n          followRedirect: true,\r\n        }),\r\n  };\r\n\r\n  const { response, body } = await get(options);\r\n\r\n  try {\r\n    validateResponse(response);\r\n    return {\r\n      body,\r\n      response,\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      error: true,\r\n      message: e.message,\r\n    };\r\n  }\r\n}\r\n","function convertMetaProp($, from, to) {\r\n  $(`meta[${from}]`).each((_, node) => {\r\n    const $node = $(node);\r\n\r\n    const value = $node.attr(from);\r\n    $node.attr(to, value);\r\n    $node.removeAttr(from);\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\n// For ease of use in extracting from meta tags,\r\n// replace the \"content\" attribute on meta tags with the\r\n// \"value\" attribute.\r\n//\r\n// In addition, normalize 'property' attributes to 'name' for ease of\r\n// querying later. See, e.g., og or twitter meta tags.\r\n\r\nexport default function normalizeMetaTags($) {\r\n  $ = convertMetaProp($, 'content', 'value');\r\n  $ = convertMetaProp($, 'property', 'name');\r\n  return $;\r\n}\r\n","// Spacer images to be removed\r\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\r\n\r\n// The class we will use to mark elements we want to keep\r\n// but would normally remove\r\nexport const KEEP_CLASS = 'mercury-parser-keep';\r\n\r\nexport const KEEP_SELECTORS = [\r\n  'iframe[src^=\"https://www.youtube.com\"]',\r\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\r\n  'iframe[src^=\"http://www.youtube.com\"]',\r\n  'iframe[src^=\"https://player.vimeo\"]',\r\n  'iframe[src^=\"http://player.vimeo\"]',\r\n  'iframe[src^=\"https://www.redditmedia.com\"]',\r\n];\r\n\r\n// A list of tags to strip from the output if we encounter them.\r\nexport const STRIP_OUTPUT_TAGS = [\r\n  'title',\r\n  'script',\r\n  'noscript',\r\n  'link',\r\n  'style',\r\n  'hr',\r\n  'embed',\r\n  'iframe',\r\n  'object',\r\n];\r\n\r\n// cleanAttributes\r\nexport const REMOVE_ATTRS = ['style', 'align'];\r\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\r\n  selector => `[${selector}]`\r\n);\r\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\r\nexport const WHITELIST_ATTRS = [\r\n  'src',\r\n  'srcset',\r\n  'sizes',\r\n  'type',\r\n  'href',\r\n  'class',\r\n  'id',\r\n  'alt',\r\n  'xlink:href',\r\n  'width',\r\n  'height',\r\n];\r\n\r\nexport const WHITELIST_ATTRS_RE = new RegExp(\r\n  `^(${WHITELIST_ATTRS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// removeEmpty\r\nexport const REMOVE_EMPTY_TAGS = ['p'];\r\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\r\n  tag => `${tag}:empty`\r\n).join(',');\r\n\r\n// cleanTags\r\nexport const CLEAN_CONDITIONALLY_TAGS = [\r\n  'ul',\r\n  'ol',\r\n  'table',\r\n  'div',\r\n  'button',\r\n  'form',\r\n].join(',');\r\n\r\n// cleanHeaders\r\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\r\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\r\n\r\n// // CONTENT FETCHING CONSTANTS ////\r\n\r\n// A list of strings that can be considered unlikely candidates when\r\n// extracting content from a resource. These strings are joined together\r\n// and then tested for existence using re:test, so may contain simple,\r\n// non-pipe style regular expression queries if necessary.\r\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\r\n  'ad-break',\r\n  'adbox',\r\n  'advert',\r\n  'addthis',\r\n  'agegate',\r\n  'aux',\r\n  'blogger-labels',\r\n  'combx',\r\n  'comment',\r\n  'conversation',\r\n  'disqus',\r\n  'entry-unrelated',\r\n  'extra',\r\n  'foot',\r\n  // 'form', // This is too generic, has too many false positives\r\n  'header',\r\n  'hidden',\r\n  'loader',\r\n  'login', // Note: This can hit 'blogindex'.\r\n  'menu',\r\n  'meta',\r\n  'nav',\r\n  'outbrain',\r\n  'pager',\r\n  'pagination',\r\n  'predicta', // readwriteweb inline ad box\r\n  'presence_control_external', // lifehacker.com container full of false positives\r\n  'popup',\r\n  'printfriendly',\r\n  'related',\r\n  'remove',\r\n  'remark',\r\n  'rss',\r\n  'share',\r\n  'shoutbox',\r\n  'sidebar',\r\n  'sociable',\r\n  'sponsor',\r\n  'taboola',\r\n  'tools',\r\n];\r\n\r\n// A list of strings that can be considered LIKELY candidates when\r\n// extracting content from a resource. Essentially, the inverse of the\r\n// blacklist above - if something matches both blacklist and whitelist,\r\n// it is kept. This is useful, for example, if something has a className\r\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\r\n// be removed, however, it's also the entry content, so it should be left\r\n// alone.\r\n//\r\n// These strings are joined together and then tested for existence using\r\n// re:test, so may contain simple, non-pipe style regular expression queries\r\n// if necessary.\r\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\r\n  'and',\r\n  'article',\r\n  'body',\r\n  'blogindex',\r\n  'column',\r\n  'content',\r\n  'entry-content-asset',\r\n  'format', // misuse of form\r\n  'hfeed',\r\n  'hentry',\r\n  'hatom',\r\n  'main',\r\n  'page',\r\n  'posts',\r\n  'shadow',\r\n];\r\n\r\n// A list of tags which, if found inside, should cause a <div /> to NOT\r\n// be turned into a paragraph tag. Shallow div tags without these elements\r\n// should be turned into <p /> tags.\r\nexport const DIV_TO_P_BLOCK_TAGS = [\r\n  'a',\r\n  'blockquote',\r\n  'dl',\r\n  'div',\r\n  'img',\r\n  'p',\r\n  'pre',\r\n  'table',\r\n].join(',');\r\n\r\n// A list of tags that should be ignored when trying to find the top candidate\r\n// for a document.\r\nexport const NON_TOP_CANDIDATE_TAGS = [\r\n  'br',\r\n  'b',\r\n  'i',\r\n  'label',\r\n  'hr',\r\n  'area',\r\n  'base',\r\n  'basefont',\r\n  'input',\r\n  'img',\r\n  'link',\r\n  'meta',\r\n];\r\n\r\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\r\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// A list of selectors that specify, very clearly, either hNews or other\r\n// very content-specific style content, like Blogger templates.\r\n// More examples here: http://microformats.org/wiki/blog-post-formats\r\nexport const HNEWS_CONTENT_SELECTORS = [\r\n  ['.hentry', '.entry-content'],\r\n  ['entry', '.entry-content'],\r\n  ['.entry', '.entry_content'],\r\n  ['.post', '.postbody'],\r\n  ['.post', '.post_body'],\r\n  ['.post', '.post-body'],\r\n];\r\n\r\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\r\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\r\n\r\n// A list of strings that denote a positive scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const POSITIVE_SCORE_HINTS = [\r\n  'article',\r\n  'articlecontent',\r\n  'instapaper_body',\r\n  'blog',\r\n  'body',\r\n  'content',\r\n  'entry-content-asset',\r\n  'entry',\r\n  'hentry',\r\n  'main',\r\n  'Normal',\r\n  'page',\r\n  'pagination',\r\n  'permalink',\r\n  'post',\r\n  'story',\r\n  'text',\r\n  '[-_]copy', // usatoday\r\n  '\\\\Bcopy',\r\n];\r\n\r\n// The above list, joined into a matching regular expression\r\nexport const POSITIVE_SCORE_RE = new RegExp(\r\n  POSITIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Readability publisher-specific guidelines\r\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\r\n\r\n// A list of strings that denote a negative scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const NEGATIVE_SCORE_HINTS = [\r\n  'adbox',\r\n  'advert',\r\n  'author',\r\n  'bio',\r\n  'bookmark',\r\n  'bottom',\r\n  'byline',\r\n  'clear',\r\n  'com-',\r\n  'combx',\r\n  'comment',\r\n  'comment\\\\B',\r\n  'contact',\r\n  'copy',\r\n  'credit',\r\n  'crumb',\r\n  'date',\r\n  'deck',\r\n  'excerpt',\r\n  'featured', // tnr.com has a featured_content which throws us off\r\n  'foot',\r\n  'footer',\r\n  'footnote',\r\n  'graf',\r\n  'head',\r\n  'info',\r\n  'infotext', // newscientist.com copyright\r\n  'instapaper_ignore',\r\n  'jump',\r\n  'linebreak',\r\n  'link',\r\n  'masthead',\r\n  'media',\r\n  'meta',\r\n  'modal',\r\n  'outbrain', // slate.com junk\r\n  'promo',\r\n  'pr_', // autoblog - press release\r\n  'related',\r\n  'respond',\r\n  'roundcontent', // lifehacker restricted content warning\r\n  'scroll',\r\n  'secondary',\r\n  'share',\r\n  'shopping',\r\n  'shoutbox',\r\n  'side',\r\n  'sidebar',\r\n  'sponsor',\r\n  'stamp',\r\n  'sub',\r\n  'summary',\r\n  'tags',\r\n  'tools',\r\n  'widget',\r\n];\r\n// The above list, joined into a matching regular expression\r\nexport const NEGATIVE_SCORE_RE = new RegExp(\r\n  NEGATIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// XPath to try to determine if a page is wordpress. Not always successful.\r\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\r\n\r\n// Match a digit. Pretty clear.\r\nexport const DIGIT_RE = new RegExp('[0-9]');\r\n\r\n// A list of words that, if found in link text or URLs, likely mean that\r\n// this link is not a next page link.\r\nexport const EXTRANEOUS_LINK_HINTS = [\r\n  'print',\r\n  'archive',\r\n  'comment',\r\n  'discuss',\r\n  'e-mail',\r\n  'email',\r\n  'share',\r\n  'reply',\r\n  'all',\r\n  'login',\r\n  'sign',\r\n  'single',\r\n  'adx',\r\n  'entry-unrelated',\r\n];\r\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\r\n  EXTRANEOUS_LINK_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match any phrase that looks like it could be page, or paging, or pagination\r\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it could mean the next\r\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\r\n// mean last page.\r\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\r\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\r\n\r\n// Match any link text/classname/id that looks like it is an end link: things\r\n// like \"first\", \"last\", \"end\", etc.\r\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it means the previous\r\n// page.\r\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\r\n\r\n// Match 2 or more consecutive <br> tags\r\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\r\n\r\n// Match 1 BR tag.\r\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\r\n\r\n// A list of all of the block level tags known in HTML5 and below. Taken from\r\n// http://bit.ly/qneNIT\r\nexport const BLOCK_LEVEL_TAGS = [\r\n  'article',\r\n  'aside',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'li',\r\n  'map',\r\n  'object',\r\n  'ol',\r\n  'output',\r\n  'p',\r\n  'pre',\r\n  'progress',\r\n  'section',\r\n  'table',\r\n  'tbody',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'tr',\r\n  'ul',\r\n  'video',\r\n];\r\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\r\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// The removal is implemented as a blacklist and whitelist, this test finds\r\n// blacklisted elements that aren't whitelisted. We do this all in one\r\n// expression-both because it's only one pass, and because this skips the\r\n// serialization for whitelisted nodes.\r\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\r\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\r\n\r\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\r\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\r\n\r\nexport const UNLIKELY_RE = new RegExp(\r\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\r\n  'i'\r\n);\r\n\r\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\r\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\r\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\r\n\r\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\r\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\r\n\r\nexport default function stripUnlikelyCandidates($) {\r\n  //  Loop through the provided document and remove any non-link nodes\r\n  //  that are unlikely candidates for article content.\r\n  //\r\n  //  Links are ignored because there are very often links to content\r\n  //  that are identified as non-body-content, but may be inside\r\n  //  article-like content.\r\n  //\r\n  //  :param $: a cheerio object to strip nodes from\r\n  //  :return $: the cleaned cheerio object\r\n  $('*')\r\n    .not('a')\r\n    .each((index, node) => {\r\n      const $node = $(node);\r\n      const classes = $node.attr('class');\r\n      const id = $node.attr('id');\r\n      if (!id && !classes) return;\r\n\r\n      const classAndId = `${classes || ''} ${id || ''}`;\r\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\r\n        return;\r\n      }\r\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\r\n        $node.remove();\r\n      }\r\n    });\r\n\r\n  return $;\r\n}\r\n","import { paragraphize } from './index';\r\n\r\n// ## NOTES:\r\n// Another good candidate for refactoring/optimizing.\r\n// Very imperative code, I don't love it. - AP\r\n\r\n//  Given cheerio object, convert consecutive <br /> tags into\r\n//  <p /> tags instead.\r\n//\r\n//  :param $: A cheerio object\r\n\r\nexport default function brsToPs($) {\r\n  let collapsing = false;\r\n  $('br').each((index, element) => {\r\n    const $element = $(element);\r\n    const nextElement = $element.next().get(0);\r\n\r\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\r\n      collapsing = true;\r\n      $element.remove();\r\n    } else if (collapsing) {\r\n      collapsing = false;\r\n      paragraphize(element, $, true);\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\r\n\r\n// Given a node, turn it into a P if it is not already a P, and\r\n// make sure it conforms to the constraints of a P tag (I.E. does\r\n// not contain any other block tags.)\r\n//\r\n// If the node is a <br />, it treats the following inline siblings\r\n// as if they were its children.\r\n//\r\n// :param node: The node to paragraphize; this is a raw node\r\n// :param $: The cheerio object to handle dom manipulation\r\n// :param br: Whether or not the passed node is a br\r\n\r\nexport default function paragraphize(node, $, br = false) {\r\n  const $node = $(node);\r\n\r\n  if (br) {\r\n    let sibling = node.nextSibling;\r\n    const p = $('<p></p>');\r\n\r\n    // while the next node is text or not a block level element\r\n    // append it to a new p node\r\n    while (\r\n      sibling &&\r\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\r\n    ) {\r\n      const { nextSibling } = sibling;\r\n      $(sibling).appendTo(p);\r\n      sibling = nextSibling;\r\n    }\r\n\r\n    $node.replaceWith(p);\r\n    $node.remove();\r\n    return $;\r\n  }\r\n\r\n  return $;\r\n}\r\n","import { brsToPs, convertNodeTo } from 'utils/dom';\r\n\r\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\r\n\r\nfunction convertDivs($) {\r\n  $('div').each((index, div) => {\r\n    const $div = $(div);\r\n    const convertible = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\r\n\r\n    if (convertible) {\r\n      convertNodeTo($div, $, 'p');\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\nfunction convertSpans($) {\r\n  $('span').each((index, span) => {\r\n    const $span = $(span);\r\n    const convertible = $span.parents('p, div, li, figcaption').length === 0;\r\n    if (convertible) {\r\n      convertNodeTo($span, $, 'p');\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\n// Loop through the provided doc, and convert any p-like elements to\r\n// actual paragraph tags.\r\n//\r\n//   Things fitting this criteria:\r\n//   * Multiple consecutive <br /> tags.\r\n//   * <div /> tags without block level elements inside of them\r\n//   * <span /> tags who are not children of <p /> or <div /> tags.\r\n//\r\n//   :param $: A cheerio object to search\r\n//   :return cheerio object with new p elements\r\n//   (By-reference mutation, though. Returned just for convenience.)\r\n\r\nexport default function convertToParagraphs($) {\r\n  $ = brsToPs($);\r\n  $ = convertDivs($);\r\n  $ = convertSpans($);\r\n\r\n  return $;\r\n}\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nexport default function convertNodeTo($node, $, tag = 'p') {\r\n  const node = $node.get(0);\r\n  if (!node) {\r\n    return $;\r\n  }\r\n  const attrs = getAttrs(node) || {};\r\n\r\n  const attribString = Reflect.ownKeys(attrs)\r\n    .map(key => `${key}=${attrs[key]}`)\r\n    .join(' ');\r\n  let html;\r\n\r\n  if ($.browser) {\r\n    // In the browser, the contents of noscript tags aren't rendered, therefore\r\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\r\n    // as expected. This test case handles that\r\n    html =\r\n      node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\r\n  } else {\r\n    html = $node.contents();\r\n  }\r\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\r\n  return $;\r\n}\r\n","import { SPACER_RE } from './constants';\r\n\r\nfunction cleanForHeight($img, $) {\r\n  const height = parseInt($img.attr('height'), 10);\r\n  const width = parseInt($img.attr('width'), 10) || 20;\r\n\r\n  // Remove images that explicitly have very small heights or\r\n  // widths, because they are most likely shims or icons,\r\n  // which aren't very useful for reading.\r\n  if ((height || 20) < 10 || width < 10) {\r\n    $img.remove();\r\n  } else if (height) {\r\n    // Don't ever specify a height on images, so that we can\r\n    // scale with respect to width without screwing up the\r\n    // aspect ratio.\r\n    $img.removeAttr('height');\r\n  }\r\n\r\n  return $;\r\n}\r\n\r\n// Cleans out images where the source string matches transparent/spacer/etc\r\n// TODO This seems very aggressive - AP\r\nfunction removeSpacers($img, $) {\r\n  if (SPACER_RE.test($img.attr('src'))) {\r\n    $img.remove();\r\n  }\r\n\r\n  return $;\r\n}\r\n\r\nexport default function cleanImages($article, $) {\r\n  $article.find('img').each((index, img) => {\r\n    const $img = $(img);\r\n\r\n    cleanForHeight($img, $);\r\n    removeSpacers($img, $);\r\n  });\r\n\r\n  return $;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\r\n\r\nexport default function markToKeep(article, $, url, tags = []) {\r\n  if (tags.length === 0) {\r\n    tags = KEEP_SELECTORS;\r\n  }\r\n\r\n  if (url) {\r\n    const { protocol, hostname } = URL.parse(url);\r\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\r\n  }\r\n\r\n  $(tags.join(','), article).addClass(KEEP_CLASS);\r\n\r\n  return $;\r\n}\r\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\r\n\r\nexport default function stripJunkTags(article, $, tags = []) {\r\n  if (tags.length === 0) {\r\n    tags = STRIP_OUTPUT_TAGS;\r\n  }\r\n\r\n  // Remove matching elements, but ignore\r\n  // any element with a class of mercury-parser-keep\r\n  $(tags.join(','), article)\r\n    .not(`.${KEEP_CLASS}`)\r\n    .remove();\r\n\r\n  return $;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\n// H1 tags are typically the article title, which should be extracted\r\n// by the title extractor instead. If there's less than 3 of them (<3),\r\n// strip them. Otherwise, turn 'em into H2s.\r\nexport default function cleanHOnes(article, $) {\r\n  const $hOnes = $('h1', article);\r\n\r\n  if ($hOnes.length < 3) {\r\n    $hOnes.each((index, node) => $(node).remove());\r\n  } else {\r\n    $hOnes.each((index, node) => {\r\n      convertNodeTo($(node), $, 'h2');\r\n    });\r\n  }\r\n\r\n  return $;\r\n}\r\n","import { getAttrs, setAttrs } from 'utils/dom';\r\n\r\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\r\n\r\nfunction removeAllButWhitelist($article, $) {\r\n  $article.find('*').each((index, node) => {\r\n    const attrs = getAttrs(node);\r\n\r\n    setAttrs(\r\n      node,\r\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\r\n        if (WHITELIST_ATTRS_RE.test(attr)) {\r\n          return { ...acc, [attr]: attrs[attr] };\r\n        }\r\n\r\n        return acc;\r\n      }, {})\r\n    );\r\n  });\r\n\r\n  // Remove the mercury-parser-keep class from result\r\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\r\n\r\n  return $article;\r\n}\r\n\r\n// Remove attributes like style or align\r\nexport default function cleanAttributes($article, $) {\r\n  // Grabbing the parent because at this point\r\n  // $article will be wrapped in a div which will\r\n  // have a score set on it.\r\n  return removeAllButWhitelist(\r\n    $article.parent().length ? $article.parent() : $article,\r\n    $\r\n  );\r\n}\r\n","export default function removeEmpty($article, $) {\r\n  $article.find('p').each((index, p) => {\r\n    const $p = $(p);\r\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\r\n      $p.remove();\r\n  });\r\n\r\n  return $;\r\n}\r\n","// // CONTENT FETCHING CONSTANTS ////\r\n\r\n// A list of strings that can be considered unlikely candidates when\r\n// extracting content from a resource. These strings are joined together\r\n// and then tested for existence using re:test, so may contain simple,\r\n// non-pipe style regular expression queries if necessary.\r\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\r\n  'ad-break',\r\n  'adbox',\r\n  'advert',\r\n  'addthis',\r\n  'agegate',\r\n  'aux',\r\n  'blogger-labels',\r\n  'combx',\r\n  'comment',\r\n  'conversation',\r\n  'disqus',\r\n  'entry-unrelated',\r\n  'extra',\r\n  'foot',\r\n  'form',\r\n  'header',\r\n  'hidden',\r\n  'loader',\r\n  'login', // Note: This can hit 'blogindex'.\r\n  'menu',\r\n  'meta',\r\n  'nav',\r\n  'pager',\r\n  'pagination',\r\n  'predicta', // readwriteweb inline ad box\r\n  'presence_control_external', // lifehacker.com container full of false positives\r\n  'popup',\r\n  'printfriendly',\r\n  'related',\r\n  'remove',\r\n  'remark',\r\n  'rss',\r\n  'share',\r\n  'shoutbox',\r\n  'sidebar',\r\n  'sociable',\r\n  'sponsor',\r\n  'tools',\r\n];\r\n\r\n// A list of strings that can be considered LIKELY candidates when\r\n// extracting content from a resource. Essentially, the inverse of the\r\n// blacklist above - if something matches both blacklist and whitelist,\r\n// it is kept. This is useful, for example, if something has a className\r\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\r\n// be removed, however, it's also the entry content, so it should be left\r\n// alone.\r\n//\r\n// These strings are joined together and then tested for existence using\r\n// re:test, so may contain simple, non-pipe style regular expression queries\r\n// if necessary.\r\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\r\n  'and',\r\n  'article',\r\n  'body',\r\n  'blogindex',\r\n  'column',\r\n  'content',\r\n  'entry-content-asset',\r\n  'format', // misuse of form\r\n  'hfeed',\r\n  'hentry',\r\n  'hatom',\r\n  'main',\r\n  'page',\r\n  'posts',\r\n  'shadow',\r\n];\r\n\r\n// A list of tags which, if found inside, should cause a <div /> to NOT\r\n// be turned into a paragraph tag. Shallow div tags without these elements\r\n// should be turned into <p /> tags.\r\nexport const DIV_TO_P_BLOCK_TAGS = [\r\n  'a',\r\n  'blockquote',\r\n  'dl',\r\n  'div',\r\n  'img',\r\n  'p',\r\n  'pre',\r\n  'table',\r\n].join(',');\r\n\r\n// A list of tags that should be ignored when trying to find the top candidate\r\n// for a document.\r\nexport const NON_TOP_CANDIDATE_TAGS = [\r\n  'br',\r\n  'b',\r\n  'i',\r\n  'label',\r\n  'hr',\r\n  'area',\r\n  'base',\r\n  'basefont',\r\n  'input',\r\n  'img',\r\n  'link',\r\n  'meta',\r\n];\r\n\r\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\r\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// A list of selectors that specify, very clearly, either hNews or other\r\n// very content-specific style content, like Blogger templates.\r\n// More examples here: http://microformats.org/wiki/blog-post-formats\r\nexport const HNEWS_CONTENT_SELECTORS = [\r\n  ['.hentry', '.entry-content'],\r\n  ['entry', '.entry-content'],\r\n  ['.entry', '.entry_content'],\r\n  ['.post', '.postbody'],\r\n  ['.post', '.post_body'],\r\n  ['.post', '.post-body'],\r\n];\r\n\r\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\r\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\r\n\r\n// A list of strings that denote a positive scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const POSITIVE_SCORE_HINTS = [\r\n  'article',\r\n  'articlecontent',\r\n  'instapaper_body',\r\n  'blog',\r\n  'body',\r\n  'content',\r\n  'entry-content-asset',\r\n  'entry',\r\n  'hentry',\r\n  'main',\r\n  'Normal',\r\n  'page',\r\n  'pagination',\r\n  'permalink',\r\n  'post',\r\n  'story',\r\n  'text',\r\n  '[-_]copy', // usatoday\r\n  '\\\\Bcopy',\r\n];\r\n\r\n// The above list, joined into a matching regular expression\r\nexport const POSITIVE_SCORE_RE = new RegExp(\r\n  POSITIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Readability publisher-specific guidelines\r\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\r\n\r\n// A list of strings that denote a negative scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const NEGATIVE_SCORE_HINTS = [\r\n  'adbox',\r\n  'advert',\r\n  'author',\r\n  'bio',\r\n  'bookmark',\r\n  'bottom',\r\n  'byline',\r\n  'clear',\r\n  'com-',\r\n  'combx',\r\n  'comment',\r\n  'comment\\\\B',\r\n  'contact',\r\n  'copy',\r\n  'credit',\r\n  'crumb',\r\n  'date',\r\n  'deck',\r\n  'excerpt',\r\n  'featured', // tnr.com has a featured_content which throws us off\r\n  'foot',\r\n  'footer',\r\n  'footnote',\r\n  'graf',\r\n  'head',\r\n  'info',\r\n  'infotext', // newscientist.com copyright\r\n  'instapaper_ignore',\r\n  'jump',\r\n  'linebreak',\r\n  'link',\r\n  'masthead',\r\n  'media',\r\n  'meta',\r\n  'modal',\r\n  'outbrain', // slate.com junk\r\n  'promo',\r\n  'pr_', // autoblog - press release\r\n  'related',\r\n  'respond',\r\n  'roundcontent', // lifehacker restricted content warning\r\n  'scroll',\r\n  'secondary',\r\n  'share',\r\n  'shopping',\r\n  'shoutbox',\r\n  'side',\r\n  'sidebar',\r\n  'sponsor',\r\n  'stamp',\r\n  'sub',\r\n  'summary',\r\n  'tags',\r\n  'tools',\r\n  'widget',\r\n];\r\n// The above list, joined into a matching regular expression\r\nexport const NEGATIVE_SCORE_RE = new RegExp(\r\n  NEGATIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match a digit. Pretty clear.\r\nexport const DIGIT_RE = new RegExp('[0-9]');\r\n\r\n// Match 2 or more consecutive <br> tags\r\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\r\n\r\n// Match 1 BR tag.\r\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\r\n\r\n// A list of all of the block level tags known in HTML5 and below. Taken from\r\n// http://bit.ly/qneNIT\r\nexport const BLOCK_LEVEL_TAGS = [\r\n  'article',\r\n  'aside',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'li',\r\n  'map',\r\n  'object',\r\n  'ol',\r\n  'output',\r\n  'p',\r\n  'pre',\r\n  'progress',\r\n  'section',\r\n  'table',\r\n  'tbody',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'tr',\r\n  'ul',\r\n  'video',\r\n];\r\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\r\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// The removal is implemented as a blacklist and whitelist, this test finds\r\n// blacklisted elements that aren't whitelisted. We do this all in one\r\n// expression-both because it's only one pass, and because this skips the\r\n// serialization for whitelisted nodes.\r\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\r\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\r\n\r\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\r\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\r\n\r\nexport const UNLIKELY_RE = new RegExp(\r\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\r\n  'i'\r\n);\r\n\r\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\r\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\r\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\r\n\r\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\r\n","import {\r\n  NEGATIVE_SCORE_RE,\r\n  POSITIVE_SCORE_RE,\r\n  PHOTO_HINTS_RE,\r\n  READABILITY_ASSET,\r\n} from './constants';\r\n\r\n// Get the score of a node based on its className and id.\r\nexport default function getWeight(node) {\r\n  const classes = node.attr('class');\r\n  const id = node.attr('id');\r\n  let score = 0;\r\n\r\n  if (id) {\r\n    // if id exists, try to score on both positive and negative\r\n    if (POSITIVE_SCORE_RE.test(id)) {\r\n      score += 25;\r\n    }\r\n    if (NEGATIVE_SCORE_RE.test(id)) {\r\n      score -= 25;\r\n    }\r\n  }\r\n\r\n  if (classes) {\r\n    if (score === 0) {\r\n      // if classes exist and id did not contribute to score\r\n      // try to score on both positive and negative\r\n      if (POSITIVE_SCORE_RE.test(classes)) {\r\n        score += 25;\r\n      }\r\n      if (NEGATIVE_SCORE_RE.test(classes)) {\r\n        score -= 25;\r\n      }\r\n    }\r\n\r\n    // even if score has been set by id, add score for\r\n    // possible photo matches\r\n    // \"try to keep photos if we can\"\r\n    if (PHOTO_HINTS_RE.test(classes)) {\r\n      score += 10;\r\n    }\r\n\r\n    // add 25 if class matches entry-content-asset,\r\n    // a class apparently instructed for use in the\r\n    // Readability publisher guidelines\r\n    // https://www.readability.com/developers/guidelines\r\n    if (READABILITY_ASSET.test(classes)) {\r\n      score += 25;\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n","// returns the score of a node based on\r\n// the node's score attribute\r\n// returns null if no score set\r\nexport default function getScore($node) {\r\n  return parseFloat($node.attr('score')) || null;\r\n}\r\n","// return 1 for every comma in text\r\nexport default function scoreCommas(text) {\r\n  return (text.match(/,/g) || []).length;\r\n}\r\n","const idkRe = new RegExp('^(p|pre)$', 'i');\r\n\r\nexport default function scoreLength(textLength, tagName = 'p') {\r\n  const chunks = textLength / 50;\r\n\r\n  if (chunks > 0) {\r\n    let lengthBonus;\r\n\r\n    // No idea why p or pre are being tamped down here\r\n    // but just following the source for now\r\n    // Not even sure why tagName is included here,\r\n    // since this is only being called from the context\r\n    // of scoreParagraph\r\n    if (idkRe.test(tagName)) {\r\n      lengthBonus = chunks - 2;\r\n    } else {\r\n      lengthBonus = chunks - 1.25;\r\n    }\r\n\r\n    return Math.min(Math.max(lengthBonus, 0), 3);\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { scoreCommas, scoreLength } from './index';\r\n\r\n// Score a paragraph using various methods. Things like number of\r\n// commas, etc. Higher is better.\r\nexport default function scoreParagraph(node) {\r\n  let score = 1;\r\n  const text = node.text().trim();\r\n  const textLength = text.length;\r\n\r\n  // If this paragraph is less than 25 characters, don't count it.\r\n  if (textLength < 25) {\r\n    return 0;\r\n  }\r\n\r\n  // Add points for any commas within this paragraph\r\n  score += scoreCommas(text);\r\n\r\n  // For every 50 characters in this paragraph, add another point. Up\r\n  // to 3 points.\r\n  score += scoreLength(textLength);\r\n\r\n  // Articles can end with short paragraphs when people are being clever\r\n  // but they can also end with short paragraphs setting up lists of junk\r\n  // that we strip. This negative tweaks junk setup paragraphs just below\r\n  // the cutoff threshold.\r\n  if (text.slice(-1) === ':') {\r\n    score -= 1;\r\n  }\r\n\r\n  return score;\r\n}\r\n","export default function setScore($node, $, score) {\r\n  $node.attr('score', score);\r\n  return $node;\r\n}\r\n","import { getOrInitScore, setScore } from './index';\r\n\r\nexport default function addScore($node, $, amount) {\r\n  try {\r\n    const score = getOrInitScore($node, $) + amount;\r\n    setScore($node, $, score);\r\n  } catch (e) {\r\n    // Ignoring; error occurs in scoreNode\r\n  }\r\n\r\n  return $node;\r\n}\r\n","import { addScore } from './index';\r\n\r\n// Adds 1/4 of a child's score to its parent\r\nexport default function addToParent(node, $, score) {\r\n  const parent = node.parent();\r\n  if (parent) {\r\n    addScore(parent, $, score * 0.25);\r\n  }\r\n\r\n  return node;\r\n}\r\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\r\n\r\n// gets and returns the score if it exists\r\n// if not, initializes a score based on\r\n// the node's tag type\r\nexport default function getOrInitScore($node, $, weightNodes = true) {\r\n  let score = getScore($node);\r\n\r\n  if (score) {\r\n    return score;\r\n  }\r\n\r\n  score = scoreNode($node);\r\n\r\n  if (weightNodes) {\r\n    score += getWeight($node);\r\n  }\r\n\r\n  addToParent($node, $, score);\r\n\r\n  return score;\r\n}\r\n","import { scoreParagraph } from './index';\r\nimport {\r\n  PARAGRAPH_SCORE_TAGS,\r\n  CHILD_CONTENT_TAGS,\r\n  BAD_TAGS,\r\n} from './constants';\r\n\r\n// Score an individual node. Has some smarts for paragraphs, otherwise\r\n// just scores based on tag.\r\nexport default function scoreNode($node) {\r\n  const { tagName } = $node.get(0);\r\n\r\n  // TODO: Consider ordering by most likely.\r\n  // E.g., if divs are a more common tag on a page,\r\n  // Could save doing that regex test on every node – AP\r\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\r\n    return scoreParagraph($node);\r\n  }\r\n  if (tagName.toLowerCase() === 'div') {\r\n    return 5;\r\n  }\r\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\r\n    return 3;\r\n  }\r\n  if (BAD_TAGS.test(tagName)) {\r\n    return -3;\r\n  }\r\n  if (tagName.toLowerCase() === 'th') {\r\n    return -5;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\r\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\r\n\r\nfunction convertSpans($node, $) {\r\n  if ($node.get(0)) {\r\n    const { tagName } = $node.get(0);\r\n\r\n    if (tagName === 'span') {\r\n      // convert spans to divs\r\n      convertNodeTo($node, $, 'div');\r\n    }\r\n  }\r\n}\r\n\r\nfunction addScoreTo($node, $, score) {\r\n  if ($node) {\r\n    convertSpans($node, $);\r\n    addScore($node, $, score);\r\n  }\r\n}\r\n\r\nfunction scorePs($, weightNodes) {\r\n  $('p, pre')\r\n    .not('[score]')\r\n    .each((index, node) => {\r\n      // The raw score for this paragraph, before we add any parent/child\r\n      // scores.\r\n      let $node = $(node);\r\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\r\n\r\n      const $parent = $node.parent();\r\n      const rawScore = scoreNode($node);\r\n\r\n      addScoreTo($parent, $, rawScore, weightNodes);\r\n      if ($parent) {\r\n        // Add half of the individual content score to the\r\n        // grandparent\r\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\r\n      }\r\n    });\r\n\r\n  return $;\r\n}\r\n\r\n// score content. Parents get the full value of their children's\r\n// content score, grandparents half\r\nexport default function scoreContent($, weightNodes = true) {\r\n  // First, look for special hNews based selectors and give them a big\r\n  // boost, if they exist\r\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\r\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\r\n      addScore($(node).parent(parentSelector), $, 80);\r\n    });\r\n  });\r\n\r\n  // Doubling this again\r\n  // Previous solution caused a bug\r\n  // in which parents weren't retaining\r\n  // scores. This is not ideal, and\r\n  // should be fixed.\r\n  scorePs($, weightNodes);\r\n  scorePs($, weightNodes);\r\n\r\n  return $;\r\n}\r\n","import { textLength, linkDensity } from 'utils/dom';\r\nimport { hasSentenceEnd } from 'utils/text';\r\n\r\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\r\nimport { getScore } from './index';\r\n\r\n// Now that we have a top_candidate, look through the siblings of\r\n// it to see if any of them are decently scored. If they are, they\r\n// may be split parts of the content (Like two divs, a preamble and\r\n// a body.) Example:\r\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\r\nexport default function mergeSiblings($candidate, topScore, $) {\r\n  if (!$candidate.parent().length) {\r\n    return $candidate;\r\n  }\r\n\r\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\r\n  const wrappingDiv = $('<div></div>');\r\n\r\n  $candidate\r\n    .parent()\r\n    .children()\r\n    .each((index, sibling) => {\r\n      const $sibling = $(sibling);\r\n      // Ignore tags like BR, HR, etc\r\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\r\n        return null;\r\n      }\r\n\r\n      const siblingScore = getScore($sibling);\r\n      if (siblingScore) {\r\n        if ($sibling.get(0) === $candidate.get(0)) {\r\n          wrappingDiv.append($sibling);\r\n        } else {\r\n          let contentBonus = 0;\r\n          const density = linkDensity($sibling);\r\n\r\n          // If sibling has a very low link density,\r\n          // give it a small bonus\r\n          if (density < 0.05) {\r\n            contentBonus += 20;\r\n          }\r\n\r\n          // If sibling has a high link density,\r\n          // give it a penalty\r\n          if (density >= 0.5) {\r\n            contentBonus -= 20;\r\n          }\r\n\r\n          // If sibling node has the same class as\r\n          // candidate, give it a bonus\r\n          if ($sibling.attr('class') === $candidate.attr('class')) {\r\n            contentBonus += topScore * 0.2;\r\n          }\r\n\r\n          const newScore = siblingScore + contentBonus;\r\n\r\n          if (newScore >= siblingScoreThreshold) {\r\n            return wrappingDiv.append($sibling);\r\n          }\r\n          if (sibling.tagName === 'p') {\r\n            const siblingContent = $sibling.text();\r\n            const siblingContentLength = textLength(siblingContent);\r\n\r\n            if (siblingContentLength > 80 && density < 0.25) {\r\n              return wrappingDiv.append($sibling);\r\n            }\r\n            if (\r\n              siblingContentLength <= 80 &&\r\n              density === 0 &&\r\n              hasSentenceEnd(siblingContent)\r\n            ) {\r\n              return wrappingDiv.append($sibling);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n  if (\r\n    wrappingDiv.children().length === 1 &&\r\n    wrappingDiv\r\n      .children()\r\n      .first()\r\n      .get(0) === $candidate.get(0)\r\n  ) {\r\n    return $candidate;\r\n  }\r\n\r\n  return wrappingDiv;\r\n}\r\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\r\nimport { getScore } from './index';\r\nimport mergeSiblings from './merge-siblings';\r\n\r\n// After we've calculated scores, loop through all of the possible\r\n// candidate nodes we found and find the one with the highest score.\r\nexport default function findTopCandidate($) {\r\n  let $candidate;\r\n  let topScore = 0;\r\n\r\n  $('[score]').each((index, node) => {\r\n    // Ignore tags like BR, HR, etc\r\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\r\n      return;\r\n    }\r\n\r\n    const $node = $(node);\r\n    const score = getScore($node);\r\n\r\n    if (score > topScore) {\r\n      topScore = score;\r\n      $candidate = $node;\r\n    }\r\n  });\r\n\r\n  // If we don't have a candidate, return the body\r\n  // or whatever the first element is\r\n  if (!$candidate) {\r\n    return $('body') || $('*').first();\r\n  }\r\n\r\n  $candidate = mergeSiblings($candidate, topScore, $);\r\n\r\n  return $candidate;\r\n}\r\n","import {\r\n  getScore,\r\n  setScore,\r\n  getOrInitScore,\r\n  scoreCommas,\r\n} from 'extractors/generic/content/scoring';\r\n\r\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\r\nimport { normalizeSpaces } from '../text';\r\nimport { linkDensity } from './index';\r\n\r\nfunction removeUnlessContent($node, $, weight) {\r\n  // Explicitly save entry-content-asset tags, which are\r\n  // noted as valuable in the Publisher guidelines. For now\r\n  // this works everywhere. We may want to consider making\r\n  // this less of a sure-thing later.\r\n  if ($node.hasClass('entry-content-asset')) {\r\n    return;\r\n  }\r\n\r\n  const content = normalizeSpaces($node.text());\r\n\r\n  if (scoreCommas(content) < 10) {\r\n    const pCount = $('p', $node).length;\r\n    const inputCount = $('input', $node).length;\r\n\r\n    // Looks like a form, too many inputs.\r\n    if (inputCount > pCount / 3) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const contentLength = content.length;\r\n    const imgCount = $('img', $node).length;\r\n\r\n    // Content is too short, and there are no images, so\r\n    // this is probably junk content.\r\n    if (contentLength < 25 && imgCount === 0) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const density = linkDensity($node);\r\n\r\n    // Too high of link density, is probably a menu or\r\n    // something similar.\r\n    // console.log(weight, density, contentLength)\r\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    // Too high of a link density, despite the score being\r\n    // high.\r\n    if (weight >= 25 && density > 0.5) {\r\n      // Don't remove the node if it's a list and the\r\n      // previous sibling starts with a colon though. That\r\n      // means it's probably content.\r\n      const tagName = $node.get(0).tagName.toLowerCase();\r\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\r\n      if (nodeIsList) {\r\n        const previousNode = $node.prev();\r\n        if (\r\n          previousNode &&\r\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const scriptCount = $('script', $node).length;\r\n\r\n    // Too many script tags, not enough content.\r\n    if (scriptCount > 0 && contentLength < 150) {\r\n      $node.remove();\r\n    }\r\n  }\r\n}\r\n\r\n// Given an article, clean it of some superfluous content specified by\r\n// tags. Things like forms, ads, etc.\r\n//\r\n// Tags is an array of tag name's to search through. (like div, form,\r\n// etc)\r\n//\r\n// Return this same doc.\r\nexport default function cleanTags($article, $) {\r\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\r\n    const $node = $(node);\r\n    // If marked to keep, skip it\r\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\r\n      return;\r\n\r\n    let weight = getScore($node);\r\n    if (!weight) {\r\n      weight = getOrInitScore($node, $);\r\n      setScore($node, $, weight);\r\n    }\r\n\r\n    // drop node if its weight is < 0\r\n    if (weight < 0) {\r\n      $node.remove();\r\n    } else {\r\n      // deteremine if node seems like content\r\n      removeUnlessContent($node, $, weight);\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { getWeight } from 'extractors/generic/content/scoring';\r\n\r\nimport { HEADER_TAG_LIST } from './constants';\r\nimport { normalizeSpaces } from '../text';\r\n\r\nexport default function cleanHeaders($article, $, title = '') {\r\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\r\n    const $header = $(header);\r\n    // Remove any headers that appear before all other p tags in the\r\n    // document. This probably means that it was part of the title, a\r\n    // subtitle or something else extraneous like a datestamp or byline,\r\n    // all of which should be handled by other metadata handling.\r\n    if ($($header, $article).prevAll('p').length === 0) {\r\n      return $header.remove();\r\n    }\r\n\r\n    // Remove any headers that match the title exactly.\r\n    if (normalizeSpaces($(header).text()) === title) {\r\n      return $header.remove();\r\n    }\r\n\r\n    // If this header has a negative weight, it's probably junk.\r\n    // Get rid of it.\r\n    if (getWeight($(header)) < 0) {\r\n      return $header.remove();\r\n    }\r\n\r\n    return $header;\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\n// Rewrite the tag name to div if it's a top level node like body or\r\n// html to avoid later complications with multiple body tags.\r\nexport default function rewriteTopLevel(article, $) {\r\n  // I'm not using context here because\r\n  // it's problematic when converting the\r\n  // top-level/root node - AP\r\n  $ = convertNodeTo($('html'), $, 'div');\r\n  $ = convertNodeTo($('body'), $, 'div');\r\n\r\n  return $;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { getAttrs, setAttr } from 'utils/dom';\r\n\r\nfunction absolutize($, rootUrl, attr) {\r\n  const baseUrl = $('base').attr('href');\r\n\r\n  $(`[${attr}]`).each((_, node) => {\r\n    const attrs = getAttrs(node);\r\n    const url = attrs[attr];\r\n    if (!url) return;\r\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\r\n\r\n    setAttr(node, attr, absoluteUrl);\r\n  });\r\n}\r\n\r\nfunction absolutizeSet($, rootUrl, $content) {\r\n  $('[srcset]', $content).each((_, node) => {\r\n    const attrs = getAttrs(node);\r\n    const urlSet = attrs.srcset;\r\n\r\n    if (urlSet) {\r\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\r\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\r\n      // space characters inside the URL should be encoded (%20 or +)\r\n      const candidates = urlSet.match(\r\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\r\n      );\r\n      if (!candidates) return;\r\n      const absoluteCandidates = candidates.map(candidate => {\r\n        // a candidate URL cannot start or end with a comma\r\n        // descriptors are separated from the URLs by unescaped whitespace\r\n        const parts = candidate\r\n          .trim()\r\n          .replace(/,$/, '')\r\n          .split(/\\s+/);\r\n        parts[0] = URL.resolve(rootUrl, parts[0]);\r\n        return parts.join(' ');\r\n      });\r\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\r\n      setAttr(node, 'srcset', absoluteUrlSet);\r\n    }\r\n  });\r\n}\r\n\r\nexport default function makeLinksAbsolute($content, $, url) {\r\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\r\n  absolutizeSet($, url, $content);\r\n\r\n  return $content;\r\n}\r\n","export function textLength(text) {\r\n  return text.trim().replace(/\\s+/g, ' ').length;\r\n}\r\n\r\n// Determines what percentage of the text\r\n// in a node is link text\r\n// Takes a node, returns a float\r\nexport function linkDensity($node) {\r\n  const totalTextLength = textLength($node.text());\r\n\r\n  const linkText = $node.find('a').text();\r\n  const linkLength = textLength(linkText);\r\n\r\n  if (totalTextLength > 0) {\r\n    return linkLength / totalTextLength;\r\n  }\r\n  if (totalTextLength === 0 && linkLength > 0) {\r\n    return 1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\n\r\n// Given a node type to search for, and a list of meta tag names to\r\n// search for, find a meta tag associated.\r\nexport default function extractFromMeta(\r\n  $,\r\n  metaNames,\r\n  cachedNames,\r\n  cleanTags = true\r\n) {\r\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const name of foundNames) {\r\n    const type = 'name';\r\n    const value = 'value';\r\n\r\n    const nodes = $(`meta[${type}=\"${name}\"]`);\r\n\r\n    // Get the unique value of every matching node, in case there\r\n    // are two meta tags with the same name and value.\r\n    // Remove empty values.\r\n    const values = nodes\r\n      .map((index, node) => $(node).attr(value))\r\n      .toArray()\r\n      .filter(text => text !== '');\r\n\r\n    // If we have more than one value for the same name, we have a\r\n    // conflict and can't trust any of them. Skip this name. If we have\r\n    // zero, that means our meta tags had no values. Skip this name\r\n    // also.\r\n    if (values.length === 1) {\r\n      let metaValue;\r\n      // Meta values that contain HTML should be stripped, as they\r\n      // weren't subject to cleaning previously.\r\n      if (cleanTags) {\r\n        metaValue = stripTags(values[0], $);\r\n      } else {\r\n        [metaValue] = values;\r\n      }\r\n\r\n      return metaValue;\r\n    }\r\n  }\r\n\r\n  // If nothing is found, return null\r\n  return null;\r\n}\r\n","import { withinComment } from 'utils/dom';\r\n\r\nfunction isGoodNode($node, maxChildren) {\r\n  // If it has a number of children, it's more likely a container\r\n  // element. Skip it.\r\n  if ($node.children().length > maxChildren) {\r\n    return false;\r\n  }\r\n  // If it looks to be within a comment, skip it.\r\n  if (withinComment($node)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Given a a list of selectors find content that may\r\n// be extractable from the document. This is for flat\r\n// meta-information, like author, title, date published, etc.\r\nexport default function extractFromSelectors(\r\n  $,\r\n  selectors,\r\n  maxChildren = 1,\r\n  textOnly = true\r\n) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const selector of selectors) {\r\n    const nodes = $(selector);\r\n\r\n    // If we didn't get exactly one of this selector, this may be\r\n    // a list of articles or comments. Skip it.\r\n    if (nodes.length === 1) {\r\n      const $node = $(nodes[0]);\r\n\r\n      if (isGoodNode($node, maxChildren)) {\r\n        let content;\r\n        if (textOnly) {\r\n          content = $node.text();\r\n        } else {\r\n          content = $node.html();\r\n        }\r\n\r\n        if (content) {\r\n          return content;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","// strips all tags from a string of text\r\nexport default function stripTags(text, $) {\r\n  // Wrapping text in html element prevents errors when text\r\n  // has no html\r\n  const cleanText = $(`<span>${text}</span>`).text();\r\n  return cleanText === '' ? text : cleanText;\r\n}\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nexport default function withinComment($node) {\r\n  const parents = $node.parents().toArray();\r\n  const commentParent = parents.find(parent => {\r\n    const attrs = getAttrs(parent);\r\n    const { class: nodeClass, id } = attrs;\r\n    const classAndId = `${nodeClass} ${id}`;\r\n    return classAndId.includes('comment');\r\n  });\r\n\r\n  return commentParent !== undefined;\r\n}\r\n","// Given a node, determine if it's article-like enough to return\r\n// param: node (a cheerio node)\r\n// return: boolean\r\n\r\nexport default function nodeIsSufficient($node) {\r\n  return $node.text().trim().length >= 100;\r\n}\r\n","import { IS_WP_SELECTOR } from './constants';\r\n\r\nexport default function isWordpress($) {\r\n  return $(IS_WP_SELECTOR).length > 0;\r\n}\r\n","export default function getAttrs(node) {\r\n  const { attribs, attributes } = node;\r\n\r\n  if (!attribs && attributes) {\r\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\r\n      const attr = attributes[index];\r\n\r\n      if (!attr.name || !attr.value) return acc;\r\n\r\n      acc[attr.name] = attr.value;\r\n      return acc;\r\n    }, {});\r\n    return attrs;\r\n  }\r\n\r\n  return attribs;\r\n}\r\n","export default function setAttr(node, attr, val) {\r\n  if (node.attribs) {\r\n    node.attribs[attr] = val;\r\n  } else if (node.attributes) {\r\n    node.setAttribute(attr, val);\r\n  }\r\n\r\n  return node;\r\n}\r\n","export default function setAttrs(node, attrs) {\r\n  if (node.attribs) {\r\n    node.attribs = attrs;\r\n  } else if (node.attributes) {\r\n    while (node.attributes.length > 0) {\r\n      node.removeAttribute(node.attributes[0].name);\r\n    }\r\n\r\n    Reflect.ownKeys(attrs).forEach(key => {\r\n      node.setAttribute(key, attrs[key]);\r\n    });\r\n  }\r\n\r\n  return node;\r\n}\r\n","export const IS_LINK = new RegExp('https?://', 'i');\r\nconst IMAGE_RE = '.(png|gif|jpe?g)';\r\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\r\nexport const IS_SRCSET = new RegExp(\r\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\r\n  'i'\r\n);\r\n\r\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\r\n\r\n// Convert all instances of images with potentially\r\n// lazy loaded images into normal images.\r\n// Many sites will have img tags with no source, or an image tag with a src\r\n// attribute that a is a placeholer. We need to be able to properly fill in\r\n// the src attribute so the images are no longer lazy loaded.\r\nexport default function convertLazyLoadedImages($) {\r\n  const extractSrcFromJSON = str => {\r\n    try {\r\n      const { src } = JSON.parse(str);\r\n      if (typeof src === 'string') return src;\r\n    } catch (_) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  $('img').each((_, img) => {\r\n    const attrs = getAttrs(img);\r\n\r\n    Reflect.ownKeys(attrs).forEach(attr => {\r\n      const value = attrs[attr];\r\n\r\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\r\n        $(img).attr('srcset', value);\r\n      } else if (\r\n        attr !== 'src' &&\r\n        attr !== 'srcset' &&\r\n        IS_LINK.test(value) &&\r\n        IS_IMAGE.test(value)\r\n      ) {\r\n        // Is the value a JSON object? If so, we should attempt to extract the image src from the data.\r\n        const existingSrc = extractSrcFromJSON(value);\r\n        if (existingSrc) {\r\n          $(img).attr('src', existingSrc);\r\n        } else {\r\n          $(img).attr('src', value);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { TAGS_TO_REMOVE } from './constants';\r\n\r\nfunction isComment(index, node) {\r\n  return node.type === 'comment';\r\n}\r\n\r\nfunction cleanComments($) {\r\n  $.root()\r\n    .find('*')\r\n    .contents()\r\n    .filter(isComment)\r\n    .remove();\r\n\r\n  return $;\r\n}\r\n\r\nexport default function clean($) {\r\n  $(TAGS_TO_REMOVE).remove();\r\n\r\n  $ = cleanComments($);\r\n  return $;\r\n}\r\n","import cheerio from 'cheerio';\r\nimport iconv from 'iconv-lite';\r\n\r\nimport { getEncoding } from 'utils/text';\r\nimport { fetchResource } from './utils';\r\nimport { normalizeMetaTags, convertLazyLoadedImages, clean } from './utils/dom';\r\n\r\nconst Resource = {\r\n  // Create a Resource.\r\n  //\r\n  // :param url: The URL for the document we should retrieve.\r\n  // :param response: If set, use as the response rather than\r\n  //                  attempting to fetch it ourselves. Expects a\r\n  //                  string.\r\n  // :param headers: Custom headers to be included in the request\r\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\r\n    let result;\r\n\r\n    if (preparedResponse) {\r\n      const validResponse = {\r\n        statusMessage: 'OK',\r\n        statusCode: 200,\r\n        headers: {\r\n          'content-type': 'text/html',\r\n          'content-length': 500,\r\n        },\r\n      };\r\n\r\n      result = {\r\n        body: preparedResponse,\r\n        response: validResponse,\r\n        alreadyDecoded: true,\r\n      };\r\n    } else {\r\n      result = await fetchResource(url, parsedUrl, headers);\r\n    }\r\n\r\n    if (result.error) {\r\n      result.failed = true;\r\n      return result;\r\n    }\r\n\r\n    try {\r\n      return this.generateDoc(result);\r\n    }catch (e) {\r\n      result = {\r\n        failed: true,\r\n        error: true,\r\n        message: e.message,\r\n      };\r\n      return result;\r\n    }\r\n  },\r\n\r\n  generateDoc({ body: content, response, alreadyDecoded = false }) {\r\n    const { 'content-type': contentType = '' } = response.headers;\r\n\r\n    // TODO: Implement is_text function from\r\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\r\n    if (!contentType.includes('html') && !contentType.includes('text')) {\r\n      throw new Error(`Content does not appear to be text. ${contentType}`);\r\n    }\r\n\r\n    let $ = this.encodeDoc({ content, contentType, alreadyDecoded });\r\n\r\n    if ($.root().children().length === 0) {\r\n      throw new Error('No children, likely a bad parse.');\r\n    }\r\n\r\n    $ = normalizeMetaTags($);\r\n    $ = convertLazyLoadedImages($);\r\n    $ = clean($);\r\n\r\n    return $;\r\n  },\r\n\r\n  encodeDoc({ content, contentType, alreadyDecoded = false }) {\r\n    if (alreadyDecoded) {\r\n      return cheerio.load(content);\r\n    }\r\n\r\n    const encoding = getEncoding(contentType);\r\n    let decodedContent = iconv.decode(content, encoding);\r\n    let $ = cheerio.load(decodedContent);\r\n    // after first cheerio.load, check to see if encoding matches\r\n    const contentTypeSelector = cheerio.browser\r\n      ? 'meta[http-equiv=content-type]'\r\n      : 'meta[http-equiv=content-type i]';\r\n    const metaContentType =\r\n      $(contentTypeSelector).attr('content') ||\r\n      $('meta[charset]').attr('charset');\r\n    const properEncoding = getEncoding(metaContentType);\r\n\r\n    // if encodings in the header/body dont match, use the one in the body\r\n    if (metaContentType && properEncoding !== encoding) {\r\n      decodedContent = iconv.decode(content, properEncoding);\r\n      $ = cheerio.load(decodedContent);\r\n    }\r\n\r\n    return $;\r\n  },\r\n};\r\n\r\nexport default Resource;\r\n","export default function* range(start = 1, end = 1) {\r\n  while (start <= end) {\r\n    yield (start += 1);\r\n  }\r\n}\r\n","// extremely simple url validation as a first step\r\nexport default function validateUrl({ hostname }) {\r\n  // If this isn't a valid url, return an error message\r\n  return !!hostname;\r\n}\r\n","const merge = (extractor, domains) =>\r\n  domains.reduce((acc, domain) => {\r\n    acc[domain] = extractor;\r\n    return acc;\r\n  }, {});\r\n\r\nexport default function mergeSupportedDomains(extractor) {\r\n  return extractor.supportedDomains\r\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\r\n    : merge(extractor, [extractor.domain]);\r\n}\r\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\r\n\r\nexport const apiExtractors = {};\r\n\r\nexport default function addExtractor(extractor) {\r\n  if (!extractor || !extractor.domain) {\r\n    return {\r\n      error: true,\r\n      message: 'Unable to add custom extractor. Invalid parameters.',\r\n    };\r\n  }\r\n\r\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\r\n\r\n  return apiExtractors;\r\n}\r\n","export const BloggerExtractor = {\r\n  domain: 'blogspot.com',\r\n  content: {\r\n    // Blogger is insane and does not load its content\r\n    // initially in the page, but it's all there\r\n    // in noscript\r\n    selectors: ['.post-content noscript'],\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: [],\r\n\r\n    // Convert the noscript tag to a div\r\n    transforms: {\r\n      noscript: 'div',\r\n    },\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.post-author-name'],\r\n  },\r\n\r\n  title: {\r\n    selectors: ['.post h2.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['span.publishdate'],\r\n  },\r\n};\r\n","export const NYMagExtractor = {\r\n  domain: 'nymag.com',\r\n  content: {\r\n    // Order by most likely. Extractor will stop on first occurrence\r\n    selectors: ['div.article-content', 'section.body', 'article.article'],\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: ['.ad', '.single-related-story'],\r\n\r\n    // Object of tranformations to make on matched elements\r\n    // Each key is the selector, each value is the tag to\r\n    // transform to.\r\n    // If a function is given, it should return a string\r\n    // to convert to or nothing (in which case it will not perform\r\n    // the transformation.\r\n    transforms: {\r\n      // Convert h1s to h2s\r\n      h1: 'h2',\r\n\r\n      // Convert lazy-loaded noscript images to figures\r\n      noscript: ($node, $) => {\r\n        const $children = $.browser ? $($node.text()) : $node.children();\r\n        if (\r\n          $children.length === 1 &&\r\n          $children.get(0) !== undefined &&\r\n          $children.get(0).tagName.toLowerCase() === 'img'\r\n        ) {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n  },\r\n\r\n  title: {\r\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.by-authors', '.lede-feature-author'],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.lede-feature-teaser'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.article-timestamp[datetime]', 'datetime'],\r\n      'time.article-timestamp',\r\n    ],\r\n  },\r\n};\r\n","export const WikipediaExtractor = {\r\n  domain: 'wikipedia.org',\r\n  content: {\r\n    selectors: ['#mw-content-text'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // transform top infobox to an image with caption\r\n    transforms: {\r\n      '.infobox img': $node => {\r\n        const $parent = $node.parents('.infobox');\r\n        // Only prepend the first image in .infobox\r\n        if ($parent.children('img').length === 0) {\r\n          $parent.prepend($node);\r\n        }\r\n      },\r\n      '.infobox caption': 'figcaption',\r\n      '.infobox': 'figure',\r\n    },\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: [\r\n      '.mw-editsection',\r\n      'figure tr, figure td, figure tbody',\r\n      '#toc',\r\n      '.navbox',\r\n    ],\r\n  },\r\n\r\n  author: 'Wikipedia Contributors',\r\n\r\n  title: {\r\n    selectors: ['h2.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['#footer-info-lastmod'],\r\n  },\r\n};\r\n","export const TwitterExtractor = {\r\n  domain: 'twitter.com',\r\n\r\n  content: {\r\n    transforms: {\r\n      // We're transforming essentially the whole page here.\r\n      // Twitter doesn't have nice selectors, so our initial\r\n      // selector grabs the whole page, then we're re-writing\r\n      // it to fit our needs before we clean it up.\r\n      '.permalink[role=main]': ($node, $) => {\r\n        const tweets = $node.find('.tweet');\r\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\r\n        $tweetContainer.append(tweets);\r\n        $node.replaceWith($tweetContainer);\r\n      },\r\n\r\n      // Twitter wraps @ with s, which\r\n      // renders as a strikethrough\r\n      s: 'span',\r\n    },\r\n\r\n    selectors: ['.permalink[role=main]'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.tweet.permalink-tweet .username'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\r\n  },\r\n};\r\n","export const NYTimesExtractor = {\r\n  domain: 'www.nytimes.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      'h1[data-testid=\"headline\"]',\r\n      'h1.g-headline',\r\n      'h1[itemprop=\"headline\"]',\r\n      'h1.headline',\r\n      'h1 .balancedHeadline',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      '.g-byline',\r\n      '.byline',\r\n      ['meta[name=\"byl\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\r\n\r\n    transforms: {\r\n      'img.g-lazy': $node => {\r\n        let src = $node.attr('src');\r\n        const width = 640;\r\n\r\n        src = src.replace('{{size}}', width);\r\n        $node.attr('src', src);\r\n      },\r\n    },\r\n\r\n    clean: [\r\n      '.ad',\r\n      'header#story-header',\r\n      '.story-body-1 .lede.video',\r\n      '.visually-hidden',\r\n      '#newsletter-promo',\r\n      '.promo',\r\n      '.comments-button',\r\n      '.hidden',\r\n      '.comments',\r\n      '.supplemental',\r\n      '.nocontent',\r\n      '.story-footer-links',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[name=\"article:published\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\nexport const TheAtlanticExtractor = {\r\n  domain: 'www.theatlantic.com',\r\n  title: {\r\n    selectors: ['h1', '.c-article-header__hed'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.partner-box',\r\n      '.callout',\r\n      '.c-article-writer__image',\r\n      '.c-article-writer__content',\r\n      '.c-letters-cta__text',\r\n      '.c-footer__logo',\r\n      '.c-recirculation-link',\r\n      '.twitter-tweet',\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const NewYorkerExtractor = {\r\n  domain: 'www.newyorker.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[class^=\"content-header\"]',\r\n      'h1[class^=\"ArticleHeader__hed\"]',\r\n      'h1[class*=\"ContentHeaderHed\"]',\r\n      ['meta[name=\"og:title\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'article header div[class^=\"BylinesWrapper\"]',\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\r\n      'article header div[class*=\"Byline__multipleContributors\"]',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article__body',\r\n      'article.article.main-content',\r\n      'main[class^=\"Layout__content\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.caption__text': 'figcaption',\r\n      '.caption__credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['footer[class^=\"ArticleFooter__footer\"]', 'aside'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'time.content-header__publish-date',\r\n      ['meta[name=\"pubdate\"]', 'value'],\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      'div[class^=\"ContentHeaderDek\"]',\r\n      'div.content-header__dek',\r\n      'h2[class^=\"ArticleHeader__dek\"]',\r\n    ],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const WiredExtractor = {\r\n  domain: 'www.wired.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[data-testId=\"ContentHeaderHed\"]',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'a[rel=\"author\"]',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'article.article.main-content',\r\n      'article.content',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.visually-hidden', 'figcaption img.photo', '.alert-message'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const MSNExtractor = {\r\n  domain: 'www.msn.com',\r\n  title: {\r\n    selectors: [\r\n      'h1',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'span.authorname-txt',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.richtext',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['span.caption'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['span.time'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const YahooExtractor = {\r\n  domain: 'www.yahoo.com',\r\n  title: {\r\n    selectors: [\r\n      'header.canvas-header',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'span.provider-name',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // enter content selectors\r\n      '.content-canvas',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.figure-caption'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time.date[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter dek selectors\r\n    ],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const BuzzfeedExtractor = {\r\n  domain: 'www.buzzfeed.com',\r\n\r\n  supportedDomains: ['www.buzzfeednews.com'],\r\n\r\n  title: {\r\n    selectors: [\r\n      'h1.embed-headline-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-action=\"user/username\"]',\r\n      'byline__author',\r\n      ['meta[name=\"author\"]', 'value'],\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['div[class^=\"featureimage_featureImageWrapper\"]', '.js-subbuzz-wrapper'],\r\n      ['.js-subbuzz-wrapper'],\r\n    ],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: 'b',\r\n\r\n      'div.longform_custom_header_media': $node => {\r\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n\r\n      'figure.longform_custom_header_media .longform_header_image_source':\r\n        'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.instapaper_ignore',\r\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\r\n      '.share-box',\r\n      '.print',\r\n      '.js-inline-share-bar',\r\n      '.js-ad-placement',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.embed-headline-description'],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const WikiaExtractor = {\r\n  domain: 'fandom.wikia.com',\r\n  title: {\r\n    selectors: [\r\n      'h1.entry-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.author vcard',\r\n      '.fn',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.grid-content',\r\n      '.entry-content',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const LittleThingsExtractor = {\r\n  domain: 'www.littlethings.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[class*=\"PostHeader\"]',\r\n      'h1.post-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div[class^=\"PostHeader__ScAuthorNameSection\"]',\r\n      ['meta[name=\"author\"]', 'value'],\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // enter content selectors\r\n      'section[class*=\"PostMainArticle\"]',\r\n      '.mainContentIntro',\r\n      '.content-wrapper',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","export const PoliticoExtractor = {\r\n  domain: 'www.politico.com',\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['div[itemprop=\"author\"] meta[itemprop=\"name\"]', 'value'],\r\n      '.story-meta__authors .vcard',\r\n      '.story-main-content .byline .vcard',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.story-text'], '.story-main-content', '.story-core'],\r\n\r\n    transforms: [],\r\n\r\n    clean: ['figcaption', '.story-meta', '.ad'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\r\n      ['.story-meta__details time[datetime]', 'datetime'],\r\n      ['.story-main-content .timestamp time[datetime]', 'datetime'],\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n};\r\n","export const DeadspinExtractor = {\r\n  domain: 'deadspin.com',\r\n\r\n  supportedDomains: [\r\n    'jezebel.com',\r\n    'lifehacker.com',\r\n    'kotaku.com',\r\n    'gizmodo.com',\r\n    'jalopnik.com',\r\n    'kinja.com',\r\n    'avclub.com',\r\n    'clickhole.com',\r\n    'splinternews.com',\r\n    'theonion.com',\r\n    'theroot.com',\r\n    'thetakeout.com',\r\n    'theinventory.com',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['header h1', 'h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[data-ga*=\"Author\"]', '.author'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.js_post-content', '.post-content', '.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\r\n        const youtubeId = $node.attr('id').split('youtube-')[1];\r\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.magnifier', '.lightbox'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time.updated[datetime]', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const BroadwayWorldExtractor = {\r\n  domain: 'www.broadwayworld.com',\r\n  title: {\r\n    selectors: ['h1[itemprop=headline]', 'h1.article-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=author]'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=articlebody]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=datePublished]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const ApartmentTherapyExtractor = {\r\n  domain: 'www.apartmenttherapy.com',\r\n  title: {\r\n    selectors: ['h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.PostByline__name'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.post__content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\r\n        const data = JSON.parse($node.attr('data-props'));\r\n        const { src } = data.sources[0];\r\n        const $img = $('<img />').attr('src', src);\r\n        $node.replaceWith($img);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","export const MediumExtractor = {\r\n  domain: 'medium.com',\r\n\r\n  title: {\r\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      // Allow drop cap character.\r\n      'section span:first-of-type': $node => {\r\n        const $text = $node.html();\r\n        if ($text.length === 1 && /^[a-zA-Z()]+$/.test($text)) {\r\n          $node.replaceWith($text);\r\n        }\r\n      },\r\n      // Re-write lazy-loaded youtube videos\r\n      iframe: $node => {\r\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\r\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\r\n        const $parent = $node.parents('figure');\r\n\r\n        if (ytRe.test(thumb)) {\r\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\r\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\r\n          const $caption = $parent.find('figcaption');\r\n          $parent.empty().append([$node, $caption]);\r\n          return;\r\n        }\r\n\r\n        // If we can't draw the YouTube preview, remove the figure.\r\n        $parent.remove();\r\n      },\r\n\r\n      // rewrite figures to pull out image and caption, remove rest\r\n      figure: $node => {\r\n        // ignore if figure has an iframe\r\n        if ($node.find('iframe').length > 0) return;\r\n\r\n        const $img = $node.find('img').slice(-1)[0];\r\n        const $caption = $node.find('figcaption');\r\n\r\n        $node.empty().append([$img, $caption]);\r\n      },\r\n\r\n      // Remove any smaller images that did not get caught by the generic image\r\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\r\n      img: $node => {\r\n        const width = parseInt($node.attr('width'), 10);\r\n        if (width < 100) $node.remove();\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['span a', 'svg'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","export const WwwTmzComExtractor = {\r\n  domain: 'www.tmz.com',\r\n\r\n  title: {\r\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\r\n  },\r\n\r\n  author: 'TMZ STAFF',\r\n\r\n  date_published: {\r\n    selectors: ['.article__published-at', '.article-posted-date'],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article__blocks', '.article-content', '.all-post-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.lightbox-link'],\r\n  },\r\n};\r\n","export const WwwWashingtonpostComExtractor = {\r\n  domain: 'www.washingtonpost.com',\r\n\r\n  title: {\r\n    selectors: ['h1', '#topper-headline-wrapper'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.pb-author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.inline-content': $node => {\r\n        if ($node.has('img,iframe,video').length > 0) {\r\n          return 'figure';\r\n        }\r\n\r\n        $node.remove();\r\n        return null;\r\n      },\r\n      '.pb-caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\r\n  },\r\n};\r\n","export const WwwHuffingtonpostComExtractor = {\r\n  domain: 'www.huffingtonpost.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-card__details__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:modified_time\"]', 'value'],\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.headline__subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry__body'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.pull-quote',\r\n      '.tag-cloud',\r\n      '.embed-asset',\r\n      '.below-entry',\r\n      '.entry-corrections',\r\n      '#suggested-story',\r\n    ],\r\n  },\r\n};\r\n","export const NewrepublicComExtractor = {\r\n  domain: 'newrepublic.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.AuthorList'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.article-subhead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['div.article-body']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['aside'],\r\n  },\r\n};\r\n","export const MoneyCnnComExtractor = {\r\n  domain: 'money.cnn.com',\r\n\r\n  title: {\r\n    selectors: ['.article-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], '.byline a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"date\"]', 'value']],\r\n\r\n    timezone: 'GMT',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['#storytext h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#storytext'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.inStoryHeading'],\r\n  },\r\n};\r\n","export const WwwThevergeComExtractor = {\r\n  domain: 'www.theverge.com',\r\n\r\n  supportedDomains: ['www.polygon.com'],\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // feature template multi-match\r\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\r\n      // regular post multi-match\r\n      ['.e-image--hero', '.c-entry-content'],\r\n      // feature template fallback\r\n      '.l-wrapper .l-feature',\r\n      // regular post fallback\r\n      'div.c-entry-content',\r\n    ],\r\n\r\n    // Transform lazy-loaded images\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'span';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.aside',\r\n      'img.c-dynamic-image', // images come from noscript transform\r\n    ],\r\n  },\r\n};\r\n","export const WwwCnnComExtractor = {\r\n  domain: 'www.cnn.com',\r\n\r\n  title: {\r\n    selectors: ['h1.pg-headline', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // a more specific selector to grab the lead image and the body\r\n      ['.media__video--thumbnail', '.zn-body-text'],\r\n      // a fallback for the above\r\n      '.zn-body-text',\r\n      'div[itemprop=\"articleBody\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\r\n        const $text = $node.html();\r\n        if ($text) {\r\n          return 'p';\r\n        }\r\n\r\n        return null;\r\n      },\r\n\r\n      // this transform cleans the short, all-link sections linking\r\n      // to related content but not marked as such in any way.\r\n      '.zn-body__paragraph': $node => {\r\n        if ($node.has('a')) {\r\n          if (\r\n            $node.text().trim() ===\r\n            $node\r\n              .find('a')\r\n              .text()\r\n              .trim()\r\n          ) {\r\n            $node.remove();\r\n          }\r\n        }\r\n      },\r\n\r\n      '.media__video--thumbnail': 'figure',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAolComExtractor = {\r\n  domain: 'www.aol.com',\r\n\r\n  title: {\r\n    selectors: ['h1.p-article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.p-article__byline__date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwYoutubeComExtractor = {\r\n  domain: 'www.youtube.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      ['meta[name=\"title\"]', 'value'],\r\n      '.watch-title',\r\n      'h1.watch-title-container',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['link[itemprop=\"name\"]', 'content'], '.yt-user-info'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\r\n\r\n    timezone: 'GMT',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    defaultCleaner: false,\r\n\r\n    selectors: [\r\n      '#player-container-outer',\r\n      'ytd-expandable-video-description-body-renderer #description',\r\n      ['#player-api', '#description'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '#player-api': ($node, $) => {\r\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\r\n        $node.html(`\r\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\r\n      },\r\n      '#player-container-outer': ($node, $) => {\r\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\r\n        const description = $('meta[itemProp=\"description\"]').attr('value');\r\n        $node.html(`\r\n        <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>\r\n        <div><span>${description}</span></div>`);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwTheguardianComExtractor = {\r\n  domain: 'www.theguardian.com',\r\n\r\n  title: {\r\n    selectors: ['h1', '.content__headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['address[data-link-name=\"byline\"]', 'p.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[data-gu-name=\"standfirst\"]', '.content__standfirst'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#maincontent', '.content__article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.hide-on-mobile', '.inline-icon'],\r\n  },\r\n};\r\n","export const WwwSbnationComExtractor = {\r\n  domain: 'www.sbnation.com',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['p.c-entry-summary.p-dek', 'h2.c-entry-summary.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.c-entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwBloombergComExtractor = {\r\n  domain: 'www.bloomberg.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      // normal articles\r\n      '.lede-headline',\r\n\r\n      // /graphics/ template\r\n      'h1.article-title',\r\n\r\n      // /news/ template\r\n      'h1[class^=\"headline\"]',\r\n      'h1.lede-text-only__hed',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"parsely-author\"]', 'value'],\r\n      '.byline-details__link',\r\n\r\n      // /graphics/ template\r\n      '.bydek',\r\n\r\n      // /news/ template\r\n      '.author',\r\n      'p[class*=\"author\"]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.published-at', 'datetime'],\r\n      ['time[datetime]', 'datetime'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\r\n      ['meta[name=\"parsely-pub-date\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[name=\"og:image\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article-body__content',\r\n      '.body-content',\r\n\r\n      // /graphics/ template\r\n      ['section.copy-block'],\r\n\r\n      // /news/ template\r\n      '.body-copy',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.inline-newsletter', '.page-ad'],\r\n  },\r\n};\r\n","export const WwwBustleComExtractor = {\r\n  domain: 'www.bustle.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.post-page__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[href*=\"profile\"]', 'div.content-meta__author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.post-page__body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwNprOrgExtractor = {\r\n  domain: 'www.npr.org',\r\n\r\n  title: {\r\n    selectors: ['h1', '.storytitle'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.byline__name.byline__name--block'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['.dateblock time[datetime]', 'datetime'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[name=\"twitter:image:src\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.storytext'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.bucketwrap.image': 'figure',\r\n      '.bucketwrap.image .credit-caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['div.enlarge_measure'],\r\n  },\r\n};\r\n","export const WwwRecodeNetExtractor = {\r\n  domain: 'www.recode.net',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.c-entry-summary.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['figure.e-image--hero', '.c-entry-content'],\r\n      '.c-entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const QzComExtractor = {\r\n  domain: 'qz.com',\r\n\r\n  title: {\r\n    selectors: ['article header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time[datetime]', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      ['meta[name=\"twitter:image\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwDmagazineComExtractor = {\r\n  domain: 'www.dmagazine.com',\r\n\r\n  title: {\r\n    selectors: ['h1.story__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.story__info .story__info__item:first-child'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      // enter selectors\r\n      '.story__info',\r\n    ],\r\n\r\n    timezone: 'America/Chicago',\r\n    format: 'MMMM D, YYYY h:mm a',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.story__subhead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['article figure a:first-child', 'href']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.story__content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwReutersComExtractor = {\r\n  domain: 'www.reuters.com',\r\n\r\n  title: {\r\n    selectors: ['h1[class*=\"ArticleHeader-headline-\"]', 'h1.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"og:article:author\"]', 'value'], '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.ArticleBodyWrapper', '#article-text'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.article-subtitle': 'h4',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'div[class^=\"ArticleBody-byline-container-\"]',\r\n      '#article-byline .author',\r\n    ],\r\n  },\r\n};\r\n","export const MashableComExtractor = {\r\n  domain: 'mashable.com',\r\n\r\n  title: {\r\n    selectors: ['header h1', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.author_name a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article', 'section.article-content.blueprint'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.image-credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwChicagotribuneComExtractor = {\r\n  domain: 'www.chicagotribune.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.article_byline span:first-of-type'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwVoxComExtractor = {\r\n  domain: 'www.vox.com',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['figure.e-image--hero', '.c-entry-content'],\r\n      '.c-entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'figure .e-image__image noscript': $node => {\r\n        const imgHtml = $node.html();\r\n        $node\r\n          .parents('.e-image__image')\r\n          .find('.c-dynamic-image')\r\n          .replaceWith(imgHtml);\r\n      },\r\n\r\n      'figure .e-image__meta': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const NewsNationalgeographicComExtractor = {\r\n  domain: 'news.nationalgeographic.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-component__contributors b span'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\r\n    timezone: 'EST',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.parsys.content': ($node, $) => {\r\n        const $imgSrc = $node\r\n          .find('.image.parbase.section')\r\n          .find('.picturefill')\r\n          .first()\r\n          .data('platform-src');\r\n        if ($imgSrc) {\r\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pull-quote.pull-quote--large'],\r\n  },\r\n};\r\n","export const WwwNationalgeographicComExtractor = {\r\n  domain: 'www.nationalgeographic.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-component__contributors b span'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.Article__Headline__Desc', '.article__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'section.Article__Content',\r\n      ['.parsys.content', '.__image-lead__'],\r\n      '.content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.parsys.content': ($node, $) => {\r\n        const $imageParent = $node.children().first();\r\n        if ($imageParent.hasClass('imageGroup')) {\r\n          const $dataAttrContainer = $imageParent\r\n            .find('.media--medium__container')\r\n            .children()\r\n            .first();\r\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\r\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\r\n          if (imgPath2 && imgPath1) {\r\n            $node.prepend(\r\n              $(`<div class=\"__image-lead__\">\r\n                <img src=\"${imgPath1}\"/>\r\n                <img src=\"${imgPath2}\"/>\r\n              </div>`)\r\n            );\r\n          }\r\n        } else {\r\n          const $imgSrc = $node\r\n            .find('.image.parbase.section')\r\n            .find('.picturefill')\r\n            .first()\r\n            .data('platform-src');\r\n          if ($imgSrc) {\r\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pull-quote.pull-quote--small'],\r\n  },\r\n};\r\n","export const WwwLatimesComExtractor = {\r\n  domain: 'www.latimes.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline', '.trb_ar_hl'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-click=\"standardBylineAuthorName\"]',\r\n      ['meta[name=\"author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.page-article-body', '.trb_ar_main'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.trb_ar_la': $node => {\r\n        const $figure = $node.find('figure');\r\n        $node.replaceWith($figure);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\r\n  },\r\n};\r\n","export const PagesixComExtractor = {\r\n  domain: 'pagesix.com',\r\n\r\n  supportedDomains: ['nypost.com'],\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['#featured-image-wrapper', '.entry-content'],\r\n      '.entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '#featured-image-wrapper': 'figure',\r\n      '.wp-caption-text': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.modal-trigger'],\r\n  },\r\n};\r\n","export const ThefederalistpapersOrgExtractor = {\r\n  domain: 'thefederalistpapers.org',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author-meta-title', 'main span.entry-author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'header',\r\n      '.article-sharing',\r\n      '.after-article',\r\n      '.type-commenting',\r\n      '.more-posts',\r\n      ['p[style]'],\r\n    ],\r\n  },\r\n};\r\n","export const WwwCbssportsComExtractor = {\r\n  domain: 'www.cbssports.com',\r\n\r\n  title: {\r\n    selectors: ['.Article-headline', '.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.ArticleAuthor-nameText', '.author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\r\n    timezone: 'UTC',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.Article-subline', '.article-subline'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMsnbcComExtractor = {\r\n  domain: 'www.msnbc.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.is-title-pane'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-name', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n      ['meta[name=\"DC.date.issued\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body__content', '.pane-node-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.pane-node-body': ($node, $) => {\r\n        const [\r\n          selector,\r\n          attr,\r\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\r\n        const src = $(selector).attr(attr);\r\n        if (src) {\r\n          $node.prepend(`<img src=\"${src}\" />`);\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwThepoliticalinsiderComExtractor = {\r\n  domain: 'www.thepoliticalinsider.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMentalflossComExtractor = {\r\n  domain: 'www.mentalfloss.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      ['meta[name=\"og:title\"]', 'value'],\r\n      'h1.title',\r\n      '.title-group',\r\n      '.inner',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-vars-label*=\"authors\"]',\r\n      '.field-name-field-enhanced-authors',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      '.date-display-single',\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article main', 'div.field.field-name-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['small'],\r\n  },\r\n};\r\n","export const AbcnewsGoComExtractor = {\r\n  domain: 'abcnews.go.com',\r\n\r\n  title: {\r\n    selectors: ['div[class*=\"Article_main__body\"] h1', '.article-header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.ShareByline span:nth-child(2)', '.authors'],\r\n    clean: ['.author-overlay', '.by-text'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.ShareByline', '.timestamp'],\r\n    format: 'MMMM D, YYYY h:mm a',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article-copy'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwNydailynewsComExtractor = {\r\n  domain: 'www.nydailynews.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline', 'h1#ra-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.article_byline span',\r\n      ['meta[name=\"parsely-author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time', ['meta[name=\"sailthru.date\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', 'article#ra-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\r\n  },\r\n};\r\n","export const WwwCnbcComExtractor = {\r\n  domain: 'www.cnbc.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div#article_body.content',\r\n      'div.story',\r\n      'div.ArticleBody-articleBody',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwPopsugarComExtractor = {\r\n  domain: 'www.popsugar.com',\r\n\r\n  title: {\r\n    selectors: ['h2.post-title', 'title-text'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\r\n  },\r\n};\r\n","export const ObserverComExtractor = {\r\n  domain: 'observer.com',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author', '.vcard'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const PeopleComExtractor = {\r\n  domain: 'people.com',\r\n\r\n  title: {\r\n    selectors: ['.article-header h1', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"sailthru.author\"]', 'value'], 'a.author.url.fn'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      '.mntl-attribution__item-date',\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article-header h2'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[class^=\"loc article-content\"]', 'div.article-body__inner'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwUsmagazineComExtractor = {\r\n  domain: 'www.usmagazine.com',\r\n\r\n  title: {\r\n    selectors: ['header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.author', 'a.article-byline.tracked-offpage'],\r\n  },\r\n\r\n  date_published: {\r\n    timezone: 'America/New_York',\r\n\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.module-related'],\r\n  },\r\n};\r\n","export const WwwRollingstoneComExtractor = {\r\n  domain: 'www.rollingstone.com',\r\n\r\n  title: {\r\n    selectors: ['h1.l-article-header__row--title', 'h1.content-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.c-byline__link', 'a.content-author.tracked-offpage'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'time.content-published-date',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.l-article-header__row--lead', '.content-description'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.l-article-content',\r\n      ['.lead-container', '.article-content'],\r\n      '.article-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.c-related-links-wrapper', '.module-related'],\r\n  },\r\n};\r\n","export const twofortysevensportsComExtractor = {\r\n  domain: '247sports.com',\r\n\r\n  title: {\r\n    selectors: ['title', 'article header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article-cnt__author', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[data-published]', 'data-published']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body', 'section.body.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const UproxxComExtractor = {\r\n  domain: 'uproxx.com',\r\n\r\n  title: {\r\n    selectors: ['div.entry-header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"qc:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.image': 'figure',\r\n      'div.image .wp-media-credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwEonlineComExtractor = {\r\n  domain: 'www.eonline.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-detail__title', 'h1.article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article-detail__meta__author', '.entry-meta__author a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.article-detail__main-content section'],\r\n      ['.post-content section, .post-content div.post-content__image'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.post-content__image': 'figure',\r\n      'div.post-content__image .image__credits': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMiamiheraldComExtractor = {\r\n  domain: 'www.miamiherald.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['p.published-date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.dateline-storybody'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRefinery29ComExtractor = {\r\n  domain: 'www.refinery29.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.contributor'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.full-width-opener', '.article-content'],\r\n      '.article-content',\r\n      '.body',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.loading noscript': $node => {\r\n        const imgHtml = $node.html();\r\n        $node.parents('.loading').replaceWith(imgHtml);\r\n      },\r\n\r\n      '.section-image': 'figure',\r\n\r\n      '.section-image .content-caption': 'figcaption',\r\n\r\n      '.section-text': 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.story-share'],\r\n  },\r\n};\r\n","export const WwwMacrumorsComExtractor = {\r\n  domain: 'www.macrumors.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['article a[rel=\"author\"]', '.author-url'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time', 'datetime']],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAndroidcentralComExtractor = {\r\n  domain: 'www.androidcentral.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.intro', 'blockquote'],\r\n  },\r\n};\r\n","export const WwwSiComExtractor = {\r\n  domain: 'www.si.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"published\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.m-detail-header--dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.m-detail--body',\r\n      ['p', '.marquee_large_2x', '.component.image'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\r\n    ],\r\n  },\r\n};\r\n","export const WwwRawstoryComExtractor = {\r\n  domain: 'www.rawstory.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.blog-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.main-post-head .social-author__name',\r\n      '.blog-author a:first-of-type',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      '.blog-author a:last-of-type',\r\n    ],\r\n\r\n    timezone: 'EST',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.post-body', '.blog-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwCnetComExtractor = {\r\n  domain: 'www.cnet.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author', 'a.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.c-head_dek', '.article-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['img.__image-lead__', '.article-main-body'],\r\n      '.article-main-body',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'figure.image': $node => {\r\n        const $img = $node.find('img');\r\n        $img.attr('width', '100%');\r\n        $img.attr('height', '100%');\r\n        $img.addClass('__image-lead__');\r\n        $node.remove('.imgContainer').prepend($img);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwTodayComExtractor = {\r\n  domain: 'www.today.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-hero-headline__htag', 'h1.entry-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.byline-name', ['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time[datetime]', ['meta[name=\"DC.date.issued\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body__content', '.entry-container'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.label-comment'],\r\n  },\r\n};\r\n","export const WwwAlComExtractor = {\r\n  domain: 'www.al.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article_author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\r\n    timezone: 'EST',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwThepennyhoarderComExtractor = {\r\n  domain: 'www.thepennyhoarder.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['link[rel=\"author\"]', 'title']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.post-img', '.post-text'],\r\n      '.post-text',\r\n      '.single-post-content-inner',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwWesternjournalismComExtractor = {\r\n  domain: 'www.westernjournalism.com',\r\n\r\n  title: {\r\n    selectors: ['title', 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-sharing.top + div'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.ad-notice-small'],\r\n  },\r\n};\r\n","export const WwwAmericanowComExtractor = {\r\n  domain: 'www.americanow.com',\r\n\r\n  title: {\r\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.article-content', '.image', '.body'], '.body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\r\n  },\r\n};\r\n","export const ScienceflyComExtractor = {\r\n  domain: 'sciencefly.com',\r\n\r\n  title: {\r\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.cb-author', 'div.cb-author-title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.theiaPostSlider_slides'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const HellogigglesComExtractor = {\r\n  domain: 'hellogiggles.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-wrapper span.author_name', '.author-link'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[property=\"article:published_time\"]', 'content'],\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.main-content', '.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ThoughtcatalogComExtractor = {\r\n  domain: 'thoughtcatalog.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'cite a',\r\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\r\n      'h1.writer-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry.post'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.tc_mark', 'figcaption'],\r\n  },\r\n};\r\n","export const WwwInquisitrComExtractor = {\r\n  domain: 'www.inquisitr.com',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title.story--header--title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.story--header--author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.story', '.entry-content.'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.post-category',\r\n      '.story--header--socials',\r\n      '.story--header--content',\r\n    ],\r\n  },\r\n};\r\n","export const WwwNbcnewsComExtractor = {\r\n  domain: 'www.nbcnews.com',\r\n\r\n  title: {\r\n    selectors: ['div.article-hero-headline h1', 'div.article-hed h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.article-inline-byline span.byline-name',\r\n      'span.byline_author',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published\"]', 'value'],\r\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\r\n      '.flag_article-wrapper time',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body__content', 'div.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const FortuneComExtractor = {\r\n  domain: 'fortune.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.MblGHNMJ'],\r\n\r\n    timezone: 'UTC',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['picture', 'article.row'], 'article.row'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwLinkedinComExtractor = {\r\n  domain: 'www.linkedin.com',\r\n\r\n  title: {\r\n    selectors: ['.article-title', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.main-author-card h3',\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      '.entity-name a[rel=author]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      '.base-main-card__metadata',\r\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\r\n    ],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article-content__body',\r\n      ['header figure', '.prose'],\r\n      '.prose',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.entity-image'],\r\n  },\r\n};\r\n","export const ObamawhitehouseArchivesGovExtractor = {\r\n  domain: 'obamawhitehouse.archives.gov',\r\n\r\n  supportedDomains: ['whitehouse.gov'],\r\n\r\n  title: {\r\n    selectors: ['h1', '.pane-node-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.blog-author-link', '.node-person-name-link'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.field-name-field-forall-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    defaultCleaner: false,\r\n\r\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\r\n  },\r\n};\r\n","export const WwwOpposingviewsComExtractor = {\r\n  domain: 'www.opposingviews.com',\r\n\r\n  title: {\r\n    selectors: ['h1.m-detail-header--title', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], 'div.date span span a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"published\"]', 'value'],\r\n      ['meta[name=\"publish_date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.m-detail--body', '.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.show-for-small-only'],\r\n  },\r\n};\r\n","export const WwwProspectmagazineCoUkExtractor = {\r\n  domain: 'www.prospectmagazine.co.uk',\r\n\r\n  title: {\r\n    selectors: ['.blog-header__title', '.page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.blog-header__author-link', '.aside_author .title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], '.post-info'],\r\n\r\n    timezone: 'Europe/London',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.blog-header__description', '.page-subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.blog__container', 'article .post_content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ForwardComExtractor = {\r\n  domain: 'forward.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.post-author a',\r\n      '.author-name',\r\n      ['meta[name=\"sailthru.author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.content-container article',\r\n      ['.post-item-media-wrap', '.post-item p'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.post-author', '.donate-box', '.message', '.subtitle'],\r\n  },\r\n};\r\n","export const WwwQdailyComExtractor = {\r\n  domain: 'www.qdaily.com',\r\n\r\n  title: {\r\n    selectors: ['h2', 'h2.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.date.smart-date', 'data-origindate']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.excerpt'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['.article-detail-hd img', 'src']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.detail'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\r\n  },\r\n};\r\n","export const GothamistComExtractor = {\r\n  domain: 'gothamist.com',\r\n\r\n  supportedDomains: [\r\n    'chicagoist.com',\r\n    'laist.com',\r\n    'sfist.com',\r\n    'shanghaiist.com',\r\n    'dcist.com',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['h1', '.entry-header h1'],\r\n  },\r\n\r\n  author: {\r\n    // There are multiple article-metadata and byline-author classes, but the main article's is the 3rd child of the l-container class\r\n    selectors: ['.article-metadata:nth-child(3) .byline-author', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'abbr',\r\n      'abbr.published',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [null],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body', '.entry-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.image-none': 'figure',\r\n      '.image-none i': 'figcaption',\r\n      'div.image-left': 'figure',\r\n      '.image-left i': 'figcaption',\r\n      'div.image-right': 'figure',\r\n      '.image-right i': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.image-none br',\r\n      '.image-left br',\r\n      '.image-right br',\r\n      '.galleryEase',\r\n    ],\r\n  },\r\n};\r\n","export const WwwFoolComExtractor = {\r\n  domain: 'www.fool.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      '.author-inline .author-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"date\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value'], 'header h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.tailwind-article-body', '.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.caption img': $node => {\r\n        const src = $node.attr('src');\r\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\r\n      },\r\n      '.caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['#pitch'],\r\n  },\r\n};\r\n","export const WwwSlateComExtractor = {\r\n  domain: 'www.slate.com',\r\n\r\n  title: {\r\n    selectors: ['.hed', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[rel=author]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.pub-date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.about-the-author',\r\n      '.pullquote',\r\n      '.newsletter-signup-component',\r\n      '.top-comment',\r\n    ],\r\n  },\r\n};\r\n","export const IciRadioCanadaCaExtractor = {\r\n  domain: 'ici.radio-canada.ca',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\r\n    format: 'YYYY-MM-DD|HH[h]mm',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div.lead-container', '.bunker-component.lead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'section.document-content-style',\r\n      ['.main-multimedia-item', '.news-story-content'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwFortinetComExtractor = {\r\n  domain: 'www.fortinet.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.b15-blog-meta__author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\r\n    ],\r\n\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'figure';\r\n        }\r\n        return null;\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const WwwFastcompanyComExtractor = {\r\n  domain: 'www.fastcompany.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.post__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.post__article'],\r\n  },\r\n};\r\n","export const BlisterreviewComExtractor = {\r\n  domain: 'blisterreview.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time.entry-date', 'datetime'],\r\n      ['meta[itemprop=\"datePublished\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      ['meta[itemprop=\"image\"]', 'content'],\r\n      ['meta[name=\"twitter:image\"]', 'content'],\r\n      ['img.attachment-large', 'src'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      [\r\n        '.elementor-section-wrap',\r\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\r\n      ],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      figcaption: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.comments-area'],\r\n  },\r\n};\r\n","export const NewsMynaviJpExtractor = {\r\n  domain: 'news.mynavi.jp',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a.articleHeader_name',\r\n      'main div.article-author a.article-author__name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body', 'main article div'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      img: $node => {\r\n        const src = $node.attr('data-original');\r\n        if (src !== '') {\r\n          $node.attr('src', src);\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ClinicaltrialsGovExtractor = {\r\n  domain: 'clinicaltrials.gov',\r\n\r\n  title: {\r\n    selectors: ['h1.tr-solo_record'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div#sponsor.tr-info-text'],\r\n  },\r\n\r\n  date_published: {\r\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\r\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#tab-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.usa-alert> img'],\r\n  },\r\n};\r\n","export const GithubComExtractor = {\r\n  domain: 'github.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['relative-time[datetime]', 'datetime'],\r\n      ['span[itemprop=\"dateModified\"] relative-time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      ['meta[name=\"description\"]', 'value'],\r\n      'span[itemprop=\"about\"]',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['#readme article']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRedditComExtractor = {\r\n  domain: 'www.reddit.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      'div[data-test-id=\"post-content\"] h1',\r\n      'div[data-test-id=\"post-content\"] h2',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      'div[data-test-id=\"post-content\"] span[data-click-id=\"timestamp\"]',\r\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['div[data-test-id=\"post-content\"] p'], // text post\r\n      [\r\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\r\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\r\n      ], // external link with media preview (YouTube, imgur album, etc...)\r\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\r\n      ['div[data-test-id=\"post-content\"] a'], // external link\r\n      'div[data-test-id=\"post-content\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div[role=\"img\"]': $node => {\r\n        // External link image preview\r\n        const $img = $node.find('img');\r\n        const bgImg = $node.css('background-image');\r\n        if ($img.length === 1 && bgImg) {\r\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\r\n          return $img;\r\n        }\r\n        return $node;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.icon',\r\n      'span[id^=\"PostAwardBadges\"]',\r\n      'div a[data-test-id=\"comments-page-link-num-comments\"]',\r\n    ],\r\n  },\r\n};\r\n","export const OtrsComExtractor = {\r\n  domain: 'otrs.com',\r\n\r\n  title: {\r\n    selectors: ['#main article h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.dateplusauthor a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main article'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [\r\n      'div.dateplusauthor',\r\n      'div.gr-12.push-6.footershare',\r\n      '#atftbx',\r\n      'div.category-modul',\r\n    ],\r\n  },\r\n};\r\n","export const WwwOssnewsJpExtractor = {\r\n  domain: 'www.ossnews.jp',\r\n\r\n  title: {\r\n    selectors: ['#alpha-block h1.hxnewstitle'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.fs12'],\r\n    format: 'YYYY年MM月DD日 HH:mm',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const BuzzapJpExtractor = {\r\n  domain: 'buzzap.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['time.entry-date', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.ctiframe'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAsahiComExtractor = {\r\n  domain: 'www.asahi.com',\r\n\r\n  title: {\r\n    selectors: ['main h1', '.ArticleTitle h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  excerpt: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['main'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['div.AdMod', 'div.LoginSelectArea', 'time', 'div.notPrint'],\r\n  },\r\n};\r\n","export const WwwSanwaCoJpExtractor = {\r\n  domain: 'www.sanwa.co.jp',\r\n\r\n  title: {\r\n    selectors: ['#newsContent h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['dl.date'],\r\n    format: 'YYYY.MM.DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#newsContent'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\r\n  },\r\n};\r\n","export const WwwElecomCoJpExtractor = {\r\n  domain: 'www.elecom.co.jp',\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.section-last'],\r\n    format: 'YYYY.MM.DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['td.TableMain2'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {\r\n      table: $node => {\r\n        $node.attr('width', 'auto');\r\n      },\r\n    },\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const ScanNetsecurityNeJpExtractor = {\r\n  domain: 'scan.netsecurity.ne.jp',\r\n\r\n  title: {\r\n    selectors: ['header.arti-header h1.head'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['header.arti-header p.arti-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.arti-content.arti-content--thumbnail'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['aside.arti-giga'],\r\n  },\r\n};\r\n","export const JvndbJvnJpExtractor = {\r\n  domain: 'jvndb.jvn.jp',\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['div.modifytxt:nth-child(2)'],\r\n    format: 'YYYY/MM/DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['#news-list'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const GeniusComExtractor = {\r\n  domain: 'genius.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['h2 a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      [\r\n        'meta[itemprop=page_data]',\r\n        'value',\r\n        res => {\r\n          const json = JSON.parse(res);\r\n          return json.song.release_date;\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      [\r\n        'meta[itemprop=page_data]',\r\n        'value',\r\n        res => {\r\n          const json = JSON.parse(res);\r\n          return json.song.album.cover_art_url;\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.lyrics'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwJnsaOrgExtractor = {\r\n  domain: 'www.jnsa.org',\r\n\r\n  title: {\r\n    selectors: ['#wgtitle h2'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: null,\r\n\r\n  dek: null,\r\n\r\n  excerpt: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main_area'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#pankuzu', '#side'],\r\n  },\r\n};\r\n","export const PhpspotOrgExtractor = {\r\n  domain: 'phpspot.org',\r\n\r\n  title: {\r\n    selectors: ['h3.hl'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['h4.hl'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['div.entrybody'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwInfoqComExtractor = {\r\n  domain: 'www.infoq.com',\r\n\r\n  title: {\r\n    selectors: ['h1.heading'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.widget.article__authors'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.article__readTime.date'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article__data'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMoongiftJpExtractor = {\r\n  domain: 'www.moongift.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.title a'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['ul.meta li:not(.social):first-of-type'],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['ul.mg_service.cf'],\r\n  },\r\n};\r\n","export const WwwItmediaCoJpExtractor = {\r\n  domain: 'www.itmedia.co.jp',\r\n\r\n  supportedDomains: [\r\n    'www.atmarkit.co.jp',\r\n    'techtarget.itmedia.co.jp',\r\n    'nlab.itmedia.co.jp',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['#cmsTitle h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['#byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['#cmsAbstract h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#cmsBody'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#snsSharebox'],\r\n  },\r\n};\r\n","export const WwwPublickey1JpExtractor = {\r\n  domain: 'www.publickey1.jp',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.bloggerinchief p:first-of-type', '#subcol p:has(img)'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['div.pubdate'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#maincol'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\r\n  },\r\n};\r\n","export const TakagihiromitsuJpExtractor = {\r\n  domain: 'takagi-hiromitsu.jp',\r\n\r\n  title: {\r\n    selectors: ['h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['div.body'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const BookwalkerJpExtractor = {\r\n  domain: 'bookwalker.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.p-main__title', 'h1.main-heading'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.p-author__list', 'div.authors'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      'dl.p-information__data dd:nth-of-type(7)',\r\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\r\n    ],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.p-main__information',\r\n      ['div.main-info', 'div.main-cover-inner'],\r\n    ],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [\r\n      'span.label.label--trial',\r\n      'dt.info-head.info-head--coin',\r\n      'dd.info-contents.info-contents--coin',\r\n      'div.info-notice.fn-toggleClass',\r\n    ],\r\n  },\r\n};\r\n","export const WwwYomiuriCoJpExtractor = {\r\n  domain: 'www.yomiuri.co.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.title-article.c-article-title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.p-main-contents'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const JapanCnetComExtractor = {\r\n  domain: 'japan.cnet.com',\r\n\r\n  title: {\r\n    selectors: ['.leaf-headline-ttl'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.writer'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.date'],\r\n    format: 'YYYY年MM月DD日 HH時mm分',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article_body'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const DeadlineComExtractor = {\r\n  domain: 'deadline.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['section.author h2'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\r\n\r\n    transforms: {\r\n      '.embed-twitter': $node => {\r\n        const innerHtml = $node.html();\r\n        $node.replaceWith(innerHtml);\r\n      },\r\n    },\r\n\r\n    clean: ['figcaption'],\r\n  },\r\n};\r\n","export const WwwGizmodoJpExtractor = {\r\n  domain: 'www.gizmodo.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.p-post-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['li.p-post-AssistAuthor'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.p-post'],\r\n\r\n    transforms: {\r\n      'img.p-post-thumbnailImage': $node => {\r\n        const src = $node.attr('src');\r\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\r\n      },\r\n    },\r\n\r\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\r\n  },\r\n};\r\n","export const GetnewsJpExtractor = {\r\n  domain: 'getnews.jp',\r\n\r\n  title: {\r\n    selectors: ['article h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.prof'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['ul.cattag-top time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.post-bodycopy'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwLifehackerJpExtractor = {\r\n  domain: 'www.lifehacker.jp',\r\n\r\n  title: {\r\n    selectors: ['h1[class^=\"article_pArticle_Title\"]', 'h1.lh-summary-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      'p.lh-entryDetailInner--credit',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['div.lh-entryDetail-header time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div[class^=\"article_pArticle_Body__\"]',\r\n      'div.lh-entryDetail-body',\r\n    ],\r\n\r\n    transforms: {\r\n      'img.lazyload': $node => {\r\n        const src = $node.attr('src');\r\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\r\n      },\r\n    },\r\n\r\n    clean: ['p.lh-entryDetailInner--credit'],\r\n  },\r\n};\r\n","export const SectIijAdJpExtractor = {\r\n  domain: 'sect.iij.ad.jp',\r\n\r\n  title: {\r\n    selectors: ['div.title-box-inner h1', 'h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.post-author a', 'dl.entrydate dd'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-inner', '#article'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['dl.entrydate'],\r\n  },\r\n};\r\n","export const WwwOreillyCoJpExtractor = {\r\n  domain: 'www.oreilly.co.jp',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=\"author\"]', 'li[itemprop=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['dd[itemprop=\"datePublished\"]', 'content'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image:secure_url\"]', 'value'],\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['section.detail', '#content'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.social-tools'],\r\n  },\r\n};\r\n","export const WwwIpaGoJpExtractor = {\r\n  domain: 'www.ipa.go.jp',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.ipar_text_right'],\r\n    format: 'YYYY年M月D日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['#ipar_main'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['p.ipar_text_right'],\r\n  },\r\n};\r\n","export const WeeklyAsciiJpExtractor = {\r\n  domain: 'weekly.ascii.jp',\r\n\r\n  title: {\r\n    selectors: ['article h1', 'h1[itemprop=\"headline\"]'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['p.date', ['meta[name=\"odate\"]', 'value']],\r\n\r\n    format: 'YYYY年MM月DD日 HH:mm',\r\n\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#contents_detail', 'div.article'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const TechlogIijAdJpExtractor = {\r\n  domain: 'techlog.iij.ad.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[rel=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time.entry-date', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry-content'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.wp_social_bookmarking_light'],\r\n  },\r\n};\r\n","import URL from 'url';\r\n\r\nexport const WiredJpExtractor = {\r\n  domain: 'wired.jp',\r\n\r\n  title: {\r\n    selectors: ['h1[data-testid=\"ContentHeaderHed\"]', 'h1.post-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'p[itemprop=\"author\"]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[class^=\"ContentHeaderDek\"]', '.post-intro'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div[data-attribute-verso-pattern=\"article-body\"]',\r\n      'article.article-detail',\r\n    ],\r\n\r\n    transforms: {\r\n      'img[data-original]': $node => {\r\n        const dataOriginal = $node.attr('data-original');\r\n        const src = $node.attr('src');\r\n        const url = URL.resolve(src, dataOriginal);\r\n        $node.attr('src', url);\r\n      },\r\n    },\r\n\r\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\r\n  },\r\n};\r\n","export const JapanZdnetComExtractor = {\r\n  domain: 'japan.zdnet.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article_body'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRbbtodayComExtractor = {\r\n  domain: 'www.rbbtoday.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.writer.writer-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['header time', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value'], '.arti-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.arti-content'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.arti-giga'],\r\n  },\r\n};\r\n","export const WwwLemondeFrExtractor = {\r\n  domain: 'www.lemonde.fr',\r\n\r\n  title: {\r\n    selectors: ['h1.article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article__desc'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article__content'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['figcaption'],\r\n  },\r\n};\r\n","export const WwwPhoronixComExtractor = {\r\n  domain: 'www.phoronix.com',\r\n\r\n  title: {\r\n    selectors: ['article h1', 'article header'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author a:first-child'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.author'],\r\n    // 1 June 2019 at 08:34 PM EDT\r\n    format: 'D MMMM YYYY at hh:mm',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const PitchforkComExtractor = {\r\n  domain: 'pitchfork.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      '.authors-detail__display-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['div[class^=\"InfoSliceWrapper-\"]', ['.pub-date', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      ['meta[name=\"og:description\"]', 'value'],\r\n      '.review-detail__abstract',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['.single-album-tombstone__art img', 'src'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.body__inner-container', '.review-detail__text'],\r\n  },\r\n\r\n  extend: {\r\n    score: {\r\n      selectors: ['p[class*=\"Rating\"]', '.score'],\r\n    },\r\n  },\r\n};\r\n","export const BiorxivOrgExtractor = {\r\n  domain: 'biorxiv.org',\r\n\r\n  title: {\r\n    selectors: ['h1#page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#abstract-1'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const EpaperZeitDeExtractor = {\r\n  domain: 'epaper.zeit.de',\r\n\r\n  title: {\r\n    selectors: ['p.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article__author'],\r\n  },\r\n\r\n  date_published: null,\r\n\r\n  excerpt: {\r\n    selectors: ['subtitle'],\r\n  },\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'p.title': 'h1',\r\n      '.article__author': 'p',\r\n      byline: 'p',\r\n      linkbox: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['image-credits', 'box[type=citation]'],\r\n  },\r\n};\r\n","export const WwwLadbibleComExtractor = {\r\n  domain: 'www.ladbible.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['[class*=Byline]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n    timezone: 'Europe/London',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['[class*=ArticleContainer]'],\r\n    clean: [\r\n      'time',\r\n      'source',\r\n      'a[href^=\"https://www.ladbible.com/\"]',\r\n      'picture',\r\n      '[class*=StyledCardBlock]',\r\n    ],\r\n  },\r\n};\r\n","export const TimesofindiaIndiatimesComExtractor = {\r\n  domain: 'timesofindia.indiatimes.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  extend: {\r\n    reporter: {\r\n      selectors: ['div.byline'],\r\n      transforms: {},\r\n    },\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.byline'],\r\n    format: 'MMM D, YYYY, HH:mm z',\r\n    timezone: 'Asia/Kolkata',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.contentwrapper:has(section)'],\r\n    defaultCleaner: false,\r\n\r\n    clean: [\r\n      'section',\r\n      'h1',\r\n      '.byline',\r\n      '.img_cptn',\r\n      '.icon_share_wrap',\r\n      'ul[itemtype=\"https://schema.org/BreadcrumbList\"]',\r\n    ],\r\n  },\r\n};\r\n","export const MaTtiasBeExtractor = {\r\n  domain: 'ma.ttias.be',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"twitter:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.content']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: $node => {\r\n        // The \"id\" attribute values would result in low scores and the element being\r\n        // removed.\r\n        $node.attr('id', null);\r\n\r\n        // h1 elements will be demoted to h2, so demote h2 elements to h3.\r\n        return 'h3';\r\n      },\r\n      h1: $node => {\r\n        // The \"id\" attribute values would result in low scores and the element being\r\n        // removed.\r\n        $node.attr('id', null);\r\n\r\n        // A subsequent h2 will be removed if there is not a paragraph before it, so\r\n        // add a paragraph here. It will be removed anyway because it is empty.\r\n        $node.after('<p></p>');\r\n      },\r\n      ul: $node => {\r\n        // Articles contain lists of links which look like, but are not, navigation\r\n        // elements. Adding this class attribute avoids them being incorrectly removed.\r\n        $node.attr('class', 'entry-content-asset');\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const PastebinComExtractor = {\r\n  domain: 'pastebin.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.username', '.paste_box_line2 .t_us + a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.date', '.paste_box_line2 .t_da + span'],\r\n    timezone: 'America/New_York',\r\n    format: 'MMMM D, YYYY',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.source', '#selectable .text'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      ol: 'div',\r\n      li: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable no-unused-expressions */\r\nexport const WwwAbendblattDeExtractor = {\r\n  domain: 'www.abendblatt.de',\r\n\r\n  title: {\r\n    selectors: ['h2.article__header__headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-info__name-text'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.teaser-stream-time', 'datetime'],\r\n      ['time.article__header__date', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article__body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      p: $node => {\r\n        if (!$node.hasClass('obfuscated')) return null;\r\n        let o = '';\r\n        let n = 0;\r\n        for (let i = $node.text(); n < i.length; n += 1) {\r\n          const r = i.charCodeAt(n);\r\n          r === 177\r\n            ? (o += '%')\r\n            : r === 178\r\n            ? (o += '!')\r\n            : r === 180\r\n            ? (o += ';')\r\n            : r === 181\r\n            ? (o += '=')\r\n            : r === 32\r\n            ? (o += ' ')\r\n            : r === 10\r\n            ? (o += '\\n')\r\n            : r > 33 && (o += String.fromCharCode(r - 1));\r\n        }\r\n\r\n        $node.html(o);\r\n        $node.removeClass('obfuscated');\r\n        $node.addClass('deobfuscated');\r\n        return null;\r\n      },\r\n      div: $node => {\r\n        if (!$node.hasClass('obfuscated')) return null;\r\n        let o = '';\r\n        let n = 0;\r\n        for (let i = $node.text(); n < i.length; n += 1) {\r\n          const r = i.charCodeAt(n);\r\n          r === 177\r\n            ? (o += '%')\r\n            : r === 178\r\n            ? (o += '!')\r\n            : r === 180\r\n            ? (o += ';')\r\n            : r === 181\r\n            ? (o += '=')\r\n            : r === 32\r\n            ? (o += ' ')\r\n            : r === 10\r\n            ? (o += '\\n')\r\n            : r > 33 && (o += String.fromCharCode(r - 1));\r\n        }\r\n\r\n        $node.html(o);\r\n        $node.removeClass('obfuscated');\r\n        $node.addClass('deobfuscated');\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwGrueneDeExtractor = {\r\n  domain: 'www.gruene.de',\r\n\r\n  title: {\r\n    selectors: ['header h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: null,\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[property=\"og:image\"]', 'content']],\r\n  },\r\n\r\n  content: {\r\n    // selectors: ['section'],\r\n    selectors: [['section header', 'section h2', 'section p', 'section ol']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['figcaption', 'p[class]'],\r\n  },\r\n};\r\n","export const WwwEngadgetComExtractor = {\r\n  domain: 'www.engadget.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.th-meta[data-ylk*=\"subsec:author\"]'],\r\n  },\r\n\r\n  // Engadget stories have publish dates, but the only representation of them on the page\r\n  // is in a format like \"2h ago\". There are also these tags with blank values:\r\n  // <meta class=\"swiftype\" name=\"published_at\" data-type=\"date\" value=\"\">\r\n  date_published: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[class*=\"o-title_mark\"] div'],\r\n  },\r\n\r\n  // Engadget stories do have lead images specified by an og:image meta tag, but selecting\r\n  // the value attribute of that tag fails. I believe the \"&#x2111;\" sequence of characters\r\n  // is triggering this inability to select the attribute value.\r\n  lead_image_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      [\r\n        // Some figures will be inside div.article-text, but some header figures/images\r\n        // will not.\r\n        '#page_body figure:not(div.article-text figure)',\r\n        'div.article-text',\r\n      ],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ArstechnicaComExtractor = {\r\n  domain: 'arstechnica.com',\r\n\r\n  // Articles from this site are often paginated, but I was unable to write a CSS\r\n  // selector to find the next page. On the last page, there will be a link with a CSS\r\n  // selector indicating that the previous page is next. But the parser appears to find\r\n  // the next page without this extractor finding it, as long as the fallback option is\r\n  // left at its default value of true.\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['*[rel=\"author\"] *[itemprop=\"name\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.byline time', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2[itemprop=\"description\"]'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=\"articleBody\"]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: $node => {\r\n        // Some pages have an element h2 that is significant, and that the parser will\r\n        // remove if not following a paragraph. Adding this empty paragraph fixes it, and\r\n        // the empty paragraph will be removed anyway.\r\n        $node.before('<p></p>');\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result.\r\n    clean: [\r\n      // Remove enlarge links and separators inside image captions.\r\n      'figcaption .enlarge-link',\r\n      'figcaption .sep',\r\n\r\n      // I could not transform the video into usable elements, so I\r\n      // removed them.\r\n      'figure.video',\r\n\r\n      // Image galleries that do not work.\r\n      '.gallery',\r\n\r\n      'aside',\r\n      '.sidebar',\r\n    ],\r\n  },\r\n};\r\n","export const WwwNdtvComExtractor = {\r\n  domain: 'www.ndtv.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=\"author\"] span[itemprop=\"name\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['span[itemprop=\"dateModified\"]', 'content']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=\"articleBody\"]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      // This site puts a dateline in a 'b' above the first paragraph, and then somehow\r\n      // blends it into the first paragraph with CSS. This transform moves the dateline\r\n      // to the first paragraph.\r\n      '.place_cont': $node => {\r\n        if (!$node.parents('p').length) {\r\n          const nextSibling = $node.next('p');\r\n          if (nextSibling) {\r\n            $node.remove();\r\n            nextSibling.prepend($node);\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.highlghts_Wdgt',\r\n      '.ins_instory_dv_caption',\r\n      'input',\r\n      '._world-wrapper .mt20',\r\n    ],\r\n  },\r\n};\r\n","export const SpektrumExtractor = {\r\n  domain: 'www.spektrum.de',\r\n\r\n  title: {\r\n    selectors: ['.content__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.content__author__info__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.content__meta__date'],\r\n    timezone: 'Europe/Berlin',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.content__intro'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      // This is how the meta tag appears in the original source code.\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      // This is how the meta tag appears in the DOM in Chrome.\r\n      // The selector is included here to make the code work within the browser as well.\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      // This is the image that is shown on the page.\r\n      // It can be slightly cropped compared to the original in the meta tag.\r\n      '.image__article__top img',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.content'],\r\n    clean: [\r\n      '.breadcrumbs',\r\n      '.hide-for-print',\r\n      'aside',\r\n      'header h2',\r\n      '.image__article__top',\r\n      '.content__author',\r\n      '.copyright',\r\n      '.callout-box',\r\n    ],\r\n  },\r\n};\r\n","export const PostlightComExtractor = {\r\n  domain: 'postlight.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.single-hero__abstract'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['main.post'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'section.pl-post-link',\r\n      'aside',\r\n      'section.insights_featured_case_studies',\r\n    ],\r\n  },\r\n};\r\n","export const WwwInvestmentexecutiveComExtractor = {\r\n  domain: 'www.investmentexecutive.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div[itemprop=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['section.article-body'],\r\n\r\n    clean: ['.hidden'],\r\n  },\r\n};\r\n","export const WwwCbcCaExtractor = {\r\n  domain: 'www.cbc.ca',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.authorText', '.bylineDetails'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.timeStamp[datetime]', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.story'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","import mergeSupportedDomains from 'utils/merge-supported-domains';\r\nimport * as CustomExtractors from './custom/index';\r\n\r\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\r\n  const extractor = CustomExtractors[key];\r\n  return {\r\n    ...acc,\r\n    ...mergeSupportedDomains(extractor),\r\n  };\r\n}, {});\r\n","// CLEAN AUTHOR CONSTANTS\r\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\r\n\r\n// CLEAN DEK CONSTANTS\r\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\r\n// An ordered list of meta tag names that denote likely article deks.\r\n// From most distinct to least distinct.\r\n//\r\n// NOTE: There are currently no meta tags that seem to provide the right\r\n// content consistenty enough. Two options were:\r\n//  - og:description\r\n//  - dc.description\r\n// However, these tags often have SEO-specific junk in them that's not\r\n// header-worthy like a dek is. Excerpt material at best.\r\nexport const DEK_META_TAGS = [];\r\n\r\n// An ordered list of Selectors to find likely article deks. From\r\n// most explicit to least explicit.\r\n//\r\n// Should be more restrictive than not, as a failed dek can be pretty\r\n// detrimental to the aesthetics of an article.\r\nexport const DEK_SELECTORS = ['.entry-summary'];\r\n\r\n// CLEAN DATE PUBLISHED CONSTANTS\r\nexport const MS_DATE_STRING = /^\\d{13}$/i;\r\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\r\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\r\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\r\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\r\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\r\nconst timeUnits = [\r\n  'seconds?',\r\n  'minutes?',\r\n  'hours?',\r\n  'days?',\r\n  'weeks?',\r\n  'months?',\r\n  'years?',\r\n];\r\nconst allTimeUnits = timeUnits.join('|');\r\nexport const TIME_AGO_STRING = new RegExp(\r\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\r\n  'i'\r\n);\r\nconst months = [\r\n  'jan',\r\n  'feb',\r\n  'mar',\r\n  'apr',\r\n  'may',\r\n  'jun',\r\n  'jul',\r\n  'aug',\r\n  'sep',\r\n  'oct',\r\n  'nov',\r\n  'dec',\r\n];\r\nconst allMonths = months.join('|');\r\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\r\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\r\nconst timestamp3 = '-[0-9]{3,4}$';\r\nexport const SPLIT_DATE_STRING = new RegExp(\r\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\r\n  'ig'\r\n);\r\n\r\n// 2016-11-22T08:57-500\r\n// Check if datetime string has an offset at the end\r\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\r\n\r\n// CLEAN TITLE CONSTANTS\r\n// A regular expression that will match separating characters on a\r\n// title, that usually denote breadcrumbs or something similar.\r\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\r\n\r\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\r\n","import { normalizeSpaces } from 'utils/text';\r\nimport { CLEAN_AUTHOR_RE } from './constants';\r\n\r\n// Take an author string (like 'By David Smith ') and clean it to\r\n// just the name(s): 'David Smith'.\r\nexport default function cleanAuthor(author) {\r\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\r\n}\r\n","import validUrl from 'valid-url';\r\n\r\nexport default function clean(leadImageUrl) {\r\n  leadImageUrl = leadImageUrl.trim();\r\n  if (validUrl.isWebUri(leadImageUrl)) {\r\n    return leadImageUrl;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\nimport { excerptContent, normalizeSpaces } from 'utils/text';\r\n\r\nimport { TEXT_LINK_RE } from './constants';\r\n\r\n// Take a dek HTML fragment, and return the cleaned version of it.\r\n// Return None if the dek wasn't good enough.\r\nexport default function cleanDek(dek, { $, excerpt }) {\r\n  // Sanity check that we didn't get too short or long of a dek.\r\n  if (dek.length > 1000 || dek.length < 5) return null;\r\n\r\n  // Check that dek isn't the same as excerpt\r\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\r\n    return null;\r\n\r\n  const dekText = stripTags(dek, $);\r\n\r\n  // Plain text links shouldn't exist in the dek. If we have some, it's\r\n  // not a good dek - bail.\r\n  if (TEXT_LINK_RE.test(dekText)) return null;\r\n\r\n  return normalizeSpaces(dekText.trim());\r\n}\r\n","import moment from 'moment-timezone';\r\nimport parseFormat from 'moment-parseformat';\r\n// Is there a compelling reason to use moment here?\r\n// Mostly only being used for the isValid() method,\r\n// but could just check for 'Invalid Date' string.\r\n\r\nimport {\r\n  MS_DATE_STRING,\r\n  SEC_DATE_STRING,\r\n  CLEAN_DATE_STRING_RE,\r\n  SPLIT_DATE_STRING,\r\n  TIME_AGO_STRING,\r\n  TIME_NOW_STRING,\r\n  TIME_MERIDIAN_SPACE_RE,\r\n  TIME_MERIDIAN_DOTS_RE,\r\n  TIME_WITH_OFFSET_RE,\r\n} from './constants';\r\n\r\nexport function cleanDateString(dateString) {\r\n  return (dateString.match(SPLIT_DATE_STRING) || [])\r\n    .join(' ')\r\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\r\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\r\n    .replace(CLEAN_DATE_STRING_RE, '$1')\r\n    .trim();\r\n}\r\n\r\nexport function createDate(dateString, timezone, format) {\r\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\r\n    return moment(new Date(dateString));\r\n  }\r\n\r\n  if (TIME_AGO_STRING.test(dateString)) {\r\n    const fragments = TIME_AGO_STRING.exec(dateString);\r\n    return moment().subtract(fragments[1], fragments[2]);\r\n  }\r\n\r\n  if (TIME_NOW_STRING.test(dateString)) {\r\n    return moment();\r\n  }\r\n\r\n  return timezone\r\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\r\n    : moment(dateString, format || parseFormat(dateString));\r\n}\r\n\r\n// Take a date published string, and hopefully return a date out of\r\n// it. Return none if we fail.\r\nexport default function cleanDatePublished(\r\n  dateString,\r\n  { timezone, format } = {}\r\n) {\r\n  // If string is in milliseconds or seconds, convert to int and return\r\n  if (MS_DATE_STRING.test(dateString)) {\r\n    return new Date(parseInt(dateString, 10)).toISOString();\r\n  }\r\n  if (SEC_DATE_STRING.test(dateString)) {\r\n    return new Date(parseInt(dateString, 10) * 1000).toISOString();\r\n  }\r\n\r\n  let date = createDate(dateString, timezone, format);\r\n\r\n  if (!date.isValid()) {\r\n    dateString = cleanDateString(dateString);\r\n    date = createDate(dateString, timezone, format);\r\n  }\r\n\r\n  return date.isValid() ? date.toISOString() : null;\r\n}\r\n","import {\r\n  cleanAttributes,\r\n  cleanHeaders,\r\n  cleanHOnes,\r\n  cleanImages,\r\n  cleanTags,\r\n  removeEmpty,\r\n  rewriteTopLevel,\r\n  markToKeep,\r\n  stripJunkTags,\r\n  makeLinksAbsolute,\r\n} from 'utils/dom';\r\n\r\n// Clean our article content, returning a new, cleaned node.\r\nexport default function extractCleanNode(\r\n  article,\r\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\r\n) {\r\n  // Rewrite the tag name to div if it's a top level node like body or\r\n  // html to avoid later complications with multiple body tags.\r\n  rewriteTopLevel(article, $);\r\n\r\n  // Drop small images and spacer images\r\n  // Only do this is defaultCleaner is set to true;\r\n  // this can sometimes be too aggressive.\r\n  if (defaultCleaner) cleanImages(article, $);\r\n\r\n  // Make links absolute\r\n  makeLinksAbsolute(article, $, url);\r\n\r\n  // Mark elements to keep that would normally be removed.\r\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\r\n  // YouTube/Vimeo videos as elements we want to keep.\r\n  markToKeep(article, $, url);\r\n\r\n  // Drop certain tags like <title>, etc\r\n  // This is -mostly- for cleanliness, not security.\r\n  stripJunkTags(article, $);\r\n\r\n  // H1 tags are typically the article title, which should be extracted\r\n  // by the title extractor instead. If there's less than 3 of them (<3),\r\n  // strip them. Otherwise, turn 'em into H2s.\r\n  cleanHOnes(article, $);\r\n\r\n  // Clean headers\r\n  cleanHeaders(article, $, title);\r\n\r\n  // We used to clean UL's and OL's here, but it was leading to\r\n  // too many in-article lists being removed. Consider a better\r\n  // way to detect menus particularly and remove them.\r\n  // Also optionally running, since it can be overly aggressive.\r\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\r\n\r\n  // Remove empty paragraph nodes\r\n  removeEmpty(article, $);\r\n\r\n  // Remove unnecessary attributes\r\n  cleanAttributes(article, $);\r\n\r\n  return article;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nimport { TITLE_SPLITTERS_RE } from './constants';\r\nimport { resolveSplitTitle } from './index';\r\n\r\nexport default function cleanTitle(title, { url, $ }) {\r\n  // If title has |, :, or - in it, see if\r\n  // we can clean it up.\r\n  if (TITLE_SPLITTERS_RE.test(title)) {\r\n    title = resolveSplitTitle(title, url);\r\n  }\r\n\r\n  // Final sanity check that we didn't get a crazy title.\r\n  // if (title.length > 150 || title.length < 15) {\r\n  if (title.length > 150) {\r\n    // If we did, return h1 from the document if it exists\r\n    const h1 = $('h1');\r\n    if (h1.length === 1) {\r\n      title = h1.text();\r\n    }\r\n  }\r\n\r\n  // strip any html tags in the title text\r\n  return normalizeSpaces(stripTags(title, $).trim());\r\n}\r\n","import URL from 'url';\r\nimport wuzzy from 'wuzzy';\r\n\r\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\r\n\r\nfunction extractBreadcrumbTitle(splitTitle, text) {\r\n  // This must be a very breadcrumbed title, like:\r\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\r\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\r\n  if (splitTitle.length >= 6) {\r\n    // Look to see if we can find a breadcrumb splitter that happens\r\n    // more than once. If we can, we'll be able to better pull out\r\n    // the title.\r\n    const termCounts = splitTitle.reduce((acc, titleText) => {\r\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\r\n      (acc, key) => {\r\n        if (acc[1] < termCounts[key]) {\r\n          return [key, termCounts[key]];\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    // We found a splitter that was used more than once, so it\r\n    // is probably the breadcrumber. Split our title on that instead.\r\n    // Note: max_term should be <= 4 characters, so that \" >> \"\r\n    // will match, but nothing longer than that.\r\n    if (termCount >= 2 && maxTerm.length <= 4) {\r\n      splitTitle = text.split(maxTerm);\r\n    }\r\n\r\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\r\n    const longestEnd = splitEnds.reduce(\r\n      (acc, end) => (acc.length > end.length ? acc : end),\r\n      ''\r\n    );\r\n\r\n    if (longestEnd.length > 10) {\r\n      return longestEnd;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction cleanDomainFromTitle(splitTitle, url) {\r\n  // Search the ends of the title, looking for bits that fuzzy match\r\n  // the URL too closely. If one is found, discard it and return the\r\n  // rest.\r\n  //\r\n  // Strip out the big TLDs - it just makes the matching a bit more\r\n  // accurate. Not the end of the world if it doesn't strip right.\r\n  const { host } = URL.parse(url);\r\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\r\n\r\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\r\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\r\n\r\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\r\n    return splitTitle.slice(2).join('');\r\n  }\r\n\r\n  const endSlug = splitTitle\r\n    .slice(-1)[0]\r\n    .toLowerCase()\r\n    .replace(' ', '');\r\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\r\n\r\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\r\n    return splitTitle.slice(0, -2).join('');\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Given a title with separators in it (colons, dashes, etc),\r\n// resolve whether any of the segments should be removed.\r\nexport default function resolveSplitTitle(title, url = '') {\r\n  // Splits while preserving splitters, like:\r\n  // ['The New New York', ' - ', 'The Washington Post']\r\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\r\n  if (splitTitle.length === 1) {\r\n    return title;\r\n  }\r\n\r\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\r\n  if (newTitle) return newTitle;\r\n\r\n  newTitle = cleanDomainFromTitle(splitTitle, url);\r\n  if (newTitle) return newTitle;\r\n\r\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\r\n  // Just return it all.\r\n  return title;\r\n}\r\n","import cleanAuthor from './author';\r\nimport cleanImage from './lead-image-url';\r\nimport cleanDek from './dek';\r\nimport cleanDatePublished from './date-published';\r\nimport cleanContent from './content';\r\nimport cleanTitle from './title';\r\n\r\nconst Cleaners = {\r\n  author: cleanAuthor,\r\n  lead_image_url: cleanImage,\r\n  dek: cleanDek,\r\n  date_published: cleanDatePublished,\r\n  content: cleanContent,\r\n  title: cleanTitle,\r\n};\r\n\r\nexport default Cleaners;\r\n\r\nexport { cleanAuthor };\r\nexport { cleanImage };\r\nexport { cleanDek };\r\nexport { cleanDatePublished };\r\nexport { cleanContent };\r\nexport { cleanTitle };\r\nexport { default as resolveSplitTitle } from './resolve-split-title';\r\n","import { stripUnlikelyCandidates, convertToParagraphs } from 'utils/dom';\r\n\r\nimport { scoreContent, findTopCandidate } from './scoring';\r\n\r\n// Using a variety of scoring techniques, extract the content most\r\n// likely to be article text.\r\n//\r\n// If strip_unlikely_candidates is True, remove any elements that\r\n// match certain criteria first. (Like, does this element have a\r\n// classname of \"comment\")\r\n//\r\n// If weight_nodes is True, use classNames and IDs to determine the\r\n// worthiness of nodes.\r\n//\r\n// Returns a cheerio object $\r\nexport default function extractBestNode($, opts) {\r\n  if (opts.stripUnlikelyCandidates) {\r\n    $ = stripUnlikelyCandidates($);\r\n  }\r\n\r\n  $ = convertToParagraphs($);\r\n  $ = scoreContent($, opts.weightNodes);\r\n  const $topCandidate = findTopCandidate($);\r\n\r\n  return $topCandidate;\r\n}\r\n","import cheerio from 'cheerio';\r\n\r\nimport { nodeIsSufficient } from 'utils/dom';\r\nimport { cleanContent } from 'cleaners';\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nimport extractBestNode from './extract-best-node';\r\n\r\nconst GenericContentExtractor = {\r\n  defaultOpts: {\r\n    stripUnlikelyCandidates: true,\r\n    weightNodes: true,\r\n    cleanConditionally: true,\r\n  },\r\n\r\n  // Extract the content for this resource - initially, pass in our\r\n  // most restrictive opts which will return the highest quality\r\n  // content. On each failure, retry with slightly more lax opts.\r\n  //\r\n  // :param return_type: string. If \"node\", should return the content\r\n  // as a cheerio node rather than as an HTML string.\r\n  //\r\n  // Opts:\r\n  // stripUnlikelyCandidates: Remove any elements that match\r\n  // non-article-like criteria first.(Like, does this element\r\n  //   have a classname of \"comment\")\r\n  //\r\n  // weightNodes: Modify an elements score based on whether it has\r\n  // certain classNames or IDs. Examples: Subtract if a node has\r\n  // a className of 'comment', Add if a node has an ID of\r\n  // 'entry-content'.\r\n  //\r\n  // cleanConditionally: Clean the node to return of some\r\n  // superfluous content. Things like forms, ads, etc.\r\n  extract({ $, html, title, url }, opts) {\r\n    opts = { ...this.defaultOpts, ...opts };\r\n\r\n    $ = $ || cheerio.load(html);\r\n\r\n    // Cascade through our extraction-specific opts in an ordered fashion,\r\n    // turning them off as we try to extract content.\r\n    let node = this.getContentNode($, title, url, opts);\r\n\r\n    if (nodeIsSufficient(node)) {\r\n      return this.cleanAndReturnNode(node, $);\r\n    }\r\n\r\n    // We didn't succeed on first pass, one by one disable our\r\n    // extraction opts and try again.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\r\n      opts[key] = false;\r\n      $ = cheerio.load(html);\r\n\r\n      node = this.getContentNode($, title, url, opts);\r\n\r\n      if (nodeIsSufficient(node)) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return this.cleanAndReturnNode(node, $);\r\n  },\r\n\r\n  // Get node given current options\r\n  getContentNode($, title, url, opts) {\r\n    return cleanContent(extractBestNode($, opts), {\r\n      $,\r\n      cleanConditionally: opts.cleanConditionally,\r\n      title,\r\n      url,\r\n    });\r\n  },\r\n\r\n  // Once we got here, either we're at our last-resort node, or\r\n  // we broke early. Make sure we at least have -something- before we\r\n  // move forward.\r\n  cleanAndReturnNode(node, $) {\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    return normalizeSpaces($.html(node));\r\n  },\r\n};\r\n\r\nexport default GenericContentExtractor;\r\n","// TODO: It would be great if we could merge the meta and selector lists into\r\n// a list of objects, because we could then rank them better. For example,\r\n// .hentry .entry-title is far better suited than <meta title>.\r\n\r\n// An ordered list of meta tag names that denote likely article titles. All\r\n// attributes should be lowercase for faster case-insensitive matching. From\r\n// most distinct to least distinct.\r\nexport const STRONG_TITLE_META_TAGS = [\r\n  'tweetmeme-title',\r\n  'dc.title',\r\n  'rbtitle',\r\n  'headline',\r\n  'title',\r\n];\r\n\r\n// og:title is weak because it typically contains context that we don't like,\r\n// for example the source site's name. Gotta get that brand into facebook!\r\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\r\n\r\n// An ordered list of XPath Selectors to find likely article titles. From\r\n// most explicit to least explicit.\r\n//\r\n// Note - this does not use classes like CSS. This checks to see if the string\r\n// exists in the className, which is not as accurate as .className (which\r\n// splits on spaces/endlines), but for our purposes it's close enough. The\r\n// speed tradeoff is worth the accuracy hit.\r\nexport const STRONG_TITLE_SELECTORS = [\r\n  '.hentry .entry-title',\r\n  'h1#articleHeader',\r\n  'h1.articleHeader',\r\n  'h1.article',\r\n  '.instapaper_title',\r\n  '#meebo-title',\r\n];\r\n\r\nexport const WEAK_TITLE_SELECTORS = [\r\n  'article h1',\r\n  '#entry-title',\r\n  '.entry-title',\r\n  '#entryTitle',\r\n  '#entrytitle',\r\n  '.entryTitle',\r\n  '.entrytitle',\r\n  '#articleTitle',\r\n  '.articleTitle',\r\n  'post post-title',\r\n  'h1.title',\r\n  'h2.article',\r\n  'h1',\r\n  'html head title',\r\n  'title',\r\n];\r\n","import { cleanTitle } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\n\r\nimport {\r\n  STRONG_TITLE_META_TAGS,\r\n  WEAK_TITLE_META_TAGS,\r\n  STRONG_TITLE_SELECTORS,\r\n  WEAK_TITLE_SELECTORS,\r\n} from './constants';\r\n\r\nconst GenericTitleExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    // First, check to see if we have a matching meta tag that we can make\r\n    // use of that is strongly associated with the headline.\r\n    let title;\r\n\r\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Second, look through our content selectors for the most likely\r\n    // article title that is strongly associated with the headline.\r\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Third, check for weaker meta tags that may match.\r\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Last, look for weaker selector tags that may match.\r\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // If no matches, return an empty string\r\n    return '';\r\n  },\r\n};\r\n\r\nexport default GenericTitleExtractor;\r\n","// An ordered list of meta tag names that denote likely article authors. All\r\n// attributes should be lowercase for faster case-insensitive matching. From\r\n// most distinct to least distinct.\r\n//\r\n// Note: \"author\" is too often the -developer- of the page, so it is not\r\n// added here.\r\nexport const AUTHOR_META_TAGS = [\r\n  'byl',\r\n  'clmst',\r\n  'dc.author',\r\n  'dcsext.author',\r\n  'dc.creator',\r\n  'rbauthors',\r\n  'authors',\r\n];\r\n\r\nexport const AUTHOR_MAX_LENGTH = 300;\r\n\r\n// An ordered list of XPath Selectors to find likely article authors. From\r\n// most explicit to least explicit.\r\n//\r\n// Note - this does not use classes like CSS. This checks to see if the string\r\n// exists in the className, which is not as accurate as .className (which\r\n// splits on spaces/endlines), but for our purposes it's close enough. The\r\n// speed tradeoff is worth the accuracy hit.\r\nexport const AUTHOR_SELECTORS = [\r\n  '.entry .entry-author',\r\n  '.author.vcard .fn',\r\n  '.author .vcard .fn',\r\n  '.byline.vcard .fn',\r\n  '.byline .vcard .fn',\r\n  '.byline .by .author',\r\n  '.byline .by',\r\n  '.byline .author',\r\n  '.post-author.vcard',\r\n  '.post-author .vcard',\r\n  'a[rel=author]',\r\n  '#by_author',\r\n  '.by_author',\r\n  '#entryAuthor',\r\n  '.entryAuthor',\r\n  '.byline a[href*=author]',\r\n  '#author .authorname',\r\n  '.author .authorname',\r\n  '#author',\r\n  '.author',\r\n  '.articleauthor',\r\n  '.ArticleAuthor',\r\n  '.byline',\r\n];\r\n\r\n// An ordered list of Selectors to find likely article authors, with\r\n// regular expression for content.\r\nconst bylineRe = /^[\\n\\s]*By/i;\r\nexport const BYLINE_SELECTORS_RE = [\r\n  ['#byline', bylineRe],\r\n  ['.byline', bylineRe],\r\n];\r\n","import { cleanAuthor } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\n\r\nimport {\r\n  AUTHOR_META_TAGS,\r\n  AUTHOR_MAX_LENGTH,\r\n  AUTHOR_SELECTORS,\r\n  BYLINE_SELECTORS_RE,\r\n} from './constants';\r\n\r\nconst GenericAuthorExtractor = {\r\n  extract({ $, metaCache }) {\r\n    let author;\r\n\r\n    // First, check to see if we have a matching\r\n    // meta tag that we can make use of.\r\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\r\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\r\n      return cleanAuthor(author);\r\n    }\r\n\r\n    // Second, look through our selectors looking for potential authors.\r\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\r\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\r\n      return cleanAuthor(author);\r\n    }\r\n\r\n    // Last, use our looser regular-expression based selectors for\r\n    // potential authors.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\r\n      const node = $(selector);\r\n      if (node.length === 1) {\r\n        const text = node.text();\r\n        if (regex.test(text)) {\r\n          return cleanAuthor(text);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericAuthorExtractor;\r\n","// An ordered list of meta tag names that denote\r\n// likely date published dates. All attributes\r\n// should be lowercase for faster case-insensitive matching.\r\n// From most distinct to least distinct.\r\nexport const DATE_PUBLISHED_META_TAGS = [\r\n  'article:published_time',\r\n  'displaydate',\r\n  'dc.date',\r\n  'dc.date.issued',\r\n  'rbpubdate',\r\n  'publish_date',\r\n  'pub_date',\r\n  'pagedate',\r\n  'pubdate',\r\n  'revision_date',\r\n  'doc_date',\r\n  'date_created',\r\n  'content_create_date',\r\n  'lastmodified',\r\n  'created',\r\n  'date',\r\n];\r\n\r\n// An ordered list of XPath Selectors to find\r\n// likely date published dates. From most explicit\r\n// to least explicit.\r\nexport const DATE_PUBLISHED_SELECTORS = [\r\n  '.hentry .dtstamp.published',\r\n  '.hentry .published',\r\n  '.hentry .dtstamp.updated',\r\n  '.hentry .updated',\r\n  '.single .published',\r\n  '.meta .published',\r\n  '.meta .postDate',\r\n  '.entry-date',\r\n  '.byline .date',\r\n  '.postmetadata .date',\r\n  '.article_datetime',\r\n  '.date-header',\r\n  '.story-date',\r\n  '.dateStamp',\r\n  '#story .datetime',\r\n  '.dateline',\r\n  '.pubdate',\r\n];\r\n\r\n// An ordered list of compiled regular expressions to find likely date\r\n// published dates from the URL. These should always have the first\r\n// reference be a date string that is parseable by dateutil.parser.parse\r\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\r\nexport const DATE_PUBLISHED_URL_RES = [\r\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\r\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\r\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\r\n];\r\n","import { cleanDatePublished } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\nimport { extractFromUrl } from 'utils/text';\r\n\r\nimport {\r\n  DATE_PUBLISHED_META_TAGS,\r\n  DATE_PUBLISHED_SELECTORS,\r\n  DATE_PUBLISHED_URL_RES,\r\n} from './constants';\r\n\r\nconst GenericDatePublishedExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    let datePublished;\r\n    // First, check to see if we have a matching meta tag\r\n    // that we can make use of.\r\n    // Don't try cleaning tags from this string\r\n    datePublished = extractFromMeta(\r\n      $,\r\n      DATE_PUBLISHED_META_TAGS,\r\n      metaCache,\r\n      false\r\n    );\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    // Second, look through our selectors looking for potential\r\n    // date_published's.\r\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    // Lastly, look to see if a dately string exists in the URL\r\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericDatePublishedExtractor;\r\n","// Currently there is only one selector for\r\n// deks. We should simply return null here\r\n// until we have a more robust generic option.\r\n// Below is the original source for this, for reference.\r\nconst GenericDekExtractor = {\r\n  extract() {\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericDekExtractor;\r\n","// An ordered list of meta tag names that denote likely article leading images.\r\n// All attributes should be lowercase for faster case-insensitive matching.\r\n// From most distinct to least distinct.\r\nexport const LEAD_IMAGE_URL_META_TAGS = [\r\n  'og:image',\r\n  'twitter:image',\r\n  'image_src',\r\n];\r\n\r\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\r\n\r\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\r\n  'upload',\r\n  'wp-content',\r\n  'large',\r\n  'photo',\r\n  'wp-image',\r\n];\r\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\r\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\r\n  'spacer',\r\n  'sprite',\r\n  'blank',\r\n  'throbber',\r\n  'gradient',\r\n  'tile',\r\n  'bg',\r\n  'background',\r\n  'icon',\r\n  'social',\r\n  'header',\r\n  'hdr',\r\n  'advert',\r\n  'spinner',\r\n  'loader',\r\n  'loading',\r\n  'default',\r\n  'rating',\r\n  'share',\r\n  'facebook',\r\n  'twitter',\r\n  'theme',\r\n  'promo',\r\n  'ads',\r\n  'wp-includes',\r\n];\r\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\r\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\r\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\r\n","import {\r\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\r\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\r\n  GIF_RE,\r\n  JPG_RE,\r\n} from './constants';\r\n\r\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\r\n\r\nfunction getSig($node) {\r\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\r\n}\r\n\r\n// Scores image urls based on a variety of heuristics.\r\nexport function scoreImageUrl(url) {\r\n  url = url.trim();\r\n  let score = 0;\r\n\r\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\r\n    score += 20;\r\n  }\r\n\r\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\r\n    score -= 20;\r\n  }\r\n\r\n  // TODO: We might want to consider removing this as\r\n  // gifs are much more common/popular than they once were\r\n  if (GIF_RE.test(url)) {\r\n    score -= 10;\r\n  }\r\n\r\n  if (JPG_RE.test(url)) {\r\n    score += 10;\r\n  }\r\n\r\n  // PNGs are neutral.\r\n\r\n  return score;\r\n}\r\n\r\n// Alt attribute usually means non-presentational image.\r\nexport function scoreAttr($img) {\r\n  if ($img.attr('alt')) {\r\n    return 5;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n// Look through our parent and grandparent for figure-like\r\n// container elements, give a bonus if we find them\r\nexport function scoreByParents($img) {\r\n  let score = 0;\r\n  const $figParent = $img.parents('figure').first();\r\n\r\n  if ($figParent.length === 1) {\r\n    score += 25;\r\n  }\r\n\r\n  const $parent = $img.parent();\r\n  let $gParent;\r\n  if ($parent.length === 1) {\r\n    $gParent = $parent.parent();\r\n  }\r\n\r\n  [$parent, $gParent].forEach($node => {\r\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\r\n      score += 15;\r\n    }\r\n  });\r\n\r\n  return score;\r\n}\r\n\r\n// Look at our immediate sibling and see if it looks like it's a\r\n// caption. Bonus if so.\r\nexport function scoreBySibling($img) {\r\n  let score = 0;\r\n  const $sibling = $img.next();\r\n  const sibling = $sibling.get(0);\r\n\r\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\r\n    score += 25;\r\n  }\r\n\r\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\r\n    score += 15;\r\n  }\r\n\r\n  return score;\r\n}\r\n\r\nexport function scoreByDimensions($img) {\r\n  let score = 0;\r\n\r\n  const width = parseFloat($img.attr('width'));\r\n  const height = parseFloat($img.attr('height'));\r\n  const src = $img.attr('src');\r\n\r\n  // Penalty for skinny images\r\n  if (width && width <= 50) {\r\n    score -= 50;\r\n  }\r\n\r\n  // Penalty for short images\r\n  if (height && height <= 50) {\r\n    score -= 50;\r\n  }\r\n\r\n  if (width && height && !src.includes('sprite')) {\r\n    const area = width * height;\r\n    if (area < 5000) {\r\n      // Smaller than 50 x 100\r\n      score -= 100;\r\n    } else {\r\n      score += Math.round(area / 1000);\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n\r\nexport function scoreByPosition($imgs, index) {\r\n  return $imgs.length / 2 - index;\r\n}\r\n","import { extractFromMeta } from 'utils/dom';\r\nimport { cleanImage } from 'cleaners';\r\n\r\nimport {\r\n  LEAD_IMAGE_URL_META_TAGS,\r\n  LEAD_IMAGE_URL_SELECTORS,\r\n} from './constants';\r\n\r\nimport {\r\n  scoreImageUrl,\r\n  scoreAttr,\r\n  scoreByParents,\r\n  scoreBySibling,\r\n  scoreByDimensions,\r\n  scoreByPosition,\r\n} from './score-image';\r\n\r\n// Given a resource, try to find the lead image URL from within\r\n// it. Like content and next page extraction, uses a scoring system\r\n// to determine what the most likely image may be. Short circuits\r\n// on really probable things like og:image meta tags.\r\n//\r\n// Potential signals to still take advantage of:\r\n//   * domain\r\n//   * weird aspect ratio\r\nconst GenericLeadImageUrlExtractor = {\r\n  extract({ $, content, metaCache, html }) {\r\n    let cleanUrl;\r\n    if (!$.browser && $('head').length === 0) {\r\n      $('*')\r\n        .first()\r\n        .prepend(html);\r\n    }\r\n\r\n    // Check to see if we have a matching meta tag that we can make use of.\r\n    // Moving this higher because common practice is now to use large\r\n    // images on things like Open Graph or Twitter cards.\r\n    // images usually have for things like Open Graph.\r\n    const imageUrl = extractFromMeta(\r\n      $,\r\n      LEAD_IMAGE_URL_META_TAGS,\r\n      metaCache,\r\n      false\r\n    );\r\n\r\n    if (imageUrl) {\r\n      cleanUrl = cleanImage(imageUrl);\r\n\r\n      if (cleanUrl) return cleanUrl;\r\n    }\r\n\r\n    // Next, try to find the \"best\" image via the content.\r\n    // We'd rather not have to fetch each image and check dimensions,\r\n    // so try to do some analysis and determine them instead.\r\n    const $content = $(content);\r\n    const imgs = $('img', $content).toArray();\r\n    const imgScores = {};\r\n\r\n    imgs.forEach((img, index) => {\r\n      const $img = $(img);\r\n      const src = $img.attr('src');\r\n\r\n      if (!src) return;\r\n\r\n      let score = scoreImageUrl(src);\r\n      score += scoreAttr($img);\r\n      score += scoreByParents($img);\r\n      score += scoreBySibling($img);\r\n      score += scoreByDimensions($img);\r\n      score += scoreByPosition(imgs, index);\r\n\r\n      imgScores[src] = score;\r\n    });\r\n\r\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\r\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\r\n      [null, 0]\r\n    );\r\n\r\n    if (topScore > 0) {\r\n      cleanUrl = cleanImage(topUrl);\r\n\r\n      if (cleanUrl) return cleanUrl;\r\n    }\r\n\r\n    // If nothing else worked, check to see if there are any really\r\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\r\n      const $node = $(selector).first();\r\n      const src = $node.attr('src');\r\n      if (src) {\r\n        cleanUrl = cleanImage(src);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n\r\n      const href = $node.attr('href');\r\n      if (href) {\r\n        cleanUrl = cleanImage(href);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n\r\n      const value = $node.attr('value');\r\n      if (value) {\r\n        cleanUrl = cleanImage(value);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericLeadImageUrlExtractor;\r\n","import difflib from 'difflib';\r\n\r\nexport default function scoreSimilarity(score, articleUrl, href) {\r\n  // Do this last and only if we have a real candidate, because it's\r\n  // potentially expensive computationally. Compare the link to this\r\n  // URL using difflib to get the % similarity of these URLs. On a\r\n  // sliding scale, subtract points from this link based on\r\n  // similarity.\r\n  if (score > 0) {\r\n    const similarity = new difflib.SequenceMatcher(\r\n      null,\r\n      articleUrl,\r\n      href\r\n    ).ratio();\r\n    // Subtract .1 from diff_percent when calculating modifier,\r\n    // which means that if it's less than 10% different, we give a\r\n    // bonus instead. Ex:\r\n    //  3% different = +17.5 points\r\n    // 10% different = 0 points\r\n    // 20% different = -25 points\r\n    const diffPercent = 1.0 - similarity;\r\n    const diffModifier = -(250 * (diffPercent - 0.2));\r\n    return score + diffModifier;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { IS_DIGIT_RE } from 'utils/text/constants';\r\n\r\nexport default function scoreLinkText(linkText, pageNum) {\r\n  // If the link text can be parsed as a number, give it a minor\r\n  // bonus, with a slight bias towards lower numbered pages. This is\r\n  // so that pages that might not have 'next' in their text can still\r\n  // get scored, and sorted properly by score.\r\n  let score = 0;\r\n\r\n  if (IS_DIGIT_RE.test(linkText.trim())) {\r\n    const linkTextAsNum = parseInt(linkText, 10);\r\n    // If it's the first page, we already got it on the first call.\r\n    // Give it a negative score. Otherwise, up to page 10, give a\r\n    // small bonus.\r\n    if (linkTextAsNum < 2) {\r\n      score = -30;\r\n    } else {\r\n      score = Math.max(0, 10 - linkTextAsNum);\r\n    }\r\n\r\n    // If it appears that the current page number is greater than\r\n    // this links page number, it's a very bad sign. Give it a big\r\n    // penalty.\r\n    if (pageNum && pageNum >= linkTextAsNum) {\r\n      score -= 50;\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n","export default function scorePageInLink(pageNum, isWp) {\r\n  // page in the link = bonus. Intentionally ignore wordpress because\r\n  // their ?p=123 link style gets caught by this even though it means\r\n  // separate documents entirely.\r\n  if (pageNum && !isWp) {\r\n    return 50;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","export const DIGIT_RE = /\\d/;\r\n\r\n// A list of words that, if found in link text or URLs, likely mean that\r\n// this link is not a next page link.\r\nexport const EXTRANEOUS_LINK_HINTS = [\r\n  'print',\r\n  'archive',\r\n  'comment',\r\n  'discuss',\r\n  'e-mail',\r\n  'email',\r\n  'share',\r\n  'reply',\r\n  'all',\r\n  'login',\r\n  'sign',\r\n  'single',\r\n  'adx',\r\n  'entry-unrelated',\r\n];\r\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\r\n  EXTRANEOUS_LINK_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match any link text/classname/id that looks like it could mean the next\r\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\r\n// mean last page.\r\nexport const NEXT_LINK_TEXT_RE = new RegExp(\r\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\r\n  'i'\r\n);\r\n\r\n// Match any link text/classname/id that looks like it is an end link: things\r\n// like \"first\", \"last\", \"end\", etc.\r\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it means the previous\r\n// page.\r\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\r\n\r\n// Match any phrase that looks like it could be page, or paging, or pagination\r\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\r\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nexport default function scoreExtraneousLinks(href) {\r\n  // If the URL itself contains extraneous values, give a penalty.\r\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\r\n    return -25;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { range } from 'utils';\r\nimport {\r\n  NEGATIVE_SCORE_RE,\r\n  POSITIVE_SCORE_RE,\r\n  PAGE_RE,\r\n} from 'utils/dom/constants';\r\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nfunction makeSig($link) {\r\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\r\n}\r\n\r\nexport default function scoreByParents($link) {\r\n  // If a parent node contains paging-like classname or id, give a\r\n  // bonus. Additionally, if a parent_node contains bad content\r\n  // (like 'sponsor'), give a penalty.\r\n  let $parent = $link.parent();\r\n  let positiveMatch = false;\r\n  let negativeMatch = false;\r\n  let score = 0;\r\n\r\n  Array.from(range(0, 4)).forEach(() => {\r\n    if ($parent.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const parentData = makeSig($parent, ' ');\r\n\r\n    // If we have 'page' or 'paging' in our data, that's a good\r\n    // sign. Add a bonus.\r\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\r\n      positiveMatch = true;\r\n      score += 25;\r\n    }\r\n\r\n    // If we have 'comment' or something in our data, and\r\n    // we don't have something like 'content' as well, that's\r\n    // a bad sign. Give a penalty.\r\n    if (\r\n      !negativeMatch &&\r\n      NEGATIVE_SCORE_RE.test(parentData) &&\r\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\r\n    ) {\r\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\r\n        negativeMatch = true;\r\n        score -= 25;\r\n      }\r\n    }\r\n\r\n    $parent = $parent.parent();\r\n  });\r\n\r\n  return score;\r\n}\r\n","import { PREV_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scorePrevLink(linkData) {\r\n  // If the link has something like \"previous\", its definitely\r\n  // an old link, skip it.\r\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\r\n    return -200;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nexport default function shouldScore(\r\n  href,\r\n  articleUrl,\r\n  baseUrl,\r\n  parsedUrl,\r\n  linkText,\r\n  previousUrls\r\n) {\r\n  // skip if we've already fetched this url\r\n  if (previousUrls.find(url => href === url) !== undefined) {\r\n    return false;\r\n  }\r\n\r\n  // If we've already parsed this URL, or the URL matches the base\r\n  // URL, or is empty, skip it.\r\n  if (!href || href === articleUrl || href === baseUrl) {\r\n    return false;\r\n  }\r\n\r\n  const { hostname } = parsedUrl;\r\n  const { hostname: linkHost } = URL.parse(href);\r\n\r\n  // Domain mismatch.\r\n  if (linkHost !== hostname) {\r\n    return false;\r\n  }\r\n\r\n  // If href doesn't contain a digit after removing the base URL,\r\n  // it's certainly not the next page.\r\n  const fragment = href.replace(baseUrl, '');\r\n  if (!DIGIT_RE.test(fragment)) {\r\n    return false;\r\n  }\r\n\r\n  // This link has extraneous content (like \"comment\") in its link\r\n  // text, so we skip it.\r\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\r\n    return false;\r\n  }\r\n\r\n  // Next page link text is never long, skip if it is too long.\r\n  if (linkText.length > 25) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","export default function scoreBaseUrl(href, baseRegex) {\r\n  // If the baseUrl isn't part of this URL, penalize this\r\n  // link. It could still be the link, but the odds are lower.\r\n  // Example:\r\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\r\n  if (!baseRegex.test(href)) {\r\n    return -25;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { NEXT_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scoreNextLinkText(linkData) {\r\n  // Things like \"next\", \">>\", etc.\r\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\r\n    return 50;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scoreCapLinks(linkData) {\r\n  // Cap links are links like \"last\", etc.\r\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\r\n    // If we found a link like \"last\", but we've already seen that\r\n    // this link is also \"next\", it's fine. If it's not been\r\n    // previously marked as \"next\", then it's probably bad.\r\n    // Penalize.\r\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\r\n      return -65;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { getAttrs, isWordpress } from 'utils/dom';\r\nimport { removeAnchor, pageNumFromUrl } from 'utils/text';\r\n\r\nimport {\r\n  scoreSimilarity,\r\n  scoreLinkText,\r\n  scorePageInLink,\r\n  scoreExtraneousLinks,\r\n  scoreByParents,\r\n  scorePrevLink,\r\n  shouldScore,\r\n  scoreBaseUrl,\r\n  scoreCapLinks,\r\n  scoreNextLinkText,\r\n} from './utils';\r\n\r\nexport function makeBaseRegex(baseUrl) {\r\n  return new RegExp(`^${baseUrl}`, 'i');\r\n}\r\n\r\nfunction makeSig($link, linkText) {\r\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\r\n    'id'\r\n  ) || ''}`;\r\n}\r\n\r\nexport default function scoreLinks({\r\n  links,\r\n  articleUrl,\r\n  baseUrl,\r\n  parsedUrl,\r\n  $,\r\n  previousUrls = [],\r\n}) {\r\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\r\n  const baseRegex = makeBaseRegex(baseUrl);\r\n  const isWp = isWordpress($);\r\n\r\n  // Loop through all links, looking for hints that they may be next-page\r\n  // links. Things like having \"page\" in their textContent, className or\r\n  // id, or being a child of a node with a page-y className or id.\r\n  //\r\n  // After we do that, assign each page a score, and pick the one that\r\n  // looks most like the next page link, as long as its score is strong\r\n  // enough to have decent confidence.\r\n  const scoredPages = links.reduce((possiblePages, link) => {\r\n    // Remove any anchor data since we don't do a good job\r\n    // standardizing URLs (it's hard), we're going to do\r\n    // some checking with and without a trailing slash\r\n    const attrs = getAttrs(link);\r\n\r\n    // if href is undefined, return\r\n    if (!attrs.href) return possiblePages;\r\n\r\n    const href = removeAnchor(attrs.href);\r\n    const $link = $(link);\r\n    const linkText = $link.text();\r\n\r\n    if (\r\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\r\n    ) {\r\n      return possiblePages;\r\n    }\r\n\r\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\r\n    if (!possiblePages[href]) {\r\n      possiblePages[href] = {\r\n        score: 0,\r\n        linkText,\r\n        href,\r\n      };\r\n    } else {\r\n      possiblePages[href].linkText = `${\r\n        possiblePages[href].linkText\r\n      }|${linkText}`;\r\n    }\r\n\r\n    const possiblePage = possiblePages[href];\r\n    const linkData = makeSig($link, linkText);\r\n    const pageNum = pageNumFromUrl(href);\r\n\r\n    let score = scoreBaseUrl(href, baseRegex);\r\n    score += scoreNextLinkText(linkData);\r\n    score += scoreCapLinks(linkData);\r\n    score += scorePrevLink(linkData);\r\n    score += scoreByParents($link);\r\n    score += scoreExtraneousLinks(href);\r\n    score += scorePageInLink(pageNum, isWp);\r\n    score += scoreLinkText(linkText, pageNum);\r\n    score += scoreSimilarity(score, articleUrl, href);\r\n\r\n    possiblePage.score = score;\r\n\r\n    return possiblePages;\r\n  }, {});\r\n\r\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { articleBaseUrl, removeAnchor } from 'utils/text';\r\nimport scoreLinks from './scoring/score-links';\r\n\r\n// Looks for and returns next page url\r\n// for multi-page articles\r\nconst GenericNextPageUrlExtractor = {\r\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\r\n    parsedUrl = parsedUrl || URL.parse(url);\r\n\r\n    const articleUrl = removeAnchor(url);\r\n    const baseUrl = articleBaseUrl(url, parsedUrl);\r\n\r\n    const links = $('a[href]').toArray();\r\n\r\n    const scoredLinks = scoreLinks({\r\n      links,\r\n      articleUrl,\r\n      baseUrl,\r\n      parsedUrl,\r\n      $,\r\n      previousUrls,\r\n    });\r\n\r\n    // If no links were scored, return null\r\n    if (!scoredLinks) return null;\r\n\r\n    // now that we've scored all possible pages,\r\n    // find the biggest one.\r\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\r\n      (acc, link) => {\r\n        const scoredLink = scoredLinks[link];\r\n        return scoredLink.score > acc.score ? scoredLink : acc;\r\n      },\r\n      { score: -100 }\r\n    );\r\n\r\n    // If the score is less than 50, we're not confident enough to use it,\r\n    // so we fail.\r\n    if (topPage.score >= 50) {\r\n      return topPage.href;\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericNextPageUrlExtractor;\r\n","export const CANONICAL_META_SELECTORS = ['og:url'];\r\n","import URL from 'url';\r\nimport { extractFromMeta } from 'utils/dom';\r\n\r\nimport { CANONICAL_META_SELECTORS } from './constants';\r\n\r\nfunction parseDomain(url) {\r\n  const parsedUrl = URL.parse(url);\r\n  const { hostname } = parsedUrl;\r\n  return hostname;\r\n}\r\n\r\nfunction result(url) {\r\n  return {\r\n    url,\r\n    domain: parseDomain(url),\r\n  };\r\n}\r\n\r\nconst GenericUrlExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    const $canonical = $('link[rel=canonical]');\r\n    if ($canonical.length !== 0) {\r\n      const href = $canonical.attr('href');\r\n      if (href) {\r\n        return result(href);\r\n      }\r\n    }\r\n\r\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\r\n    if (metaUrl) {\r\n      return result(metaUrl);\r\n    }\r\n\r\n    return result(url);\r\n  },\r\n};\r\n\r\nexport default GenericUrlExtractor;\r\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\r\n","import ellipsize from 'ellipsize';\r\n\r\nimport { extractFromMeta, stripTags } from 'utils/dom';\r\n\r\nimport { EXCERPT_META_SELECTORS } from './constants';\r\n\r\nexport function clean(content, $, maxLength = 200) {\r\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\r\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\r\n}\r\n\r\nconst GenericExcerptExtractor = {\r\n  extract({ $, content, metaCache }) {\r\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\r\n    if (excerpt) {\r\n      return clean(stripTags(excerpt, $));\r\n    }\r\n    // Fall back to excerpting from the extracted content\r\n    const maxLength = 200;\r\n    const shortContent = content.slice(0, maxLength * 5);\r\n    return clean($(shortContent).text(), $, maxLength);\r\n  },\r\n};\r\n\r\nexport default GenericExcerptExtractor;\r\n","import cheerio from 'cheerio';\r\n\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nconst getWordCount = content => {\r\n  const $ = cheerio.load(content);\r\n  const $content = $('div').first();\r\n  const text = normalizeSpaces($content.text());\r\n  return text.split(/\\s/).length;\r\n};\r\n\r\nconst getWordCountAlt = content => {\r\n  content = content.replace(/<[^>]*>/g, ' ');\r\n  content = content.replace(/\\s+/g, ' ');\r\n  content = content.trim();\r\n  return content.split(' ').length;\r\n};\r\n\r\nconst GenericWordCountExtractor = {\r\n  extract({ content }) {\r\n    let count = getWordCount(content);\r\n    if (count === 1) count = getWordCountAlt(content);\r\n    return count;\r\n  },\r\n};\r\n\r\nexport default GenericWordCountExtractor;\r\n","import cheerio from 'cheerio';\r\nimport stringDirection from 'string-direction';\r\n\r\nimport GenericContentExtractor from './content/extractor';\r\nimport GenericTitleExtractor from './title/extractor';\r\nimport GenericAuthorExtractor from './author/extractor';\r\nimport GenericDatePublishedExtractor from './date-published/extractor';\r\nimport GenericDekExtractor from './dek/extractor';\r\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\r\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\r\nimport GenericUrlExtractor from './url/extractor';\r\nimport GenericExcerptExtractor from './excerpt/extractor';\r\nimport GenericWordCountExtractor from './word-count/extractor';\r\n\r\nconst GenericExtractor = {\r\n  // This extractor is the default for all domains\r\n  domain: '*',\r\n  title: GenericTitleExtractor.extract,\r\n  date_published: GenericDatePublishedExtractor.extract,\r\n  author: GenericAuthorExtractor.extract,\r\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\r\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\r\n  dek: GenericDekExtractor.extract,\r\n  next_page_url: GenericNextPageUrlExtractor.extract,\r\n  url_and_domain: GenericUrlExtractor.extract,\r\n  excerpt: GenericExcerptExtractor.extract,\r\n  word_count: GenericWordCountExtractor.extract,\r\n  direction: ({ title }) => stringDirection.getDirection(title),\r\n\r\n  extract(options) {\r\n    const { html, $ } = options;\r\n\r\n    if (html && !$) {\r\n      const loaded = cheerio.load(html);\r\n      options.$ = loaded;\r\n    }\r\n\r\n    const title = this.title(options);\r\n    const date_published = this.date_published(options);\r\n    const author = this.author(options);\r\n    const content = this.content({ ...options, title });\r\n    const lead_image_url = this.lead_image_url({ ...options, content });\r\n    const dek = this.dek({ ...options, content });\r\n    const next_page_url = this.next_page_url(options);\r\n    const excerpt = this.excerpt({ ...options, content });\r\n    const word_count = this.word_count({ ...options, content });\r\n    const direction = this.direction({ title });\r\n    const { url, domain } = this.url_and_domain(options);\r\n\r\n    return {\r\n      title,\r\n      author,\r\n      date_published: date_published || null,\r\n      dek,\r\n      lead_image_url,\r\n      content,\r\n      next_page_url,\r\n      url,\r\n      domain,\r\n      excerpt,\r\n      word_count,\r\n      direction,\r\n    };\r\n  },\r\n};\r\n\r\nexport default GenericExtractor;\r\n","import { MediumExtractor, BloggerExtractor } from './custom';\r\n\r\nconst Detectors = {\r\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\r\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor,\r\n};\r\n\r\nexport default function detectByHtml($) {\r\n  const selector = Reflect.ownKeys(Detectors).find(s => $(s).length > 0);\r\n\r\n  return Detectors[selector];\r\n}\r\n","import URL from 'url';\r\n\r\nimport Extractors from './all';\r\nimport GenericExtractor from './generic';\r\nimport detectByHtml from './detect-by-html';\r\nimport { apiExtractors } from './add-extractor';\r\n\r\nexport default function getExtractor(url, parsedUrl, $) {\r\n  parsedUrl = parsedUrl || URL.parse(url);\r\n  const { hostname } = parsedUrl;\r\n  const baseDomain = hostname\r\n    .split('.')\r\n    .slice(-2)\r\n    .join('.');\r\n\r\n  return (\r\n    apiExtractors[hostname] ||\r\n    apiExtractors[baseDomain] ||\r\n    Extractors[hostname] ||\r\n    Extractors[baseDomain] ||\r\n    detectByHtml($) ||\r\n    GenericExtractor\r\n  );\r\n}\r\n","import Cleaners from 'cleaners';\r\nimport { convertNodeTo, makeLinksAbsolute } from 'utils/dom';\r\nimport GenericExtractor from './generic';\r\n\r\n// Remove elements by an array of selectors\r\nexport function cleanBySelectors($content, $, { clean }) {\r\n  if (!clean) return $content;\r\n\r\n  $(clean.join(','), $content).remove();\r\n\r\n  return $content;\r\n}\r\n\r\n// Transform matching elements\r\nexport function transformElements($content, $, { transforms }) {\r\n  if (!transforms) return $content;\r\n\r\n  Reflect.ownKeys(transforms).forEach(key => {\r\n    const $matches = $(key, $content);\r\n    const value = transforms[key];\r\n\r\n    // If value is a string, convert directly\r\n    if (typeof value === 'string') {\r\n      $matches.each((index, node) => {\r\n        convertNodeTo($(node), $, transforms[key]);\r\n      });\r\n    } else if (typeof value === 'function') {\r\n      // If value is function, apply function to node\r\n      $matches.each((index, node) => {\r\n        const result = value($(node), $);\r\n        // If function returns a string, convert node to that value\r\n        if (typeof result === 'string') {\r\n          convertNodeTo($(node), $, result);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return $content;\r\n}\r\n\r\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\r\n  return selectors.find(selector => {\r\n    if (Array.isArray(selector)) {\r\n      if (extractHtml) {\r\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\r\n      }\r\n\r\n      const [s, attr] = selector;\r\n      return (\r\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\r\n        $(s).attr(attr) &&\r\n        $(s)\r\n          .attr(attr)\r\n          .trim() !== ''\r\n      );\r\n    }\r\n\r\n    return (\r\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\r\n      $(selector)\r\n        .text()\r\n        .trim() !== ''\r\n    );\r\n  });\r\n}\r\n\r\nexport function select(opts) {\r\n  const { $, type, extractionOpts, extractHtml = false } = opts;\r\n  // Skip if there's not extraction for this type\r\n  if (!extractionOpts) return null;\r\n\r\n  // If a string is hardcoded for a type (e.g., Wikipedia\r\n  // contributors), return the string\r\n  if (typeof extractionOpts === 'string') return extractionOpts;\r\n\r\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\r\n\r\n  const overrideAllowMultiple = type === 'lead_image_url' || allowMultiple;\r\n\r\n  const matchingSelector = findMatchingSelector(\r\n    $,\r\n    selectors,\r\n    extractHtml,\r\n    overrideAllowMultiple\r\n  );\r\n\r\n  if (!matchingSelector) return null;\r\n\r\n  function transformAndClean($node) {\r\n    makeLinksAbsolute($node, $, opts.url || '');\r\n    cleanBySelectors($node, $, extractionOpts);\r\n    transformElements($node, $, extractionOpts);\r\n    return $node;\r\n  }\r\n\r\n  function selectHtml() {\r\n    // If the selector type requests html as its return type\r\n    // transform and clean the element with provided selectors\r\n    let $content;\r\n\r\n    // If matching selector is an array, we're considering this a\r\n    // multi-match selection, which allows the parser to choose several\r\n    // selectors to include in the result. Note that all selectors in the\r\n    // array must match in order for this selector to trigger\r\n    if (Array.isArray(matchingSelector)) {\r\n      $content = $(matchingSelector.join(','));\r\n      const $wrapper = $('<div></div>');\r\n      $content.each((_, element) => {\r\n        $wrapper.append(element);\r\n      });\r\n\r\n      $content = $wrapper;\r\n    } else {\r\n      $content = $(matchingSelector);\r\n    }\r\n\r\n    // Wrap in div so transformation can take place on root element\r\n    $content.wrap($('<div></div>'));\r\n    $content = $content.parent();\r\n    $content = transformAndClean($content);\r\n    if (Cleaners[type]) {\r\n      Cleaners[type]($content, { ...opts, defaultCleaner });\r\n    }\r\n\r\n    if (allowMultiple) {\r\n      return $content\r\n        .children()\r\n        .toArray()\r\n        .map(el => $.html($(el)));\r\n    }\r\n\r\n    return $.html($content);\r\n  }\r\n\r\n  if (extractHtml) {\r\n    return selectHtml(matchingSelector);\r\n  }\r\n\r\n  let $match;\r\n  let result;\r\n  // if selector is an array (e.g., ['img', 'src']),\r\n  // extract the attr\r\n  if (Array.isArray(matchingSelector)) {\r\n    const [selector, attr, transform] = matchingSelector;\r\n    $match = $(selector);\r\n    $match = transformAndClean($match);\r\n    result = $match.map((_, el) => {\r\n      const item = $(el)\r\n        .attr(attr)\r\n        .trim();\r\n      return transform ? transform(item) : item;\r\n    });\r\n  } else {\r\n    $match = $(matchingSelector);\r\n    $match = transformAndClean($match);\r\n    result = $match.map((_, el) =>\r\n      $(el)\r\n        .text()\r\n        .trim()\r\n    );\r\n  }\r\n\r\n  result =\r\n    Array.isArray(result.toArray()) && allowMultiple\r\n      ? result.toArray()\r\n      : result[0];\r\n  // Allow custom extractor to skip default cleaner\r\n  // for this type; defaults to true\r\n  if (defaultCleaner && Cleaners[type]) {\r\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function selectExtendedTypes(extend, opts) {\r\n  const results = {};\r\n  Reflect.ownKeys(extend).forEach(t => {\r\n    if (!results[t]) {\r\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\r\n    }\r\n  });\r\n  return results;\r\n}\r\n\r\nfunction extractResult(opts) {\r\n  const { type, extractor, fallback = true } = opts;\r\n\r\n  const result = select({ ...opts, extractionOpts: extractor[type] });\r\n\r\n  // If custom parser succeeds, return the result\r\n  if (result) {\r\n    return result;\r\n  }\r\n\r\n  // If nothing matches the selector, and fallback is enabled,\r\n  // run the Generic extraction\r\n  if (fallback) return GenericExtractor[type](opts);\r\n\r\n  return null;\r\n}\r\n\r\nconst RootExtractor = {\r\n  extract(extractor = GenericExtractor, opts) {\r\n    const { contentOnly, extractedTitle } = opts;\r\n    // This is the generic extractor. Run its extract method\r\n    if (extractor.domain === '*') return extractor.extract(opts);\r\n\r\n    opts = {\r\n      ...opts,\r\n      extractor,\r\n    };\r\n\r\n    if (contentOnly) {\r\n      const content = extractResult({\r\n        ...opts,\r\n        type: 'content',\r\n        extractHtml: true,\r\n        title: extractedTitle,\r\n      });\r\n      return {\r\n        content,\r\n      };\r\n    }\r\n    const title = extractResult({ ...opts, type: 'title' });\r\n    const date_published = extractResult({ ...opts, type: 'date_published' });\r\n    const author = extractResult({ ...opts, type: 'author' });\r\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\r\n    const content = extractResult({\r\n      ...opts,\r\n      type: 'content',\r\n      extractHtml: true,\r\n      title,\r\n    });\r\n    const lead_image_url = extractResult({\r\n      ...opts,\r\n      type: 'lead_image_url',\r\n      content,\r\n    });\r\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\r\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\r\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\r\n    const direction = extractResult({ ...opts, type: 'direction', title });\r\n    const { url, domain } = extractResult({\r\n      ...opts,\r\n      type: 'url_and_domain',\r\n    }) || { url: null, domain: null };\r\n\r\n    let extendedResults = {};\r\n    if (extractor.extend) {\r\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\r\n    }\r\n\r\n    return {\r\n      title,\r\n      content,\r\n      author,\r\n      date_published,\r\n      lead_image_url,\r\n      dek,\r\n      next_page_url,\r\n      url,\r\n      domain,\r\n      excerpt,\r\n      word_count,\r\n      direction,\r\n      ...extendedResults,\r\n    };\r\n  },\r\n};\r\n\r\nexport default RootExtractor;\r\n","import { removeAnchor } from 'utils/text';\r\nimport RootExtractor from 'extractors/root-extractor';\r\nimport GenericExtractor from 'extractors/generic';\r\nimport Resource from 'resource';\r\n\r\nexport default async function collectAllPages({\r\n  next_page_url,\r\n  html,\r\n  $,\r\n  metaCache,\r\n  result,\r\n  Extractor,\r\n  title,\r\n  url,\r\n}) {\r\n  // At this point, we've fetched just the first page\r\n  let pages = 1;\r\n  const previousUrls = [removeAnchor(url)];\r\n  // If we've gone over 26 pages, something has\r\n  // likely gone wrong.\r\n  while (next_page_url && pages < 26) {\r\n    pages += 1;\r\n    // eslint-disable-next-line no-await-in-loop\r\n    $ = await Resource.create(next_page_url);\r\n    html = $.html();\r\n\r\n    const extractorOpts = {\r\n      url: next_page_url,\r\n      html,\r\n      $,\r\n      metaCache,\r\n      extractedTitle: title,\r\n      previousUrls,\r\n    };\r\n\r\n    const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\r\n\r\n    previousUrls.push(next_page_url);\r\n    result = {\r\n      ...result,\r\n      content: `${result.content}<hr><h4>Page ${pages}</h4>${\r\n        nextPageResult.content\r\n      }`,\r\n    };\r\n\r\n    // eslint-disable-next-line prefer-destructuring\r\n    next_page_url = nextPageResult.next_page_url;\r\n  }\r\n\r\n  const word_count = GenericExtractor.word_count({\r\n    content: `<div>${result.content}</div>`,\r\n  });\r\n  return {\r\n    ...result,\r\n    total_pages: pages,\r\n    rendered_pages: pages,\r\n    word_count,\r\n  };\r\n}\r\n","import URL from 'url';\r\nimport cheerio from 'cheerio';\r\nimport TurndownService from 'turndown';\r\n\r\nimport Resource from 'resource';\r\nimport { validateUrl } from 'utils';\r\nimport addCustomExtractor from 'extractors/add-extractor';\r\nimport getExtractor from 'extractors/get-extractor';\r\nimport RootExtractor, { selectExtendedTypes } from 'extractors/root-extractor';\r\nimport collectAllPages from 'extractors/collect-all-pages';\r\n\r\nconst Parser = {\r\n  async parse(url, { html, ...opts } = {}) {\r\n    const {\r\n      fetchAllPages = true,\r\n      fallback = true,\r\n      contentType = 'html',\r\n      headers = {},\r\n      extend,\r\n      customExtractor,\r\n    } = opts;\r\n\r\n    // if no url was passed and this is the browser version,\r\n    // set url to window.location.href and load the html\r\n    // from the current page\r\n    if (!url && cheerio.browser) {\r\n      url = window.location.href; // eslint-disable-line no-undef\r\n      html = html || cheerio.html();\r\n    }\r\n\r\n    const parsedUrl = URL.parse(url);\r\n\r\n    if (!validateUrl(parsedUrl)) {\r\n      return {\r\n        error: true,\r\n        message:\r\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\r\n      };\r\n    }\r\n\r\n    const $ = await Resource.create(url, html, parsedUrl, headers);\r\n\r\n    // If we found an error creating the resource, return that error\r\n    if ($.failed) {\r\n      return $;\r\n    }\r\n\r\n    // Add custom extractor via cli.\r\n    if (customExtractor) {\r\n      addCustomExtractor(customExtractor);\r\n    }\r\n\r\n    const Extractor = getExtractor(url, parsedUrl, $);\r\n    // console.log(`Using extractor for ${Extractor.domain}`);\r\n\r\n    // if html still has not been set (i.e., url passed to Parser.parse),\r\n    // set html from the response of Resource.create\r\n    if (!html) {\r\n      html = $.html();\r\n    }\r\n\r\n    // Cached value of every meta name in our document.\r\n    // Used when extracting title/author/date_published/dek\r\n    const metaCache = $('meta')\r\n      .map((_, node) => $(node).attr('name'))\r\n      .toArray();\r\n\r\n    let extendedTypes = {};\r\n    if (extend) {\r\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\r\n    }\r\n\r\n    let result = RootExtractor.extract(Extractor, {\r\n      url,\r\n      html,\r\n      $,\r\n      metaCache,\r\n      parsedUrl,\r\n      fallback,\r\n      contentType,\r\n    });\r\n\r\n    const { title, next_page_url } = result;\r\n\r\n    // Fetch more pages if next_page_url found\r\n    if (fetchAllPages && next_page_url) {\r\n      result = await collectAllPages({\r\n        Extractor,\r\n        next_page_url,\r\n        html,\r\n        $,\r\n        metaCache,\r\n        result,\r\n        title,\r\n        url,\r\n      });\r\n    } else {\r\n      result = {\r\n        ...result,\r\n        total_pages: 1,\r\n        rendered_pages: 1,\r\n      };\r\n    }\r\n\r\n    if (contentType === 'markdown') {\r\n      const turndownService = new TurndownService();\r\n      result.content = turndownService.turndown(result.content);\r\n    } else if (contentType === 'text') {\r\n      result.content = $.text($(result.content));\r\n    }\r\n\r\n    return { ...result, ...extendedTypes };\r\n  },\r\n\r\n  browser: !!cheerio.browser,\r\n\r\n  // A convenience method for getting a resource\r\n  // to work with, e.g., for custom extractor generator\r\n  fetchResource(url) {\r\n    return Resource.create(url);\r\n  },\r\n\r\n  addExtractor(extractor) {\r\n    return addCustomExtractor(extractor);\r\n  },\r\n};\r\n\r\nexport default Parser;\r\n"],"names":["NORMALIZE_RE","normalizeSpaces","text","replace","trim","extractFromUrl","url","regexList","matchRe","find","re","test","exec","PAGE_IN_HREF_RE","RegExp","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","DEFAULT_ENCODING","pageNumFromUrl","matches","match","pageNum","_parseInt","removeAnchor","split","isGoodSegment","segment","index","firstSegmentHasLetters","goodSegment","length","toLowerCase","articleBaseUrl","parsed","parsedUrl","URL","parse","protocol","host","path","cleanedSegments","reverse","reduce","acc","rawSegment","includes","possibleSegment","fileExt","push","join","SENTENCE_END_RE","hasSentenceEnd","excerptContent","content","words","slice","getEncoding","str","encoding","iconv","encodingExists","REQUEST_HEADERS","cheerio","browser","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","get","options","resolve","reject","request","err","response","body","validateResponse","parseNon200","statusMessage","statusCode","Error","error","headers","contentType","contentLength","fetchResource","encodeURI","href","timeout","jar","gzip","followAllRedirects","window","followRedirect","message","convertMetaProp","$","from","to","each","_","node","$node","value","attr","removeAttr","normalizeMetaTags","SPACER_RE","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","IS_WP_SELECTOR","PAGE_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","stripUnlikelyCandidates","not","classes","id","classAndId","remove","brsToPs","collapsing","element","$element","nextElement","next","tagName","paragraphize","br","sibling","nextSibling","p","appendTo","replaceWith","convertDivs","div","$div","convertible","children","convertNodeTo","convertSpans","span","$span","parents","convertToParagraphs","tag","attrs","getAttrs","attribString","_Reflect$ownKeys","map","key","html","contents","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","article","tags","hostname","addClass","stripJunkTags","cleanHOnes","$hOnes","removeAllButWhitelist","setAttrs","removeClass","cleanAttributes","parent","removeEmpty","$p","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","READABILITY_ASSET","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","getWeight","score","getScore","_parseFloat","scoreCommas","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","setScore","addScore","amount","getOrInitScore","e","addToParent","weightNodes","scoreNode","addScoreTo","scorePs","$parent","rawScore","scoreContent","forEach","parentSelector","childSelector","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","findTopCandidate","removeUnlessContent","weight","hasClass","pCount","inputCount","imgCount","nodeIsList","previousNode","prev","scriptCount","cleanTags","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel","absolutize","rootUrl","baseUrl","absoluteUrl","setAttr","absolutizeSet","$content","urlSet","srcset","candidates","absoluteCandidates","candidate","parts","absoluteUrlSet","_toConsumableArray","makeLinksAbsolute","totalTextLength","linkText","linkLength","extractFromMeta","metaNames","cachedNames","foundNames","filter","name","indexOf","type","nodes","values","toArray","metaValue","stripTags","isGoodNode","maxChildren","withinComment","extractFromSelectors","selectors","textOnly","selector","cleanText","commentParent","nodeClass","class","undefined","nodeIsSufficient","isWordpress","attribs","attributes","val","setAttribute","removeAttribute","IS_LINK","IMAGE_RE","IS_IMAGE","IS_SRCSET","TAGS_TO_REMOVE","convertLazyLoadedImages","extractSrcFromJSON","JSON","src","existingSrc","isComment","cleanComments","root","clean","Resource","create","preparedResponse","validResponse","result","alreadyDecoded","failed","generateDoc","encodeDoc","load","decodedContent","decode","contentTypeSelector","metaContentType","properEncoding","range","start","end","validateUrl","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","apiExtractors","addExtractor","BloggerExtractor","transforms","noscript","author","date_published","NYMagExtractor","h1","$children","dek","WikipediaExtractor","defaultCleaner","prepend","TwitterExtractor","tweets","$tweetContainer","s","NYTimesExtractor","lead_image_url","next_page_url","excerpt","TheAtlanticExtractor","NewYorkerExtractor","timezone","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","h2","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","data","sources","MediumExtractor","$text","iframe","ytRe","thumb","decodeURIComponent","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","WwwAolComExtractor","WwwYoutubeComExtractor","videoId","description","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","format","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","imgHtml","NewsNationalgeographicComExtractor","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","WwwTodayComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","WwwProspectmagazineCoUkExtractor","ForwardComExtractor","WwwQdailyComExtractor","GothamistComExtractor","WwwFoolComExtractor","WwwSlateComExtractor","IciRadioCanadaCaExtractor","WwwFortinetComExtractor","WwwFastcompanyComExtractor","BlisterreviewComExtractor","figcaption","NewsMynaviJpExtractor","ClinicaltrialsGovExtractor","GithubComExtractor","WwwRedditComExtractor","bgImg","css","OtrsComExtractor","WwwOssnewsJpExtractor","BuzzapJpExtractor","WwwAsahiComExtractor","WwwSanwaCoJpExtractor","WwwElecomCoJpExtractor","table","ScanNetsecurityNeJpExtractor","JvndbJvnJpExtractor","GeniusComExtractor","res","json","song","release_date","album","cover_art_url","WwwJnsaOrgExtractor","PhpspotOrgExtractor","WwwInfoqComExtractor","WwwMoongiftJpExtractor","WwwItmediaCoJpExtractor","WwwPublickey1JpExtractor","TakagihiromitsuJpExtractor","BookwalkerJpExtractor","WwwYomiuriCoJpExtractor","JapanCnetComExtractor","DeadlineComExtractor","innerHtml","WwwGizmodoJpExtractor","GetnewsJpExtractor","WwwLifehackerJpExtractor","SectIijAdJpExtractor","WwwOreillyCoJpExtractor","WwwIpaGoJpExtractor","WeeklyAsciiJpExtractor","TechlogIijAdJpExtractor","WiredJpExtractor","dataOriginal","JapanZdnetComExtractor","WwwRbbtodayComExtractor","WwwLemondeFrExtractor","WwwPhoronixComExtractor","PitchforkComExtractor","extend","BiorxivOrgExtractor","EpaperZeitDeExtractor","byline","linkbox","WwwLadbibleComExtractor","TimesofindiaIndiatimesComExtractor","reporter","MaTtiasBeExtractor","after","ul","PastebinComExtractor","ol","li","WwwAbendblattDeExtractor","o","n","i","r","charCodeAt","String","fromCharCode","WwwGrueneDeExtractor","WwwEngadgetComExtractor","ArstechnicaComExtractor","before","WwwNdtvComExtractor","SpektrumExtractor","PostlightComExtractor","WwwInvestmentexecutiveComExtractor","WwwCbcCaExtractor","_Object$keys","CustomExtractors","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","TIME_NOW_STRING","timeUnits","allTimeUnits","TIME_AGO_STRING","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","leadImageUrl","validUrl","isWebUri","cleanDek","dekText","cleanDateString","dateString","createDate","moment","Date","fragments","subtract","tz","parseFormat","cleanDatePublished","toISOString","date","isValid","extractCleanNode","cleanConditionally","cleanTitle","resolveSplitTitle","extractBreadcrumbTitle","splitTitle","termCounts","titleText","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","wuzzy","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","cleanImage","cleanContent","extractBestNode","opts","$topCandidate","GenericContentExtractor","defaultOpts","extract","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","difflib","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","NEXT_LINK_TEXT_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","scoreExtraneousLinks","makeSig","$link","positiveMatch","negativeMatch","parentData","scorePrevLink","linkData","shouldScore","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","scoreLinks","links","scoredPages","possiblePages","link","possiblePage","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","maxLength","ellipsize","ellipse","GenericExcerptExtractor","shortContent","getWordCount","getWordCountAlt","GenericWordCountExtractor","count","GenericExtractor","bind","url_and_domain","word_count","direction","stringDirection","getDirection","loaded","Detectors","detectByHtml","getExtractor","baseDomain","Extractors","cleanBySelectors","transformElements","$matches","findMatchingSelector","extractHtml","allowMultiple","_Array$isArray","select","extractionOpts","overrideAllowMultiple","matchingSelector","transformAndClean","selectHtml","$wrapper","wrap","el","$match","transform","item","selectExtendedTypes","results","t","extractResult","fallback","RootExtractor","contentOnly","extractedTitle","extendedResults","collectAllPages","Extractor","pages","extractorOpts","nextPageResult","total_pages","rendered_pages","Parser","fetchAllPages","customExtractor","location","addCustomExtractor","extendedTypes","turndownService","TurndownService","turndown"],"mappings":"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"}