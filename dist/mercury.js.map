{"version":3,"file":"mercury.js","sources":["../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/page-num-from-url.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/resource/utils/constants.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/utils/dom/constants.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/utils/dom/clean-tags.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/clean.js","../src/resource/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/utils/merge-supported-domains.js","../src/extractors/add-extractor.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/custom/www.ladbible.com/index.js","../src/extractors/custom/timesofindia.indiatimes.com/index.js","../src/extractors/custom/ma.ttias.be/index.js","../src/extractors/custom/pastebin.com/index.js","../src/extractors/custom/www.abendblatt.de/index.js","../src/extractors/custom/www.gruene.de/index.js","../src/extractors/custom/www.engadget.com/index.js","../src/extractors/custom/arstechnica.com/index.js","../src/extractors/custom/www.ndtv.com/index.js","../src/extractors/custom/www.spektrum.de/index.js","../src/extractors/custom/postlight.com/index.js","../src/extractors/custom/www.investmentexecutive.com/index.js","../src/extractors/custom/www.cbc.ca/index.js","../src/extractors/all.js","../src/cleaners/constants.js","../src/cleaners/author.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/cleaners/index.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/content/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/generic/index.js","../src/extractors/detect-by-html.js","../src/extractors/get-extractor.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/mercury.js"],"sourcesContent":["const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\r\n\r\nexport default function normalizeSpaces(text) {\r\n  return text.replace(NORMALIZE_RE, ' ').trim();\r\n}\r\n","// Given a node type to search for, and a list of regular expressions,\r\n// look to see if this extraction can be found in the URL. Expects\r\n// that each expression in r_list will return group(1) as the proper\r\n// string to be cleaned.\r\n// Only used for date_published currently.\r\nexport default function extractFromUrl(url, regexList) {\r\n  const matchRe = regexList.find(re => re.test(url));\r\n  if (matchRe) {\r\n    return matchRe.exec(url)[1];\r\n  }\r\n\r\n  return null;\r\n}\r\n","// An expression that looks to try to find the page digit within a URL, if\r\n// it exists.\r\n// Matches:\r\n//  page=1\r\n//  pg=1\r\n//  p=1\r\n//  paging=12\r\n//  pag=7\r\n//  pagination/1\r\n//  paging/88\r\n//  pa/83\r\n//  p/11\r\n//\r\n// Does not match:\r\n//  pg=102\r\n//  page:2\r\nexport const PAGE_IN_HREF_RE = new RegExp(\r\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\r\n  'i'\r\n);\r\n\r\nexport const HAS_ALPHA_RE = /[a-z]/i;\r\n\r\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\r\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\r\n\r\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\r\nexport const DEFAULT_ENCODING = 'utf-8';\r\n","import { PAGE_IN_HREF_RE } from './constants';\r\n\r\nexport default function pageNumFromUrl(url) {\r\n  const matches = url.match(PAGE_IN_HREF_RE);\r\n  if (!matches) return null;\r\n\r\n  const pageNum = parseInt(matches[6], 10);\r\n\r\n  // Return pageNum < 100, otherwise\r\n  // return null\r\n  return pageNum < 100 ? pageNum : null;\r\n}\r\n","export default function removeAnchor(url) {\r\n  return url.split('#')[0].replace(/\\/$/, '');\r\n}\r\n","import URL from 'url';\r\n\r\nimport {\r\n  HAS_ALPHA_RE,\r\n  IS_ALPHA_RE,\r\n  IS_DIGIT_RE,\r\n  PAGE_IN_HREF_RE,\r\n} from './constants';\r\n\r\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\r\n  let goodSegment = true;\r\n\r\n  // If this is purely a number, and it's the first or second\r\n  // url_segment, it's probably a page number. Remove it.\r\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\r\n    goodSegment = true;\r\n  }\r\n\r\n  // If this is the first url_segment and it's just \"index\",\r\n  // remove it\r\n  if (index === 0 && segment.toLowerCase() === 'index') {\r\n    goodSegment = false;\r\n  }\r\n\r\n  // If our first or second url_segment is smaller than 3 characters,\r\n  // and the first url_segment had no alphas, remove it.\r\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\r\n    goodSegment = false;\r\n  }\r\n\r\n  return goodSegment;\r\n}\r\n\r\n// Take a URL, and return the article base of said URL. That is, no\r\n// pagination data exists in it. Useful for comparing to other links\r\n// that might have pagination data within them.\r\nexport default function articleBaseUrl(url, parsed) {\r\n  const parsedUrl = parsed || URL.parse(url);\r\n  const { protocol, host, path } = parsedUrl;\r\n\r\n  let firstSegmentHasLetters = false;\r\n  const cleanedSegments = path\r\n    .split('/')\r\n    .reverse()\r\n    .reduce((acc, rawSegment, index) => {\r\n      let segment = rawSegment;\r\n\r\n      // Split off and save anything that looks like a file type.\r\n      if (segment.includes('.')) {\r\n        const [possibleSegment, fileExt] = segment.split('.');\r\n        if (IS_ALPHA_RE.test(fileExt)) {\r\n          segment = possibleSegment;\r\n        }\r\n      }\r\n\r\n      // If our first or second segment has anything looking like a page\r\n      // number, remove it.\r\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\r\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\r\n      }\r\n\r\n      // If we're on the first segment, check to see if we have any\r\n      // characters in it. The first segment is actually the last bit of\r\n      // the URL, and this will be helpful to determine if we're on a URL\r\n      // segment that looks like \"/2/\" for example.\r\n      if (index === 0) {\r\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\r\n      }\r\n\r\n      // If it's not marked for deletion, push it to cleaned_segments.\r\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\r\n        acc.push(segment);\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\r\n}\r\n","// Given a string, return True if it appears to have an ending sentence\r\n// within it, false otherwise.\r\nconst SENTENCE_END_RE = new RegExp('.( |$)');\r\nexport default function hasSentenceEnd(text) {\r\n  return SENTENCE_END_RE.test(text);\r\n}\r\n","export default function excerptContent(content, words = 10) {\r\n  return content\r\n    .trim()\r\n    .split(/\\s+/)\r\n    .slice(0, words)\r\n    .join(' ');\r\n}\r\n","import iconv from 'iconv-lite';\r\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\r\n\r\n// check a string for encoding; this is\r\n// used in our fetchResource function to\r\n// ensure correctly encoded responses\r\nexport default function getEncoding(str) {\r\n  let encoding = DEFAULT_ENCODING;\r\n  const matches = ENCODING_RE.exec(str);\r\n  if (matches !== null) {\r\n    [, str] = matches;\r\n  }\r\n  if (iconv.encodingExists(str)) {\r\n    encoding = str;\r\n  }\r\n  return encoding;\r\n}\r\n","import cheerio from 'cheerio';\r\n\r\n// Browser does not like us setting user agent\r\nexport const REQUEST_HEADERS = cheerio.browser\r\n  ? {}\r\n  : {\r\n      'User-Agent':\r\n        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\r\n    };\r\n\r\n// The number of milliseconds to attempt to fetch a resource before timing out.\r\nexport const FETCH_TIMEOUT = 10000;\r\n\r\n// Content types that we do not extract content from\r\nconst BAD_CONTENT_TYPES = [\r\n  'audio/mpeg',\r\n  'image/gif',\r\n  'image/jpeg',\r\n  'image/jpg',\r\n];\r\n\r\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\r\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// Use this setting as the maximum size an article can be\r\n// for us to attempt parsing. Defaults to 5 MB.\r\nexport const MAX_CONTENT_LENGTH = 5242880;\r\n\r\n// Turn the global proxy on or off\r\n// Proxying is not currently enabled in Python source\r\n// so not implementing logic in port.\r\nexport const PROXY_DOMAINS = false;\r\nexport const REQUESTS_PROXIES = {\r\n  http: 'http://38.98.105.139:33333',\r\n  https: 'http://38.98.105.139:33333',\r\n};\r\n\r\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\r\n","import URL from 'url';\r\nimport request from 'postman-request';\r\n\r\nimport {\r\n  REQUEST_HEADERS,\r\n  FETCH_TIMEOUT,\r\n  BAD_CONTENT_TYPES_RE,\r\n  MAX_CONTENT_LENGTH,\r\n} from './constants';\r\n\r\nfunction get(options) {\r\n  return new Promise((resolve, reject) => {\r\n    request(options, (err, response, body) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve({ body, response });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// Evaluate a response to ensure it's something we should be keeping.\r\n// This does not validate in the sense of a response being 200 or not.\r\n// Validation here means that we haven't found reason to bail from\r\n// further processing of this url.\r\n\r\nexport function validateResponse(response, parseNon200 = false) {\r\n  // Check if we got a valid status code\r\n  // This isn't great, but I'm requiring a statusMessage to be set\r\n  // before short circuiting b/c nock doesn't set it in tests\r\n  // statusMessage only not set in nock response, in which case\r\n  // I check statusCode, which is currently only 200 for OK responses\r\n  // in tests\r\n  if (\r\n    (response.statusMessage && response.statusMessage !== 'OK') ||\r\n    response.statusCode !== 200\r\n  ) {\r\n    if (!response.statusCode) {\r\n      throw new Error(\r\n        `Unable to fetch content. Original exception was ${response.error}`\r\n      );\r\n    } else if (!parseNon200) {\r\n      throw new Error(\r\n        `Resource returned a response status code of ${\r\n          response.statusCode\r\n        } and resource was instructed to reject non-200 status codes.`\r\n      );\r\n    }\r\n  }\r\n\r\n  const {\r\n    'content-type': contentType,\r\n    'content-length': contentLength,\r\n  } = response.headers;\r\n\r\n  // Check that the content is not in BAD_CONTENT_TYPES\r\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\r\n    throw new Error(\r\n      `Content-type for this resource was ${contentType} and is not allowed.`\r\n    );\r\n  }\r\n\r\n  // Check that the content length is below maximum\r\n  if (contentLength > MAX_CONTENT_LENGTH) {\r\n    throw new Error(\r\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\r\n    );\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Grabs the last two pieces of the URL and joins them back together\r\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\r\nexport function baseDomain({ host }) {\r\n  return host\r\n    .split('.')\r\n    .slice(-2)\r\n    .join('.');\r\n}\r\n\r\n// Set our response attribute to the result of fetching our URL.\r\n// TODO: This should gracefully handle timeouts and raise the\r\n//       proper exceptions on the many failure cases of HTTP.\r\n// TODO: Ensure we are not fetching something enormous. Always return\r\n//       unicode content for HTML, with charset conversion.\r\n\r\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\r\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\r\n  const options = {\r\n    url: parsedUrl.href,\r\n    headers: { ...REQUEST_HEADERS, ...headers },\r\n    timeout: FETCH_TIMEOUT,\r\n    // Accept cookies\r\n    jar: true,\r\n    // Set to null so the response returns as binary and body as buffer\r\n    // https://github.com/request/request#requestoptions-callback\r\n    encoding: null,\r\n    // Accept and decode gzip\r\n    gzip: true,\r\n    // Follow any non-GET redirects\r\n    followAllRedirects: true,\r\n    ...(typeof window !== 'undefined'\r\n      ? {}\r\n      : {\r\n          // Follow GET redirects; this option is for Node only\r\n          followRedirect: true,\r\n        }),\r\n  };\r\n\r\n  const { response, body } = await get(options);\r\n\r\n  try {\r\n    validateResponse(response);\r\n    return {\r\n      body,\r\n      response,\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      error: true,\r\n      message: e.message,\r\n    };\r\n  }\r\n}\r\n","function convertMetaProp($, from, to) {\r\n  $(`meta[${from}]`).each((_, node) => {\r\n    const $node = $(node);\r\n\r\n    const value = $node.attr(from);\r\n    $node.attr(to, value);\r\n    $node.removeAttr(from);\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\n// For ease of use in extracting from meta tags,\r\n// replace the \"content\" attribute on meta tags with the\r\n// \"value\" attribute.\r\n//\r\n// In addition, normalize 'property' attributes to 'name' for ease of\r\n// querying later. See, e.g., og or twitter meta tags.\r\n\r\nexport default function normalizeMetaTags($) {\r\n  $ = convertMetaProp($, 'content', 'value');\r\n  $ = convertMetaProp($, 'property', 'name');\r\n  return $;\r\n}\r\n","// Spacer images to be removed\r\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\r\n\r\n// The class we will use to mark elements we want to keep\r\n// but would normally remove\r\nexport const KEEP_CLASS = 'mercury-parser-keep';\r\n\r\nexport const KEEP_SELECTORS = [\r\n  'iframe[src^=\"https://www.youtube.com\"]',\r\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\r\n  'iframe[src^=\"http://www.youtube.com\"]',\r\n  'iframe[src^=\"https://player.vimeo\"]',\r\n  'iframe[src^=\"http://player.vimeo\"]',\r\n  'iframe[src^=\"https://www.redditmedia.com\"]',\r\n];\r\n\r\n// A list of tags to strip from the output if we encounter them.\r\nexport const STRIP_OUTPUT_TAGS = [\r\n  'title',\r\n  'script',\r\n  'noscript',\r\n  'link',\r\n  'style',\r\n  'hr',\r\n  'embed',\r\n  'iframe',\r\n  'object',\r\n];\r\n\r\n// cleanAttributes\r\nexport const REMOVE_ATTRS = ['style', 'align'];\r\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\r\n  selector => `[${selector}]`\r\n);\r\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\r\nexport const WHITELIST_ATTRS = [\r\n  'src',\r\n  'srcset',\r\n  'sizes',\r\n  'type',\r\n  'href',\r\n  'class',\r\n  'id',\r\n  'alt',\r\n  'xlink:href',\r\n  'width',\r\n  'height',\r\n];\r\n\r\nexport const WHITELIST_ATTRS_RE = new RegExp(\r\n  `^(${WHITELIST_ATTRS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// removeEmpty\r\nexport const REMOVE_EMPTY_TAGS = ['p'];\r\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\r\n  tag => `${tag}:empty`\r\n).join(',');\r\n\r\n// cleanTags\r\nexport const CLEAN_CONDITIONALLY_TAGS = [\r\n  'ul',\r\n  'ol',\r\n  'table',\r\n  'div',\r\n  'button',\r\n  'form',\r\n].join(',');\r\n\r\n// cleanHeaders\r\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\r\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\r\n\r\n// // CONTENT FETCHING CONSTANTS ////\r\n\r\n// A list of strings that can be considered unlikely candidates when\r\n// extracting content from a resource. These strings are joined together\r\n// and then tested for existence using re:test, so may contain simple,\r\n// non-pipe style regular expression queries if necessary.\r\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\r\n  'ad-break',\r\n  'adbox',\r\n  'advert',\r\n  'addthis',\r\n  'agegate',\r\n  'aux',\r\n  'blogger-labels',\r\n  'combx',\r\n  'comment',\r\n  'conversation',\r\n  'disqus',\r\n  'entry-unrelated',\r\n  'extra',\r\n  'foot',\r\n  // 'form', // This is too generic, has too many false positives\r\n  'header',\r\n  'hidden',\r\n  'loader',\r\n  'login', // Note: This can hit 'blogindex'.\r\n  'menu',\r\n  'meta',\r\n  'nav',\r\n  'outbrain',\r\n  'pager',\r\n  'pagination',\r\n  'predicta', // readwriteweb inline ad box\r\n  'presence_control_external', // lifehacker.com container full of false positives\r\n  'popup',\r\n  'printfriendly',\r\n  'related',\r\n  'remove',\r\n  'remark',\r\n  'rss',\r\n  'share',\r\n  'shoutbox',\r\n  'sidebar',\r\n  'sociable',\r\n  'sponsor',\r\n  'taboola',\r\n  'tools',\r\n];\r\n\r\n// A list of strings that can be considered LIKELY candidates when\r\n// extracting content from a resource. Essentially, the inverse of the\r\n// blacklist above - if something matches both blacklist and whitelist,\r\n// it is kept. This is useful, for example, if something has a className\r\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\r\n// be removed, however, it's also the entry content, so it should be left\r\n// alone.\r\n//\r\n// These strings are joined together and then tested for existence using\r\n// re:test, so may contain simple, non-pipe style regular expression queries\r\n// if necessary.\r\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\r\n  'and',\r\n  'article',\r\n  'body',\r\n  'blogindex',\r\n  'column',\r\n  'content',\r\n  'entry-content-asset',\r\n  'format', // misuse of form\r\n  'hfeed',\r\n  'hentry',\r\n  'hatom',\r\n  'main',\r\n  'page',\r\n  'posts',\r\n  'shadow',\r\n];\r\n\r\n// A list of tags which, if found inside, should cause a <div /> to NOT\r\n// be turned into a paragraph tag. Shallow div tags without these elements\r\n// should be turned into <p /> tags.\r\nexport const DIV_TO_P_BLOCK_TAGS = [\r\n  'a',\r\n  'blockquote',\r\n  'dl',\r\n  'div',\r\n  'img',\r\n  'p',\r\n  'pre',\r\n  'table',\r\n].join(',');\r\n\r\n// A list of tags that should be ignored when trying to find the top candidate\r\n// for a document.\r\nexport const NON_TOP_CANDIDATE_TAGS = [\r\n  'br',\r\n  'b',\r\n  'i',\r\n  'label',\r\n  'hr',\r\n  'area',\r\n  'base',\r\n  'basefont',\r\n  'input',\r\n  'img',\r\n  'link',\r\n  'meta',\r\n];\r\n\r\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\r\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// A list of selectors that specify, very clearly, either hNews or other\r\n// very content-specific style content, like Blogger templates.\r\n// More examples here: http://microformats.org/wiki/blog-post-formats\r\nexport const HNEWS_CONTENT_SELECTORS = [\r\n  ['.hentry', '.entry-content'],\r\n  ['entry', '.entry-content'],\r\n  ['.entry', '.entry_content'],\r\n  ['.post', '.postbody'],\r\n  ['.post', '.post_body'],\r\n  ['.post', '.post-body'],\r\n];\r\n\r\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\r\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\r\n\r\n// A list of strings that denote a positive scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const POSITIVE_SCORE_HINTS = [\r\n  'article',\r\n  'articlecontent',\r\n  'instapaper_body',\r\n  'blog',\r\n  'body',\r\n  'content',\r\n  'entry-content-asset',\r\n  'entry',\r\n  'hentry',\r\n  'main',\r\n  'Normal',\r\n  'page',\r\n  'pagination',\r\n  'permalink',\r\n  'post',\r\n  'story',\r\n  'text',\r\n  '[-_]copy', // usatoday\r\n  '\\\\Bcopy',\r\n];\r\n\r\n// The above list, joined into a matching regular expression\r\nexport const POSITIVE_SCORE_RE = new RegExp(\r\n  POSITIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Readability publisher-specific guidelines\r\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\r\n\r\n// A list of strings that denote a negative scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const NEGATIVE_SCORE_HINTS = [\r\n  'adbox',\r\n  'advert',\r\n  'author',\r\n  'bio',\r\n  'bookmark',\r\n  'bottom',\r\n  'byline',\r\n  'clear',\r\n  'com-',\r\n  'combx',\r\n  'comment',\r\n  'comment\\\\B',\r\n  'contact',\r\n  'copy',\r\n  'credit',\r\n  'crumb',\r\n  'date',\r\n  'deck',\r\n  'excerpt',\r\n  'featured', // tnr.com has a featured_content which throws us off\r\n  'foot',\r\n  'footer',\r\n  'footnote',\r\n  'graf',\r\n  'head',\r\n  'info',\r\n  'infotext', // newscientist.com copyright\r\n  'instapaper_ignore',\r\n  'jump',\r\n  'linebreak',\r\n  'link',\r\n  'masthead',\r\n  'media',\r\n  'meta',\r\n  'modal',\r\n  'outbrain', // slate.com junk\r\n  'promo',\r\n  'pr_', // autoblog - press release\r\n  'related',\r\n  'respond',\r\n  'roundcontent', // lifehacker restricted content warning\r\n  'scroll',\r\n  'secondary',\r\n  'share',\r\n  'shopping',\r\n  'shoutbox',\r\n  'side',\r\n  'sidebar',\r\n  'sponsor',\r\n  'stamp',\r\n  'sub',\r\n  'summary',\r\n  'tags',\r\n  'tools',\r\n  'widget',\r\n];\r\n// The above list, joined into a matching regular expression\r\nexport const NEGATIVE_SCORE_RE = new RegExp(\r\n  NEGATIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// XPath to try to determine if a page is wordpress. Not always successful.\r\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\r\n\r\n// Match a digit. Pretty clear.\r\nexport const DIGIT_RE = new RegExp('[0-9]');\r\n\r\n// A list of words that, if found in link text or URLs, likely mean that\r\n// this link is not a next page link.\r\nexport const EXTRANEOUS_LINK_HINTS = [\r\n  'print',\r\n  'archive',\r\n  'comment',\r\n  'discuss',\r\n  'e-mail',\r\n  'email',\r\n  'share',\r\n  'reply',\r\n  'all',\r\n  'login',\r\n  'sign',\r\n  'single',\r\n  'adx',\r\n  'entry-unrelated',\r\n];\r\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\r\n  EXTRANEOUS_LINK_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match any phrase that looks like it could be page, or paging, or pagination\r\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it could mean the next\r\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\r\n// mean last page.\r\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\r\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\r\n\r\n// Match any link text/classname/id that looks like it is an end link: things\r\n// like \"first\", \"last\", \"end\", etc.\r\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it means the previous\r\n// page.\r\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\r\n\r\n// Match 2 or more consecutive <br> tags\r\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\r\n\r\n// Match 1 BR tag.\r\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\r\n\r\n// A list of all of the block level tags known in HTML5 and below. Taken from\r\n// http://bit.ly/qneNIT\r\nexport const BLOCK_LEVEL_TAGS = [\r\n  'article',\r\n  'aside',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'li',\r\n  'map',\r\n  'object',\r\n  'ol',\r\n  'output',\r\n  'p',\r\n  'pre',\r\n  'progress',\r\n  'section',\r\n  'table',\r\n  'tbody',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'tr',\r\n  'ul',\r\n  'video',\r\n];\r\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\r\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// The removal is implemented as a blacklist and whitelist, this test finds\r\n// blacklisted elements that aren't whitelisted. We do this all in one\r\n// expression-both because it's only one pass, and because this skips the\r\n// serialization for whitelisted nodes.\r\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\r\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\r\n\r\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\r\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\r\n\r\nexport const UNLIKELY_RE = new RegExp(\r\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\r\n  'i'\r\n);\r\n\r\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\r\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\r\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\r\n\r\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\r\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\r\n\r\nexport default function stripUnlikelyCandidates($) {\r\n  //  Loop through the provided document and remove any non-link nodes\r\n  //  that are unlikely candidates for article content.\r\n  //\r\n  //  Links are ignored because there are very often links to content\r\n  //  that are identified as non-body-content, but may be inside\r\n  //  article-like content.\r\n  //\r\n  //  :param $: a cheerio object to strip nodes from\r\n  //  :return $: the cleaned cheerio object\r\n  $('*')\r\n    .not('a')\r\n    .each((index, node) => {\r\n      const $node = $(node);\r\n      const classes = $node.attr('class');\r\n      const id = $node.attr('id');\r\n      if (!id && !classes) return;\r\n\r\n      const classAndId = `${classes || ''} ${id || ''}`;\r\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\r\n        return;\r\n      }\r\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\r\n        $node.remove();\r\n      }\r\n    });\r\n\r\n  return $;\r\n}\r\n","import { paragraphize } from './index';\r\n\r\n// ## NOTES:\r\n// Another good candidate for refactoring/optimizing.\r\n// Very imperative code, I don't love it. - AP\r\n\r\n//  Given cheerio object, convert consecutive <br /> tags into\r\n//  <p /> tags instead.\r\n//\r\n//  :param $: A cheerio object\r\n\r\nexport default function brsToPs($) {\r\n  let collapsing = false;\r\n  $('br').each((index, element) => {\r\n    const $element = $(element);\r\n    const nextElement = $element.next().get(0);\r\n\r\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\r\n      collapsing = true;\r\n      $element.remove();\r\n    } else if (collapsing) {\r\n      collapsing = false;\r\n      paragraphize(element, $, true);\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\r\n\r\n// Given a node, turn it into a P if it is not already a P, and\r\n// make sure it conforms to the constraints of a P tag (I.E. does\r\n// not contain any other block tags.)\r\n//\r\n// If the node is a <br />, it treats the following inline siblings\r\n// as if they were its children.\r\n//\r\n// :param node: The node to paragraphize; this is a raw node\r\n// :param $: The cheerio object to handle dom manipulation\r\n// :param br: Whether or not the passed node is a br\r\n\r\nexport default function paragraphize(node, $, br = false) {\r\n  const $node = $(node);\r\n\r\n  if (br) {\r\n    let sibling = node.nextSibling;\r\n    const p = $('<p></p>');\r\n\r\n    // while the next node is text or not a block level element\r\n    // append it to a new p node\r\n    while (\r\n      sibling &&\r\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\r\n    ) {\r\n      const { nextSibling } = sibling;\r\n      $(sibling).appendTo(p);\r\n      sibling = nextSibling;\r\n    }\r\n\r\n    $node.replaceWith(p);\r\n    $node.remove();\r\n    return $;\r\n  }\r\n\r\n  return $;\r\n}\r\n","import { brsToPs, convertNodeTo } from 'utils/dom';\r\n\r\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\r\n\r\nfunction convertDivs($) {\r\n  $('div').each((index, div) => {\r\n    const $div = $(div);\r\n    const convertible = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\r\n\r\n    if (convertible) {\r\n      convertNodeTo($div, $, 'p');\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\nfunction convertSpans($) {\r\n  $('span').each((index, span) => {\r\n    const $span = $(span);\r\n    const convertible = $span.parents('p, div, li, figcaption').length === 0;\r\n    if (convertible) {\r\n      convertNodeTo($span, $, 'p');\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n\r\n// Loop through the provided doc, and convert any p-like elements to\r\n// actual paragraph tags.\r\n//\r\n//   Things fitting this criteria:\r\n//   * Multiple consecutive <br /> tags.\r\n//   * <div /> tags without block level elements inside of them\r\n//   * <span /> tags who are not children of <p /> or <div /> tags.\r\n//\r\n//   :param $: A cheerio object to search\r\n//   :return cheerio object with new p elements\r\n//   (By-reference mutation, though. Returned just for convenience.)\r\n\r\nexport default function convertToParagraphs($) {\r\n  $ = brsToPs($);\r\n  $ = convertDivs($);\r\n  $ = convertSpans($);\r\n\r\n  return $;\r\n}\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nexport default function convertNodeTo($node, $, tag = 'p') {\r\n  const node = $node.get(0);\r\n  if (!node) {\r\n    return $;\r\n  }\r\n  const attrs = getAttrs(node) || {};\r\n\r\n  const attribString = Reflect.ownKeys(attrs)\r\n    .map(key => `${key}=${attrs[key]}`)\r\n    .join(' ');\r\n  let html;\r\n\r\n  if ($.browser) {\r\n    // In the browser, the contents of noscript tags aren't rendered, therefore\r\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\r\n    // as expected. This test case handles that\r\n    html =\r\n      node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\r\n  } else {\r\n    html = $node.contents();\r\n  }\r\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\r\n  return $;\r\n}\r\n","import { SPACER_RE } from './constants';\r\n\r\nfunction cleanForHeight($img, $) {\r\n  const height = parseInt($img.attr('height'), 10);\r\n  const width = parseInt($img.attr('width'), 10) || 20;\r\n\r\n  // Remove images that explicitly have very small heights or\r\n  // widths, because they are most likely shims or icons,\r\n  // which aren't very useful for reading.\r\n  if ((height || 20) < 10 || width < 10) {\r\n    $img.remove();\r\n  } else if (height) {\r\n    // Don't ever specify a height on images, so that we can\r\n    // scale with respect to width without screwing up the\r\n    // aspect ratio.\r\n    $img.removeAttr('height');\r\n  }\r\n\r\n  return $;\r\n}\r\n\r\n// Cleans out images where the source string matches transparent/spacer/etc\r\n// TODO This seems very aggressive - AP\r\nfunction removeSpacers($img, $) {\r\n  if (SPACER_RE.test($img.attr('src'))) {\r\n    $img.remove();\r\n  }\r\n\r\n  return $;\r\n}\r\n\r\nexport default function cleanImages($article, $) {\r\n  $article.find('img').each((index, img) => {\r\n    const $img = $(img);\r\n\r\n    cleanForHeight($img, $);\r\n    removeSpacers($img, $);\r\n  });\r\n\r\n  return $;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\r\n\r\nexport default function markToKeep(article, $, url, tags = []) {\r\n  if (tags.length === 0) {\r\n    tags = KEEP_SELECTORS;\r\n  }\r\n\r\n  if (url) {\r\n    const { protocol, hostname } = URL.parse(url);\r\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\r\n  }\r\n\r\n  $(tags.join(','), article).addClass(KEEP_CLASS);\r\n\r\n  return $;\r\n}\r\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\r\n\r\nexport default function stripJunkTags(article, $, tags = []) {\r\n  if (tags.length === 0) {\r\n    tags = STRIP_OUTPUT_TAGS;\r\n  }\r\n\r\n  // Remove matching elements, but ignore\r\n  // any element with a class of mercury-parser-keep\r\n  $(tags.join(','), article)\r\n    .not(`.${KEEP_CLASS}`)\r\n    .remove();\r\n\r\n  return $;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\n// H1 tags are typically the article title, which should be extracted\r\n// by the title extractor instead. If there's less than 3 of them (<3),\r\n// strip them. Otherwise, turn 'em into H2s.\r\nexport default function cleanHOnes(article, $) {\r\n  const $hOnes = $('h1', article);\r\n\r\n  if ($hOnes.length < 3) {\r\n    $hOnes.each((index, node) => $(node).remove());\r\n  } else {\r\n    $hOnes.each((index, node) => {\r\n      convertNodeTo($(node), $, 'h2');\r\n    });\r\n  }\r\n\r\n  return $;\r\n}\r\n","import { getAttrs, setAttrs } from 'utils/dom';\r\n\r\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\r\n\r\nfunction removeAllButWhitelist($article, $) {\r\n  $article.find('*').each((index, node) => {\r\n    const attrs = getAttrs(node);\r\n\r\n    setAttrs(\r\n      node,\r\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\r\n        if (WHITELIST_ATTRS_RE.test(attr)) {\r\n          return { ...acc, [attr]: attrs[attr] };\r\n        }\r\n\r\n        return acc;\r\n      }, {})\r\n    );\r\n  });\r\n\r\n  // Remove the mercury-parser-keep class from result\r\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\r\n\r\n  return $article;\r\n}\r\n\r\n// Remove attributes like style or align\r\nexport default function cleanAttributes($article, $) {\r\n  // Grabbing the parent because at this point\r\n  // $article will be wrapped in a div which will\r\n  // have a score set on it.\r\n  return removeAllButWhitelist(\r\n    $article.parent().length ? $article.parent() : $article,\r\n    $\r\n  );\r\n}\r\n","export default function removeEmpty($article, $) {\r\n  $article.find('p').each((index, p) => {\r\n    const $p = $(p);\r\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\r\n      $p.remove();\r\n  });\r\n\r\n  return $;\r\n}\r\n","// // CONTENT FETCHING CONSTANTS ////\r\n\r\n// A list of strings that can be considered unlikely candidates when\r\n// extracting content from a resource. These strings are joined together\r\n// and then tested for existence using re:test, so may contain simple,\r\n// non-pipe style regular expression queries if necessary.\r\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\r\n  'ad-break',\r\n  'adbox',\r\n  'advert',\r\n  'addthis',\r\n  'agegate',\r\n  'aux',\r\n  'blogger-labels',\r\n  'combx',\r\n  'comment',\r\n  'conversation',\r\n  'disqus',\r\n  'entry-unrelated',\r\n  'extra',\r\n  'foot',\r\n  'form',\r\n  'header',\r\n  'hidden',\r\n  'loader',\r\n  'login', // Note: This can hit 'blogindex'.\r\n  'menu',\r\n  'meta',\r\n  'nav',\r\n  'pager',\r\n  'pagination',\r\n  'predicta', // readwriteweb inline ad box\r\n  'presence_control_external', // lifehacker.com container full of false positives\r\n  'popup',\r\n  'printfriendly',\r\n  'related',\r\n  'remove',\r\n  'remark',\r\n  'rss',\r\n  'share',\r\n  'shoutbox',\r\n  'sidebar',\r\n  'sociable',\r\n  'sponsor',\r\n  'tools',\r\n];\r\n\r\n// A list of strings that can be considered LIKELY candidates when\r\n// extracting content from a resource. Essentially, the inverse of the\r\n// blacklist above - if something matches both blacklist and whitelist,\r\n// it is kept. This is useful, for example, if something has a className\r\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\r\n// be removed, however, it's also the entry content, so it should be left\r\n// alone.\r\n//\r\n// These strings are joined together and then tested for existence using\r\n// re:test, so may contain simple, non-pipe style regular expression queries\r\n// if necessary.\r\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\r\n  'and',\r\n  'article',\r\n  'body',\r\n  'blogindex',\r\n  'column',\r\n  'content',\r\n  'entry-content-asset',\r\n  'format', // misuse of form\r\n  'hfeed',\r\n  'hentry',\r\n  'hatom',\r\n  'main',\r\n  'page',\r\n  'posts',\r\n  'shadow',\r\n];\r\n\r\n// A list of tags which, if found inside, should cause a <div /> to NOT\r\n// be turned into a paragraph tag. Shallow div tags without these elements\r\n// should be turned into <p /> tags.\r\nexport const DIV_TO_P_BLOCK_TAGS = [\r\n  'a',\r\n  'blockquote',\r\n  'dl',\r\n  'div',\r\n  'img',\r\n  'p',\r\n  'pre',\r\n  'table',\r\n].join(',');\r\n\r\n// A list of tags that should be ignored when trying to find the top candidate\r\n// for a document.\r\nexport const NON_TOP_CANDIDATE_TAGS = [\r\n  'br',\r\n  'b',\r\n  'i',\r\n  'label',\r\n  'hr',\r\n  'area',\r\n  'base',\r\n  'basefont',\r\n  'input',\r\n  'img',\r\n  'link',\r\n  'meta',\r\n];\r\n\r\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\r\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// A list of selectors that specify, very clearly, either hNews or other\r\n// very content-specific style content, like Blogger templates.\r\n// More examples here: http://microformats.org/wiki/blog-post-formats\r\nexport const HNEWS_CONTENT_SELECTORS = [\r\n  ['.hentry', '.entry-content'],\r\n  ['entry', '.entry-content'],\r\n  ['.entry', '.entry_content'],\r\n  ['.post', '.postbody'],\r\n  ['.post', '.post_body'],\r\n  ['.post', '.post-body'],\r\n];\r\n\r\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\r\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\r\n\r\n// A list of strings that denote a positive scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const POSITIVE_SCORE_HINTS = [\r\n  'article',\r\n  'articlecontent',\r\n  'instapaper_body',\r\n  'blog',\r\n  'body',\r\n  'content',\r\n  'entry-content-asset',\r\n  'entry',\r\n  'hentry',\r\n  'main',\r\n  'Normal',\r\n  'page',\r\n  'pagination',\r\n  'permalink',\r\n  'post',\r\n  'story',\r\n  'text',\r\n  '[-_]copy', // usatoday\r\n  '\\\\Bcopy',\r\n];\r\n\r\n// The above list, joined into a matching regular expression\r\nexport const POSITIVE_SCORE_RE = new RegExp(\r\n  POSITIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Readability publisher-specific guidelines\r\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\r\n\r\n// A list of strings that denote a negative scoring for this content as being\r\n// an article container. Checked against className and id.\r\n//\r\n// TODO: Perhaps have these scale based on their odds of being quality?\r\nexport const NEGATIVE_SCORE_HINTS = [\r\n  'adbox',\r\n  'advert',\r\n  'author',\r\n  'bio',\r\n  'bookmark',\r\n  'bottom',\r\n  'byline',\r\n  'clear',\r\n  'com-',\r\n  'combx',\r\n  'comment',\r\n  'comment\\\\B',\r\n  'contact',\r\n  'copy',\r\n  'credit',\r\n  'crumb',\r\n  'date',\r\n  'deck',\r\n  'excerpt',\r\n  'featured', // tnr.com has a featured_content which throws us off\r\n  'foot',\r\n  'footer',\r\n  'footnote',\r\n  'graf',\r\n  'head',\r\n  'info',\r\n  'infotext', // newscientist.com copyright\r\n  'instapaper_ignore',\r\n  'jump',\r\n  'linebreak',\r\n  'link',\r\n  'masthead',\r\n  'media',\r\n  'meta',\r\n  'modal',\r\n  'outbrain', // slate.com junk\r\n  'promo',\r\n  'pr_', // autoblog - press release\r\n  'related',\r\n  'respond',\r\n  'roundcontent', // lifehacker restricted content warning\r\n  'scroll',\r\n  'secondary',\r\n  'share',\r\n  'shopping',\r\n  'shoutbox',\r\n  'side',\r\n  'sidebar',\r\n  'sponsor',\r\n  'stamp',\r\n  'sub',\r\n  'summary',\r\n  'tags',\r\n  'tools',\r\n  'widget',\r\n];\r\n// The above list, joined into a matching regular expression\r\nexport const NEGATIVE_SCORE_RE = new RegExp(\r\n  NEGATIVE_SCORE_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match a digit. Pretty clear.\r\nexport const DIGIT_RE = new RegExp('[0-9]');\r\n\r\n// Match 2 or more consecutive <br> tags\r\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\r\n\r\n// Match 1 BR tag.\r\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\r\n\r\n// A list of all of the block level tags known in HTML5 and below. Taken from\r\n// http://bit.ly/qneNIT\r\nexport const BLOCK_LEVEL_TAGS = [\r\n  'article',\r\n  'aside',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'li',\r\n  'map',\r\n  'object',\r\n  'ol',\r\n  'output',\r\n  'p',\r\n  'pre',\r\n  'progress',\r\n  'section',\r\n  'table',\r\n  'tbody',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'tr',\r\n  'ul',\r\n  'video',\r\n];\r\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\r\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\r\n  'i'\r\n);\r\n\r\n// The removal is implemented as a blacklist and whitelist, this test finds\r\n// blacklisted elements that aren't whitelisted. We do this all in one\r\n// expression-both because it's only one pass, and because this skips the\r\n// serialization for whitelisted nodes.\r\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\r\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\r\n\r\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\r\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\r\n\r\nexport const UNLIKELY_RE = new RegExp(\r\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\r\n  'i'\r\n);\r\n\r\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\r\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\r\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\r\n\r\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\r\n","import {\r\n  NEGATIVE_SCORE_RE,\r\n  POSITIVE_SCORE_RE,\r\n  PHOTO_HINTS_RE,\r\n  READABILITY_ASSET,\r\n} from './constants';\r\n\r\n// Get the score of a node based on its className and id.\r\nexport default function getWeight(node) {\r\n  const classes = node.attr('class');\r\n  const id = node.attr('id');\r\n  let score = 0;\r\n\r\n  if (id) {\r\n    // if id exists, try to score on both positive and negative\r\n    if (POSITIVE_SCORE_RE.test(id)) {\r\n      score += 25;\r\n    }\r\n    if (NEGATIVE_SCORE_RE.test(id)) {\r\n      score -= 25;\r\n    }\r\n  }\r\n\r\n  if (classes) {\r\n    if (score === 0) {\r\n      // if classes exist and id did not contribute to score\r\n      // try to score on both positive and negative\r\n      if (POSITIVE_SCORE_RE.test(classes)) {\r\n        score += 25;\r\n      }\r\n      if (NEGATIVE_SCORE_RE.test(classes)) {\r\n        score -= 25;\r\n      }\r\n    }\r\n\r\n    // even if score has been set by id, add score for\r\n    // possible photo matches\r\n    // \"try to keep photos if we can\"\r\n    if (PHOTO_HINTS_RE.test(classes)) {\r\n      score += 10;\r\n    }\r\n\r\n    // add 25 if class matches entry-content-asset,\r\n    // a class apparently instructed for use in the\r\n    // Readability publisher guidelines\r\n    // https://www.readability.com/developers/guidelines\r\n    if (READABILITY_ASSET.test(classes)) {\r\n      score += 25;\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n","// returns the score of a node based on\r\n// the node's score attribute\r\n// returns null if no score set\r\nexport default function getScore($node) {\r\n  return parseFloat($node.attr('score')) || null;\r\n}\r\n","// return 1 for every comma in text\r\nexport default function scoreCommas(text) {\r\n  return (text.match(/,/g) || []).length;\r\n}\r\n","const idkRe = new RegExp('^(p|pre)$', 'i');\r\n\r\nexport default function scoreLength(textLength, tagName = 'p') {\r\n  const chunks = textLength / 50;\r\n\r\n  if (chunks > 0) {\r\n    let lengthBonus;\r\n\r\n    // No idea why p or pre are being tamped down here\r\n    // but just following the source for now\r\n    // Not even sure why tagName is included here,\r\n    // since this is only being called from the context\r\n    // of scoreParagraph\r\n    if (idkRe.test(tagName)) {\r\n      lengthBonus = chunks - 2;\r\n    } else {\r\n      lengthBonus = chunks - 1.25;\r\n    }\r\n\r\n    return Math.min(Math.max(lengthBonus, 0), 3);\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { scoreCommas, scoreLength } from './index';\r\n\r\n// Score a paragraph using various methods. Things like number of\r\n// commas, etc. Higher is better.\r\nexport default function scoreParagraph(node) {\r\n  let score = 1;\r\n  const text = node.text().trim();\r\n  const textLength = text.length;\r\n\r\n  // If this paragraph is less than 25 characters, don't count it.\r\n  if (textLength < 25) {\r\n    return 0;\r\n  }\r\n\r\n  // Add points for any commas within this paragraph\r\n  score += scoreCommas(text);\r\n\r\n  // For every 50 characters in this paragraph, add another point. Up\r\n  // to 3 points.\r\n  score += scoreLength(textLength);\r\n\r\n  // Articles can end with short paragraphs when people are being clever\r\n  // but they can also end with short paragraphs setting up lists of junk\r\n  // that we strip. This negative tweaks junk setup paragraphs just below\r\n  // the cutoff threshold.\r\n  if (text.slice(-1) === ':') {\r\n    score -= 1;\r\n  }\r\n\r\n  return score;\r\n}\r\n","export default function setScore($node, $, score) {\r\n  $node.attr('score', score);\r\n  return $node;\r\n}\r\n","import { getOrInitScore, setScore } from './index';\r\n\r\nexport default function addScore($node, $, amount) {\r\n  try {\r\n    const score = getOrInitScore($node, $) + amount;\r\n    setScore($node, $, score);\r\n  } catch (e) {\r\n    // Ignoring; error occurs in scoreNode\r\n  }\r\n\r\n  return $node;\r\n}\r\n","import { addScore } from './index';\r\n\r\n// Adds 1/4 of a child's score to its parent\r\nexport default function addToParent(node, $, score) {\r\n  const parent = node.parent();\r\n  if (parent) {\r\n    addScore(parent, $, score * 0.25);\r\n  }\r\n\r\n  return node;\r\n}\r\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\r\n\r\n// gets and returns the score if it exists\r\n// if not, initializes a score based on\r\n// the node's tag type\r\nexport default function getOrInitScore($node, $, weightNodes = true) {\r\n  let score = getScore($node);\r\n\r\n  if (score) {\r\n    return score;\r\n  }\r\n\r\n  score = scoreNode($node);\r\n\r\n  if (weightNodes) {\r\n    score += getWeight($node);\r\n  }\r\n\r\n  addToParent($node, $, score);\r\n\r\n  return score;\r\n}\r\n","import { scoreParagraph } from './index';\r\nimport {\r\n  PARAGRAPH_SCORE_TAGS,\r\n  CHILD_CONTENT_TAGS,\r\n  BAD_TAGS,\r\n} from './constants';\r\n\r\n// Score an individual node. Has some smarts for paragraphs, otherwise\r\n// just scores based on tag.\r\nexport default function scoreNode($node) {\r\n  const { tagName } = $node.get(0);\r\n\r\n  // TODO: Consider ordering by most likely.\r\n  // E.g., if divs are a more common tag on a page,\r\n  // Could save doing that regex test on every node – AP\r\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\r\n    return scoreParagraph($node);\r\n  }\r\n  if (tagName.toLowerCase() === 'div') {\r\n    return 5;\r\n  }\r\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\r\n    return 3;\r\n  }\r\n  if (BAD_TAGS.test(tagName)) {\r\n    return -3;\r\n  }\r\n  if (tagName.toLowerCase() === 'th') {\r\n    return -5;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\r\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\r\n\r\nfunction convertSpans($node, $) {\r\n  if ($node.get(0)) {\r\n    const { tagName } = $node.get(0);\r\n\r\n    if (tagName === 'span') {\r\n      // convert spans to divs\r\n      convertNodeTo($node, $, 'div');\r\n    }\r\n  }\r\n}\r\n\r\nfunction addScoreTo($node, $, score) {\r\n  if ($node) {\r\n    convertSpans($node, $);\r\n    addScore($node, $, score);\r\n  }\r\n}\r\n\r\nfunction scorePs($, weightNodes) {\r\n  $('p, pre')\r\n    .not('[score]')\r\n    .each((index, node) => {\r\n      // The raw score for this paragraph, before we add any parent/child\r\n      // scores.\r\n      let $node = $(node);\r\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\r\n\r\n      const $parent = $node.parent();\r\n      const rawScore = scoreNode($node);\r\n\r\n      addScoreTo($parent, $, rawScore, weightNodes);\r\n      if ($parent) {\r\n        // Add half of the individual content score to the\r\n        // grandparent\r\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\r\n      }\r\n    });\r\n\r\n  return $;\r\n}\r\n\r\n// score content. Parents get the full value of their children's\r\n// content score, grandparents half\r\nexport default function scoreContent($, weightNodes = true) {\r\n  // First, look for special hNews based selectors and give them a big\r\n  // boost, if they exist\r\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\r\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\r\n      addScore($(node).parent(parentSelector), $, 80);\r\n    });\r\n  });\r\n\r\n  // Doubling this again\r\n  // Previous solution caused a bug\r\n  // in which parents weren't retaining\r\n  // scores. This is not ideal, and\r\n  // should be fixed.\r\n  scorePs($, weightNodes);\r\n  scorePs($, weightNodes);\r\n\r\n  return $;\r\n}\r\n","import { textLength, linkDensity } from 'utils/dom';\r\nimport { hasSentenceEnd } from 'utils/text';\r\n\r\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\r\nimport { getScore } from './index';\r\n\r\n// Now that we have a top_candidate, look through the siblings of\r\n// it to see if any of them are decently scored. If they are, they\r\n// may be split parts of the content (Like two divs, a preamble and\r\n// a body.) Example:\r\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\r\nexport default function mergeSiblings($candidate, topScore, $) {\r\n  if (!$candidate.parent().length) {\r\n    return $candidate;\r\n  }\r\n\r\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\r\n  const wrappingDiv = $('<div></div>');\r\n\r\n  $candidate\r\n    .parent()\r\n    .children()\r\n    .each((index, sibling) => {\r\n      const $sibling = $(sibling);\r\n      // Ignore tags like BR, HR, etc\r\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\r\n        return null;\r\n      }\r\n\r\n      const siblingScore = getScore($sibling);\r\n      if (siblingScore) {\r\n        if ($sibling.get(0) === $candidate.get(0)) {\r\n          wrappingDiv.append($sibling);\r\n        } else {\r\n          let contentBonus = 0;\r\n          const density = linkDensity($sibling);\r\n\r\n          // If sibling has a very low link density,\r\n          // give it a small bonus\r\n          if (density < 0.05) {\r\n            contentBonus += 20;\r\n          }\r\n\r\n          // If sibling has a high link density,\r\n          // give it a penalty\r\n          if (density >= 0.5) {\r\n            contentBonus -= 20;\r\n          }\r\n\r\n          // If sibling node has the same class as\r\n          // candidate, give it a bonus\r\n          if ($sibling.attr('class') === $candidate.attr('class')) {\r\n            contentBonus += topScore * 0.2;\r\n          }\r\n\r\n          const newScore = siblingScore + contentBonus;\r\n\r\n          if (newScore >= siblingScoreThreshold) {\r\n            return wrappingDiv.append($sibling);\r\n          }\r\n          if (sibling.tagName === 'p') {\r\n            const siblingContent = $sibling.text();\r\n            const siblingContentLength = textLength(siblingContent);\r\n\r\n            if (siblingContentLength > 80 && density < 0.25) {\r\n              return wrappingDiv.append($sibling);\r\n            }\r\n            if (\r\n              siblingContentLength <= 80 &&\r\n              density === 0 &&\r\n              hasSentenceEnd(siblingContent)\r\n            ) {\r\n              return wrappingDiv.append($sibling);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n  if (\r\n    wrappingDiv.children().length === 1 &&\r\n    wrappingDiv\r\n      .children()\r\n      .first()\r\n      .get(0) === $candidate.get(0)\r\n  ) {\r\n    return $candidate;\r\n  }\r\n\r\n  return wrappingDiv;\r\n}\r\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\r\nimport { getScore } from './index';\r\nimport mergeSiblings from './merge-siblings';\r\n\r\n// After we've calculated scores, loop through all of the possible\r\n// candidate nodes we found and find the one with the highest score.\r\nexport default function findTopCandidate($) {\r\n  let $candidate;\r\n  let topScore = 0;\r\n\r\n  $('[score]').each((index, node) => {\r\n    // Ignore tags like BR, HR, etc\r\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\r\n      return;\r\n    }\r\n\r\n    const $node = $(node);\r\n    const score = getScore($node);\r\n\r\n    if (score > topScore) {\r\n      topScore = score;\r\n      $candidate = $node;\r\n    }\r\n  });\r\n\r\n  // If we don't have a candidate, return the body\r\n  // or whatever the first element is\r\n  if (!$candidate) {\r\n    return $('body') || $('*').first();\r\n  }\r\n\r\n  $candidate = mergeSiblings($candidate, topScore, $);\r\n\r\n  return $candidate;\r\n}\r\n","import {\r\n  getScore,\r\n  setScore,\r\n  getOrInitScore,\r\n  scoreCommas,\r\n} from 'extractors/generic/content/scoring';\r\n\r\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\r\nimport { normalizeSpaces } from '../text';\r\nimport { linkDensity } from './index';\r\n\r\nfunction removeUnlessContent($node, $, weight) {\r\n  // Explicitly save entry-content-asset tags, which are\r\n  // noted as valuable in the Publisher guidelines. For now\r\n  // this works everywhere. We may want to consider making\r\n  // this less of a sure-thing later.\r\n  if ($node.hasClass('entry-content-asset')) {\r\n    return;\r\n  }\r\n\r\n  const content = normalizeSpaces($node.text());\r\n\r\n  if (scoreCommas(content) < 10) {\r\n    const pCount = $('p', $node).length;\r\n    const inputCount = $('input', $node).length;\r\n\r\n    // Looks like a form, too many inputs.\r\n    if (inputCount > pCount / 3) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const contentLength = content.length;\r\n    const imgCount = $('img', $node).length;\r\n\r\n    // Content is too short, and there are no images, so\r\n    // this is probably junk content.\r\n    if (contentLength < 25 && imgCount === 0) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const density = linkDensity($node);\r\n\r\n    // Too high of link density, is probably a menu or\r\n    // something similar.\r\n    // console.log(weight, density, contentLength)\r\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    // Too high of a link density, despite the score being\r\n    // high.\r\n    if (weight >= 25 && density > 0.5) {\r\n      // Don't remove the node if it's a list and the\r\n      // previous sibling starts with a colon though. That\r\n      // means it's probably content.\r\n      const tagName = $node.get(0).tagName.toLowerCase();\r\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\r\n      if (nodeIsList) {\r\n        const previousNode = $node.prev();\r\n        if (\r\n          previousNode &&\r\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      $node.remove();\r\n      return;\r\n    }\r\n\r\n    const scriptCount = $('script', $node).length;\r\n\r\n    // Too many script tags, not enough content.\r\n    if (scriptCount > 0 && contentLength < 150) {\r\n      $node.remove();\r\n    }\r\n  }\r\n}\r\n\r\n// Given an article, clean it of some superfluous content specified by\r\n// tags. Things like forms, ads, etc.\r\n//\r\n// Tags is an array of tag name's to search through. (like div, form,\r\n// etc)\r\n//\r\n// Return this same doc.\r\nexport default function cleanTags($article, $) {\r\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\r\n    const $node = $(node);\r\n    // If marked to keep, skip it\r\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\r\n      return;\r\n\r\n    let weight = getScore($node);\r\n    if (!weight) {\r\n      weight = getOrInitScore($node, $);\r\n      setScore($node, $, weight);\r\n    }\r\n\r\n    // drop node if its weight is < 0\r\n    if (weight < 0) {\r\n      $node.remove();\r\n    } else {\r\n      // deteremine if node seems like content\r\n      removeUnlessContent($node, $, weight);\r\n    }\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { getWeight } from 'extractors/generic/content/scoring';\r\n\r\nimport { HEADER_TAG_LIST } from './constants';\r\nimport { normalizeSpaces } from '../text';\r\n\r\nexport default function cleanHeaders($article, $, title = '') {\r\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\r\n    const $header = $(header);\r\n    // Remove any headers that appear before all other p tags in the\r\n    // document. This probably means that it was part of the title, a\r\n    // subtitle or something else extraneous like a datestamp or byline,\r\n    // all of which should be handled by other metadata handling.\r\n    if ($($header, $article).prevAll('p').length === 0) {\r\n      return $header.remove();\r\n    }\r\n\r\n    // Remove any headers that match the title exactly.\r\n    if (normalizeSpaces($(header).text()) === title) {\r\n      return $header.remove();\r\n    }\r\n\r\n    // If this header has a negative weight, it's probably junk.\r\n    // Get rid of it.\r\n    if (getWeight($(header)) < 0) {\r\n      return $header.remove();\r\n    }\r\n\r\n    return $header;\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { convertNodeTo } from 'utils/dom';\r\n\r\n// Rewrite the tag name to div if it's a top level node like body or\r\n// html to avoid later complications with multiple body tags.\r\nexport default function rewriteTopLevel(article, $) {\r\n  // I'm not using context here because\r\n  // it's problematic when converting the\r\n  // top-level/root node - AP\r\n  $ = convertNodeTo($('html'), $, 'div');\r\n  $ = convertNodeTo($('body'), $, 'div');\r\n\r\n  return $;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { getAttrs, setAttr } from 'utils/dom';\r\n\r\nfunction absolutize($, rootUrl, attr) {\r\n  const baseUrl = $('base').attr('href');\r\n\r\n  $(`[${attr}]`).each((_, node) => {\r\n    const attrs = getAttrs(node);\r\n    const url = attrs[attr];\r\n    if (!url) return;\r\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\r\n\r\n    setAttr(node, attr, absoluteUrl);\r\n  });\r\n}\r\n\r\nfunction absolutizeSet($, rootUrl, $content) {\r\n  $('[srcset]', $content).each((_, node) => {\r\n    const attrs = getAttrs(node);\r\n    const urlSet = attrs.srcset;\r\n\r\n    if (urlSet) {\r\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\r\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\r\n      // space characters inside the URL should be encoded (%20 or +)\r\n      const candidates = urlSet.match(\r\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\r\n      );\r\n      if (!candidates) return;\r\n      const absoluteCandidates = candidates.map(candidate => {\r\n        // a candidate URL cannot start or end with a comma\r\n        // descriptors are separated from the URLs by unescaped whitespace\r\n        const parts = candidate\r\n          .trim()\r\n          .replace(/,$/, '')\r\n          .split(/\\s+/);\r\n        parts[0] = URL.resolve(rootUrl, parts[0]);\r\n        return parts.join(' ');\r\n      });\r\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\r\n      setAttr(node, 'srcset', absoluteUrlSet);\r\n    }\r\n  });\r\n}\r\n\r\nexport default function makeLinksAbsolute($content, $, url) {\r\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\r\n  absolutizeSet($, url, $content);\r\n\r\n  return $content;\r\n}\r\n","export function textLength(text) {\r\n  return text.trim().replace(/\\s+/g, ' ').length;\r\n}\r\n\r\n// Determines what percentage of the text\r\n// in a node is link text\r\n// Takes a node, returns a float\r\nexport function linkDensity($node) {\r\n  const totalTextLength = textLength($node.text());\r\n\r\n  const linkText = $node.find('a').text();\r\n  const linkLength = textLength(linkText);\r\n\r\n  if (totalTextLength > 0) {\r\n    return linkLength / totalTextLength;\r\n  }\r\n  if (totalTextLength === 0 && linkLength > 0) {\r\n    return 1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\n\r\n// Given a node type to search for, and a list of meta tag names to\r\n// search for, find a meta tag associated.\r\nexport default function extractFromMeta(\r\n  $,\r\n  metaNames,\r\n  cachedNames,\r\n  cleanTags = true\r\n) {\r\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const name of foundNames) {\r\n    const type = 'name';\r\n    const value = 'value';\r\n\r\n    const nodes = $(`meta[${type}=\"${name}\"]`);\r\n\r\n    // Get the unique value of every matching node, in case there\r\n    // are two meta tags with the same name and value.\r\n    // Remove empty values.\r\n    const values = nodes\r\n      .map((index, node) => $(node).attr(value))\r\n      .toArray()\r\n      .filter(text => text !== '');\r\n\r\n    // If we have more than one value for the same name, we have a\r\n    // conflict and can't trust any of them. Skip this name. If we have\r\n    // zero, that means our meta tags had no values. Skip this name\r\n    // also.\r\n    if (values.length === 1) {\r\n      let metaValue;\r\n      // Meta values that contain HTML should be stripped, as they\r\n      // weren't subject to cleaning previously.\r\n      if (cleanTags) {\r\n        metaValue = stripTags(values[0], $);\r\n      } else {\r\n        [metaValue] = values;\r\n      }\r\n\r\n      return metaValue;\r\n    }\r\n  }\r\n\r\n  // If nothing is found, return null\r\n  return null;\r\n}\r\n","import { withinComment } from 'utils/dom';\r\n\r\nfunction isGoodNode($node, maxChildren) {\r\n  // If it has a number of children, it's more likely a container\r\n  // element. Skip it.\r\n  if ($node.children().length > maxChildren) {\r\n    return false;\r\n  }\r\n  // If it looks to be within a comment, skip it.\r\n  if (withinComment($node)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Given a a list of selectors find content that may\r\n// be extractable from the document. This is for flat\r\n// meta-information, like author, title, date published, etc.\r\nexport default function extractFromSelectors(\r\n  $,\r\n  selectors,\r\n  maxChildren = 1,\r\n  textOnly = true\r\n) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const selector of selectors) {\r\n    const nodes = $(selector);\r\n\r\n    // If we didn't get exactly one of this selector, this may be\r\n    // a list of articles or comments. Skip it.\r\n    if (nodes.length === 1) {\r\n      const $node = $(nodes[0]);\r\n\r\n      if (isGoodNode($node, maxChildren)) {\r\n        let content;\r\n        if (textOnly) {\r\n          content = $node.text();\r\n        } else {\r\n          content = $node.html();\r\n        }\r\n\r\n        if (content) {\r\n          return content;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","// strips all tags from a string of text\r\nexport default function stripTags(text, $) {\r\n  // Wrapping text in html element prevents errors when text\r\n  // has no html\r\n  const cleanText = $(`<span>${text}</span>`).text();\r\n  return cleanText === '' ? text : cleanText;\r\n}\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nexport default function withinComment($node) {\r\n  const parents = $node.parents().toArray();\r\n  const commentParent = parents.find(parent => {\r\n    const attrs = getAttrs(parent);\r\n    const { class: nodeClass, id } = attrs;\r\n    const classAndId = `${nodeClass} ${id}`;\r\n    return classAndId.includes('comment');\r\n  });\r\n\r\n  return commentParent !== undefined;\r\n}\r\n","// Given a node, determine if it's article-like enough to return\r\n// param: node (a cheerio node)\r\n// return: boolean\r\n\r\nexport default function nodeIsSufficient($node) {\r\n  return $node.text().trim().length >= 100;\r\n}\r\n","import { IS_WP_SELECTOR } from './constants';\r\n\r\nexport default function isWordpress($) {\r\n  return $(IS_WP_SELECTOR).length > 0;\r\n}\r\n","export default function getAttrs(node) {\r\n  const { attribs, attributes } = node;\r\n\r\n  if (!attribs && attributes) {\r\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\r\n      const attr = attributes[index];\r\n\r\n      if (!attr.name || !attr.value) return acc;\r\n\r\n      acc[attr.name] = attr.value;\r\n      return acc;\r\n    }, {});\r\n    return attrs;\r\n  }\r\n\r\n  return attribs;\r\n}\r\n","export default function setAttr(node, attr, val) {\r\n  if (node.attribs) {\r\n    node.attribs[attr] = val;\r\n  } else if (node.attributes) {\r\n    node.setAttribute(attr, val);\r\n  }\r\n\r\n  return node;\r\n}\r\n","export default function setAttrs(node, attrs) {\r\n  if (node.attribs) {\r\n    node.attribs = attrs;\r\n  } else if (node.attributes) {\r\n    while (node.attributes.length > 0) {\r\n      node.removeAttribute(node.attributes[0].name);\r\n    }\r\n\r\n    Reflect.ownKeys(attrs).forEach(key => {\r\n      node.setAttribute(key, attrs[key]);\r\n    });\r\n  }\r\n\r\n  return node;\r\n}\r\n","export const IS_LINK = new RegExp('https?://', 'i');\r\nconst IMAGE_RE = '.(png|gif|jpe?g)';\r\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\r\nexport const IS_SRCSET = new RegExp(\r\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\r\n  'i'\r\n);\r\n\r\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\r\n","import { getAttrs } from 'utils/dom';\r\n\r\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\r\n\r\n// Convert all instances of images with potentially\r\n// lazy loaded images into normal images.\r\n// Many sites will have img tags with no source, or an image tag with a src\r\n// attribute that a is a placeholer. We need to be able to properly fill in\r\n// the src attribute so the images are no longer lazy loaded.\r\nexport default function convertLazyLoadedImages($) {\r\n  const extractSrcFromJSON = str => {\r\n    try {\r\n      const { src } = JSON.parse(str);\r\n      if (typeof src === 'string') return src;\r\n    } catch (_) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  $('img').each((_, img) => {\r\n    const attrs = getAttrs(img);\r\n\r\n    Reflect.ownKeys(attrs).forEach(attr => {\r\n      const value = attrs[attr];\r\n\r\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\r\n        $(img).attr('srcset', value);\r\n      } else if (\r\n        attr !== 'src' &&\r\n        attr !== 'srcset' &&\r\n        IS_LINK.test(value) &&\r\n        IS_IMAGE.test(value)\r\n      ) {\r\n        // Is the value a JSON object? If so, we should attempt to extract the image src from the data.\r\n        const existingSrc = extractSrcFromJSON(value);\r\n        if (existingSrc) {\r\n          $(img).attr('src', existingSrc);\r\n        } else {\r\n          $(img).attr('src', value);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return $;\r\n}\r\n","import { TAGS_TO_REMOVE } from './constants';\r\n\r\nfunction isComment(index, node) {\r\n  return node.type === 'comment';\r\n}\r\n\r\nfunction cleanComments($) {\r\n  $.root()\r\n    .find('*')\r\n    .contents()\r\n    .filter(isComment)\r\n    .remove();\r\n\r\n  return $;\r\n}\r\n\r\nexport default function clean($) {\r\n  $(TAGS_TO_REMOVE).remove();\r\n\r\n  $ = cleanComments($);\r\n  return $;\r\n}\r\n","import cheerio from 'cheerio';\r\nimport iconv from 'iconv-lite';\r\n\r\nimport { getEncoding } from 'utils/text';\r\nimport { fetchResource } from './utils';\r\nimport { normalizeMetaTags, convertLazyLoadedImages, clean } from './utils/dom';\r\n\r\nconst Resource = {\r\n  // Create a Resource.\r\n  //\r\n  // :param url: The URL for the document we should retrieve.\r\n  // :param response: If set, use as the response rather than\r\n  //                  attempting to fetch it ourselves. Expects a\r\n  //                  string.\r\n  // :param headers: Custom headers to be included in the request\r\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\r\n    let result;\r\n\r\n    if (preparedResponse) {\r\n      const validResponse = {\r\n        statusMessage: 'OK',\r\n        statusCode: 200,\r\n        headers: {\r\n          'content-type': 'text/html',\r\n          'content-length': 500,\r\n        },\r\n      };\r\n\r\n      result = {\r\n        body: preparedResponse,\r\n        response: validResponse,\r\n        alreadyDecoded: true,\r\n      };\r\n    } else {\r\n      result = await fetchResource(url, parsedUrl, headers);\r\n    }\r\n\r\n    if (result.error) {\r\n      result.failed = true;\r\n      return result;\r\n    }\r\n\r\n    try {\r\n      return this.generateDoc(result);\r\n    }catch (e) {\r\n      result = {\r\n        failed: true,\r\n        error: true,\r\n        message: e.message,\r\n      };\r\n      return result;\r\n    }\r\n  },\r\n\r\n  generateDoc({ body: content, response, alreadyDecoded = false }) {\r\n    const { 'content-type': contentType = '' } = response.headers;\r\n\r\n    // TODO: Implement is_text function from\r\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\r\n    if (!contentType.includes('html') && !contentType.includes('text')) {\r\n      throw new Error(`Content does not appear to be text. ${contentType}`);\r\n    }\r\n\r\n    let $ = this.encodeDoc({ content, contentType, alreadyDecoded });\r\n\r\n    if ($.root().children().length === 0) {\r\n      throw new Error('No children, likely a bad parse.');\r\n    }\r\n\r\n    $ = normalizeMetaTags($);\r\n    $ = convertLazyLoadedImages($);\r\n    $ = clean($);\r\n\r\n    return $;\r\n  },\r\n\r\n  encodeDoc({ content, contentType, alreadyDecoded = false }) {\r\n    if (alreadyDecoded) {\r\n      return cheerio.load(content);\r\n    }\r\n\r\n    const encoding = getEncoding(contentType);\r\n    let decodedContent = iconv.decode(content, encoding);\r\n    let $ = cheerio.load(decodedContent);\r\n    // after first cheerio.load, check to see if encoding matches\r\n    const contentTypeSelector = cheerio.browser\r\n      ? 'meta[http-equiv=content-type]'\r\n      : 'meta[http-equiv=content-type i]';\r\n    const metaContentType =\r\n      $(contentTypeSelector).attr('content') ||\r\n      $('meta[charset]').attr('charset');\r\n    const properEncoding = getEncoding(metaContentType);\r\n\r\n    // if encodings in the header/body dont match, use the one in the body\r\n    if (metaContentType && properEncoding !== encoding) {\r\n      decodedContent = iconv.decode(content, properEncoding);\r\n      $ = cheerio.load(decodedContent);\r\n    }\r\n\r\n    return $;\r\n  },\r\n};\r\n\r\nexport default Resource;\r\n","export default function* range(start = 1, end = 1) {\r\n  while (start <= end) {\r\n    yield (start += 1);\r\n  }\r\n}\r\n","// extremely simple url validation as a first step\r\nexport default function validateUrl({ hostname }) {\r\n  // If this isn't a valid url, return an error message\r\n  return !!hostname;\r\n}\r\n","const merge = (extractor, domains) =>\r\n  domains.reduce((acc, domain) => {\r\n    acc[domain] = extractor;\r\n    return acc;\r\n  }, {});\r\n\r\nexport default function mergeSupportedDomains(extractor) {\r\n  return extractor.supportedDomains\r\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\r\n    : merge(extractor, [extractor.domain]);\r\n}\r\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\r\n\r\nexport const apiExtractors = {};\r\n\r\nexport default function addExtractor(extractor) {\r\n  if (!extractor || !extractor.domain) {\r\n    return {\r\n      error: true,\r\n      message: 'Unable to add custom extractor. Invalid parameters.',\r\n    };\r\n  }\r\n\r\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\r\n\r\n  return apiExtractors;\r\n}\r\n","export const BloggerExtractor = {\r\n  domain: 'blogspot.com',\r\n  content: {\r\n    // Blogger is insane and does not load its content\r\n    // initially in the page, but it's all there\r\n    // in noscript\r\n    selectors: ['.post-content noscript'],\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: [],\r\n\r\n    // Convert the noscript tag to a div\r\n    transforms: {\r\n      noscript: 'div',\r\n    },\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.post-author-name'],\r\n  },\r\n\r\n  title: {\r\n    selectors: ['.post h2.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['span.publishdate'],\r\n  },\r\n};\r\n","export const NYMagExtractor = {\r\n  domain: 'nymag.com',\r\n  content: {\r\n    // Order by most likely. Extractor will stop on first occurrence\r\n    selectors: ['div.article-content', 'section.body', 'article.article'],\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: ['.ad', '.single-related-story'],\r\n\r\n    // Object of tranformations to make on matched elements\r\n    // Each key is the selector, each value is the tag to\r\n    // transform to.\r\n    // If a function is given, it should return a string\r\n    // to convert to or nothing (in which case it will not perform\r\n    // the transformation.\r\n    transforms: {\r\n      // Convert h1s to h2s\r\n      h1: 'h2',\r\n\r\n      // Convert lazy-loaded noscript images to figures\r\n      noscript: ($node, $) => {\r\n        const $children = $.browser ? $($node.text()) : $node.children();\r\n        if (\r\n          $children.length === 1 &&\r\n          $children.get(0) !== undefined &&\r\n          $children.get(0).tagName.toLowerCase() === 'img'\r\n        ) {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n  },\r\n\r\n  title: {\r\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.by-authors', '.lede-feature-author'],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.lede-feature-teaser'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.article-timestamp[datetime]', 'datetime'],\r\n      'time.article-timestamp',\r\n    ],\r\n  },\r\n};\r\n","export const WikipediaExtractor = {\r\n  domain: 'wikipedia.org',\r\n  content: {\r\n    selectors: ['#mw-content-text'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // transform top infobox to an image with caption\r\n    transforms: {\r\n      '.infobox img': $node => {\r\n        const $parent = $node.parents('.infobox');\r\n        // Only prepend the first image in .infobox\r\n        if ($parent.children('img').length === 0) {\r\n          $parent.prepend($node);\r\n        }\r\n      },\r\n      '.infobox caption': 'figcaption',\r\n      '.infobox': 'figure',\r\n    },\r\n\r\n    // Selectors to remove from the extracted content\r\n    clean: [\r\n      '.mw-editsection',\r\n      'figure tr, figure td, figure tbody',\r\n      '#toc',\r\n      '.navbox',\r\n    ],\r\n  },\r\n\r\n  author: 'Wikipedia Contributors',\r\n\r\n  title: {\r\n    selectors: ['h2.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['#footer-info-lastmod'],\r\n  },\r\n};\r\n","export const TwitterExtractor = {\r\n  domain: 'twitter.com',\r\n\r\n  content: {\r\n    transforms: {\r\n      // We're transforming essentially the whole page here.\r\n      // Twitter doesn't have nice selectors, so our initial\r\n      // selector grabs the whole page, then we're re-writing\r\n      // it to fit our needs before we clean it up.\r\n      '.permalink[role=main]': ($node, $) => {\r\n        const tweets = $node.find('.tweet');\r\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\r\n        $tweetContainer.append(tweets);\r\n        $node.replaceWith($tweetContainer);\r\n      },\r\n\r\n      // Twitter wraps @ with s, which\r\n      // renders as a strikethrough\r\n      s: 'span',\r\n    },\r\n\r\n    selectors: ['.permalink[role=main]'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.tweet.permalink-tweet .username'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\r\n  },\r\n};\r\n","export const NYTimesExtractor = {\r\n  domain: 'www.nytimes.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      'h1[data-testid=\"headline\"]',\r\n      'h1.g-headline',\r\n      'h1[itemprop=\"headline\"]',\r\n      'h1.headline',\r\n      'h1 .balancedHeadline',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      '.g-byline',\r\n      '.byline',\r\n      ['meta[name=\"byl\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\r\n\r\n    transforms: {\r\n      'img.g-lazy': $node => {\r\n        let src = $node.attr('src');\r\n        const width = 640;\r\n\r\n        src = src.replace('{{size}}', width);\r\n        $node.attr('src', src);\r\n      },\r\n    },\r\n\r\n    clean: [\r\n      '.ad',\r\n      'header#story-header',\r\n      '.story-body-1 .lede.video',\r\n      '.visually-hidden',\r\n      '#newsletter-promo',\r\n      '.promo',\r\n      '.comments-button',\r\n      '.hidden',\r\n      '.comments',\r\n      '.supplemental',\r\n      '.nocontent',\r\n      '.story-footer-links',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[name=\"article:published\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\nexport const TheAtlanticExtractor = {\r\n  domain: 'www.theatlantic.com',\r\n  title: {\r\n    selectors: ['h1', '.c-article-header__hed'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.partner-box',\r\n      '.callout',\r\n      '.c-article-writer__image',\r\n      '.c-article-writer__content',\r\n      '.c-letters-cta__text',\r\n      '.c-footer__logo',\r\n      '.c-recirculation-link',\r\n      '.twitter-tweet',\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const NewYorkerExtractor = {\r\n  domain: 'www.newyorker.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[class^=\"content-header\"]',\r\n      'h1[class^=\"ArticleHeader__hed\"]',\r\n      'h1[class*=\"ContentHeaderHed\"]',\r\n      ['meta[name=\"og:title\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'article header div[class^=\"BylinesWrapper\"]',\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\r\n      'article header div[class*=\"Byline__multipleContributors\"]',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article__body',\r\n      'article.article.main-content',\r\n      'main[class^=\"Layout__content\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.caption__text': 'figcaption',\r\n      '.caption__credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['footer[class^=\"ArticleFooter__footer\"]', 'aside'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'time.content-header__publish-date',\r\n      ['meta[name=\"pubdate\"]', 'value'],\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      'div[class^=\"ContentHeaderDek\"]',\r\n      'div.content-header__dek',\r\n      'h2[class^=\"ArticleHeader__dek\"]',\r\n    ],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const WiredExtractor = {\r\n  domain: 'www.wired.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[data-testId=\"ContentHeaderHed\"]',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'a[rel=\"author\"]',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'article.article.main-content',\r\n      'article.content',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.visually-hidden', 'figcaption img.photo', '.alert-message'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const MSNExtractor = {\r\n  domain: 'www.msn.com',\r\n  title: {\r\n    selectors: [\r\n      'h1',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'span.authorname-txt',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.richtext',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['span.caption'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['span.time'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const YahooExtractor = {\r\n  domain: 'www.yahoo.com',\r\n  title: {\r\n    selectors: [\r\n      'header.canvas-header',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'span.provider-name',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // enter content selectors\r\n      '.content-canvas',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.figure-caption'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time.date[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter dek selectors\r\n    ],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const BuzzfeedExtractor = {\r\n  domain: 'www.buzzfeed.com',\r\n\r\n  supportedDomains: ['www.buzzfeednews.com'],\r\n\r\n  title: {\r\n    selectors: [\r\n      'h1.embed-headline-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-action=\"user/username\"]',\r\n      'byline__author',\r\n      ['meta[name=\"author\"]', 'value'],\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['div[class^=\"featureimage_featureImageWrapper\"]', '.js-subbuzz-wrapper'],\r\n      ['.js-subbuzz-wrapper'],\r\n    ],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: 'b',\r\n\r\n      'div.longform_custom_header_media': $node => {\r\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n\r\n      'figure.longform_custom_header_media .longform_header_image_source':\r\n        'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.instapaper_ignore',\r\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\r\n      '.share-box',\r\n      '.print',\r\n      '.js-inline-share-bar',\r\n      '.js-ad-placement',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.embed-headline-description'],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const WikiaExtractor = {\r\n  domain: 'fandom.wikia.com',\r\n  title: {\r\n    selectors: [\r\n      'h1.entry-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.author vcard',\r\n      '.fn',\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.grid-content',\r\n      '.entry-content',\r\n      // enter content selectors\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const LittleThingsExtractor = {\r\n  domain: 'www.littlethings.com',\r\n  title: {\r\n    selectors: [\r\n      'h1[class*=\"PostHeader\"]',\r\n      'h1.post-title',\r\n      // enter title selectors\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div[class^=\"PostHeader__ScAuthorNameSection\"]',\r\n      ['meta[name=\"author\"]', 'value'],\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // enter content selectors\r\n      'section[class*=\"PostMainArticle\"]',\r\n      '.mainContentIntro',\r\n      '.content-wrapper',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: [],\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  next_page_url: null,\r\n\r\n  excerpt: null,\r\n};\r\n","export const PoliticoExtractor = {\r\n  domain: 'www.politico.com',\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['div[itemprop=\"author\"] meta[itemprop=\"name\"]', 'value'],\r\n      '.story-meta__authors .vcard',\r\n      '.story-main-content .byline .vcard',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.story-text'], '.story-main-content', '.story-core'],\r\n\r\n    transforms: [],\r\n\r\n    clean: ['figcaption', '.story-meta', '.ad'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\r\n      ['.story-meta__details time[datetime]', 'datetime'],\r\n      ['.story-main-content .timestamp time[datetime]', 'datetime'],\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n};\r\n","export const DeadspinExtractor = {\r\n  domain: 'deadspin.com',\r\n\r\n  supportedDomains: [\r\n    'jezebel.com',\r\n    'lifehacker.com',\r\n    'kotaku.com',\r\n    'gizmodo.com',\r\n    'jalopnik.com',\r\n    'kinja.com',\r\n    'avclub.com',\r\n    'clickhole.com',\r\n    'splinternews.com',\r\n    'theonion.com',\r\n    'theroot.com',\r\n    'thetakeout.com',\r\n    'theinventory.com',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['header h1', 'h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[data-ga*=\"Author\"]', '.author'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.js_post-content', '.post-content', '.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\r\n        const youtubeId = $node.attr('id').split('youtube-')[1];\r\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.magnifier', '.lightbox'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time.updated[datetime]', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const BroadwayWorldExtractor = {\r\n  domain: 'www.broadwayworld.com',\r\n  title: {\r\n    selectors: ['h1[itemprop=headline]', 'h1.article-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=author]'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=articlebody]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=datePublished]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","// Rename CustomExtractor\r\n// to fit your publication\r\n// (e.g., NYTimesExtractor)\r\nexport const ApartmentTherapyExtractor = {\r\n  domain: 'www.apartmenttherapy.com',\r\n  title: {\r\n    selectors: ['h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.PostByline__name'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.post__content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\r\n        const data = JSON.parse($node.attr('data-props'));\r\n        const { src } = data.sources[0];\r\n        const $img = $('<img />').attr('src', src);\r\n        $node.replaceWith($img);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","export const MediumExtractor = {\r\n  domain: 'medium.com',\r\n\r\n  title: {\r\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      // Allow drop cap character.\r\n      'section span:first-of-type': $node => {\r\n        const $text = $node.html();\r\n        if ($text.length === 1 && /^[a-zA-Z()]+$/.test($text)) {\r\n          $node.replaceWith($text);\r\n        }\r\n      },\r\n      // Re-write lazy-loaded youtube videos\r\n      iframe: $node => {\r\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\r\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\r\n        const $parent = $node.parents('figure');\r\n\r\n        if (ytRe.test(thumb)) {\r\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\r\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\r\n          const $caption = $parent.find('figcaption');\r\n          $parent.empty().append([$node, $caption]);\r\n          return;\r\n        }\r\n\r\n        // If we can't draw the YouTube preview, remove the figure.\r\n        $parent.remove();\r\n      },\r\n\r\n      // rewrite figures to pull out image and caption, remove rest\r\n      figure: $node => {\r\n        // ignore if figure has an iframe\r\n        if ($node.find('iframe').length > 0) return;\r\n\r\n        const $img = $node.find('img').slice(-1)[0];\r\n        const $caption = $node.find('figcaption');\r\n\r\n        $node.empty().append([$img, $caption]);\r\n      },\r\n\r\n      // Remove any smaller images that did not get caught by the generic image\r\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\r\n      img: $node => {\r\n        const width = parseInt($node.attr('width'), 10);\r\n        if (width < 100) $node.remove();\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['span a', 'svg'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  next_page_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  excerpt: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n};\r\n","export const WwwTmzComExtractor = {\r\n  domain: 'www.tmz.com',\r\n\r\n  title: {\r\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\r\n  },\r\n\r\n  author: 'TMZ STAFF',\r\n\r\n  date_published: {\r\n    selectors: ['.article__published-at', '.article-posted-date'],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article__blocks', '.article-content', '.all-post-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.lightbox-link'],\r\n  },\r\n};\r\n","export const WwwWashingtonpostComExtractor = {\r\n  domain: 'www.washingtonpost.com',\r\n\r\n  title: {\r\n    selectors: ['h1', '#topper-headline-wrapper'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.pb-author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.inline-content': $node => {\r\n        if ($node.has('img,iframe,video').length > 0) {\r\n          return 'figure';\r\n        }\r\n\r\n        $node.remove();\r\n        return null;\r\n      },\r\n      '.pb-caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\r\n  },\r\n};\r\n","export const WwwHuffingtonpostComExtractor = {\r\n  domain: 'www.huffingtonpost.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-card__details__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:modified_time\"]', 'value'],\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.headline__subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry__body'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.pull-quote',\r\n      '.tag-cloud',\r\n      '.embed-asset',\r\n      '.below-entry',\r\n      '.entry-corrections',\r\n      '#suggested-story',\r\n    ],\r\n  },\r\n};\r\n","export const NewrepublicComExtractor = {\r\n  domain: 'newrepublic.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.AuthorList'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.article-subhead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['div.article-body']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['aside'],\r\n  },\r\n};\r\n","export const MoneyCnnComExtractor = {\r\n  domain: 'money.cnn.com',\r\n\r\n  title: {\r\n    selectors: ['.article-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], '.byline a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"date\"]', 'value']],\r\n\r\n    timezone: 'GMT',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['#storytext h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#storytext'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.inStoryHeading'],\r\n  },\r\n};\r\n","export const WwwThevergeComExtractor = {\r\n  domain: 'www.theverge.com',\r\n\r\n  supportedDomains: ['www.polygon.com'],\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // feature template multi-match\r\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\r\n      // regular post multi-match\r\n      ['.e-image--hero', '.c-entry-content'],\r\n      // feature template fallback\r\n      '.l-wrapper .l-feature',\r\n      // regular post fallback\r\n      'div.c-entry-content',\r\n    ],\r\n\r\n    // Transform lazy-loaded images\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'span';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.aside',\r\n      'img.c-dynamic-image', // images come from noscript transform\r\n    ],\r\n  },\r\n};\r\n","export const WwwCnnComExtractor = {\r\n  domain: 'www.cnn.com',\r\n\r\n  title: {\r\n    selectors: ['h1.pg-headline', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      // a more specific selector to grab the lead image and the body\r\n      ['.media__video--thumbnail', '.zn-body-text'],\r\n      // a fallback for the above\r\n      '.zn-body-text',\r\n      'div[itemprop=\"articleBody\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\r\n        const $text = $node.html();\r\n        if ($text) {\r\n          return 'p';\r\n        }\r\n\r\n        return null;\r\n      },\r\n\r\n      // this transform cleans the short, all-link sections linking\r\n      // to related content but not marked as such in any way.\r\n      '.zn-body__paragraph': $node => {\r\n        if ($node.has('a')) {\r\n          if (\r\n            $node.text().trim() ===\r\n            $node\r\n              .find('a')\r\n              .text()\r\n              .trim()\r\n          ) {\r\n            $node.remove();\r\n          }\r\n        }\r\n      },\r\n\r\n      '.media__video--thumbnail': 'figure',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAolComExtractor = {\r\n  domain: 'www.aol.com',\r\n\r\n  title: {\r\n    selectors: ['h1.p-article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.p-article__byline__date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwYoutubeComExtractor = {\r\n  domain: 'www.youtube.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      ['meta[name=\"title\"]', 'value'],\r\n      '.watch-title',\r\n      'h1.watch-title-container',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['link[itemprop=\"name\"]', 'content'], '.yt-user-info'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\r\n\r\n    timezone: 'GMT',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    defaultCleaner: false,\r\n\r\n    selectors: [\r\n      '#player-container-outer',\r\n      'ytd-expandable-video-description-body-renderer #description',\r\n      ['#player-api', '#description'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '#player-api': ($node, $) => {\r\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\r\n        $node.html(`\r\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\r\n      },\r\n      '#player-container-outer': ($node, $) => {\r\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\r\n        const description = $('meta[itemProp=\"description\"]').attr('value');\r\n        $node.html(`\r\n        <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>\r\n        <div><span>${description}</span></div>`);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwTheguardianComExtractor = {\r\n  domain: 'www.theguardian.com',\r\n\r\n  title: {\r\n    selectors: ['h1', '.content__headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['address[data-link-name=\"byline\"]', 'p.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[data-gu-name=\"standfirst\"]', '.content__standfirst'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#maincontent', '.content__article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.hide-on-mobile', '.inline-icon'],\r\n  },\r\n};\r\n","export const WwwSbnationComExtractor = {\r\n  domain: 'www.sbnation.com',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['p.c-entry-summary.p-dek', 'h2.c-entry-summary.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.c-entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwBloombergComExtractor = {\r\n  domain: 'www.bloomberg.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      // normal articles\r\n      '.lede-headline',\r\n\r\n      // /graphics/ template\r\n      'h1.article-title',\r\n\r\n      // /news/ template\r\n      'h1[class^=\"headline\"]',\r\n      'h1.lede-text-only__hed',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"parsely-author\"]', 'value'],\r\n      '.byline-details__link',\r\n\r\n      // /graphics/ template\r\n      '.bydek',\r\n\r\n      // /news/ template\r\n      '.author',\r\n      'p[class*=\"author\"]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.published-at', 'datetime'],\r\n      ['time[datetime]', 'datetime'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\r\n      ['meta[name=\"parsely-pub-date\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[name=\"og:image\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article-body__content',\r\n      '.body-content',\r\n\r\n      // /graphics/ template\r\n      ['section.copy-block'],\r\n\r\n      // /news/ template\r\n      '.body-copy',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.inline-newsletter', '.page-ad'],\r\n  },\r\n};\r\n","export const WwwBustleComExtractor = {\r\n  domain: 'www.bustle.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.post-page__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[href*=\"profile\"]', 'div.content-meta__author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time', 'datetime']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.post-page__body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwNprOrgExtractor = {\r\n  domain: 'www.npr.org',\r\n\r\n  title: {\r\n    selectors: ['h1', '.storytitle'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.byline__name.byline__name--block'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['.dateblock time[datetime]', 'datetime'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[name=\"twitter:image:src\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.storytext'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.bucketwrap.image': 'figure',\r\n      '.bucketwrap.image .credit-caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['div.enlarge_measure'],\r\n  },\r\n};\r\n","export const WwwRecodeNetExtractor = {\r\n  domain: 'www.recode.net',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.c-entry-summary.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['figure.e-image--hero', '.c-entry-content'],\r\n      '.c-entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const QzComExtractor = {\r\n  domain: 'qz.com',\r\n\r\n  title: {\r\n    selectors: ['article header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time[datetime]', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      ['meta[name=\"twitter:image\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwDmagazineComExtractor = {\r\n  domain: 'www.dmagazine.com',\r\n\r\n  title: {\r\n    selectors: ['h1.story__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.story__info .story__info__item:first-child'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      // enter selectors\r\n      '.story__info',\r\n    ],\r\n\r\n    timezone: 'America/Chicago',\r\n    format: 'MMMM D, YYYY h:mm a',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.story__subhead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['article figure a:first-child', 'href']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.story__content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwReutersComExtractor = {\r\n  domain: 'www.reuters.com',\r\n\r\n  title: {\r\n    selectors: ['h1[class*=\"ArticleHeader-headline-\"]', 'h1.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"og:article:author\"]', 'value'], '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.ArticleBodyWrapper', '#article-text'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.article-subtitle': 'h4',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'div[class^=\"ArticleBody-byline-container-\"]',\r\n      '#article-byline .author',\r\n    ],\r\n  },\r\n};\r\n","export const MashableComExtractor = {\r\n  domain: 'mashable.com',\r\n\r\n  title: {\r\n    selectors: ['header h1', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.author_name a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article', 'section.article-content.blueprint'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.image-credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwChicagotribuneComExtractor = {\r\n  domain: 'www.chicagotribune.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.article_byline span:first-of-type'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwVoxComExtractor = {\r\n  domain: 'www.vox.com',\r\n\r\n  title: {\r\n    selectors: ['h1.c-page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.p-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['figure.e-image--hero', '.c-entry-content'],\r\n      '.c-entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'figure .e-image__image noscript': $node => {\r\n        const imgHtml = $node.html();\r\n        $node\r\n          .parents('.e-image__image')\r\n          .find('.c-dynamic-image')\r\n          .replaceWith(imgHtml);\r\n      },\r\n\r\n      'figure .e-image__meta': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const NewsNationalgeographicComExtractor = {\r\n  domain: 'news.nationalgeographic.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-component__contributors b span'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\r\n    timezone: 'EST',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.parsys.content': ($node, $) => {\r\n        const $imgSrc = $node\r\n          .find('.image.parbase.section')\r\n          .find('.picturefill')\r\n          .first()\r\n          .data('platform-src');\r\n        if ($imgSrc) {\r\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pull-quote.pull-quote--large'],\r\n  },\r\n};\r\n","export const WwwNationalgeographicComExtractor = {\r\n  domain: 'www.nationalgeographic.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-component__contributors b span'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.Article__Headline__Desc', '.article__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'section.Article__Content',\r\n      ['.parsys.content', '.__image-lead__'],\r\n      '.content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.parsys.content': ($node, $) => {\r\n        const $imageParent = $node.children().first();\r\n        if ($imageParent.hasClass('imageGroup')) {\r\n          const $dataAttrContainer = $imageParent\r\n            .find('.media--medium__container')\r\n            .children()\r\n            .first();\r\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\r\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\r\n          if (imgPath2 && imgPath1) {\r\n            $node.prepend(\r\n              $(`<div class=\"__image-lead__\">\r\n                <img src=\"${imgPath1}\"/>\r\n                <img src=\"${imgPath2}\"/>\r\n              </div>`)\r\n            );\r\n          }\r\n        } else {\r\n          const $imgSrc = $node\r\n            .find('.image.parbase.section')\r\n            .find('.picturefill')\r\n            .first()\r\n            .data('platform-src');\r\n          if ($imgSrc) {\r\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pull-quote.pull-quote--small'],\r\n  },\r\n};\r\n","export const WwwLatimesComExtractor = {\r\n  domain: 'www.latimes.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline', '.trb_ar_hl'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-click=\"standardBylineAuthorName\"]',\r\n      ['meta[name=\"author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.page-article-body', '.trb_ar_main'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.trb_ar_la': $node => {\r\n        const $figure = $node.find('figure');\r\n        $node.replaceWith($figure);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\r\n  },\r\n};\r\n","export const PagesixComExtractor = {\r\n  domain: 'pagesix.com',\r\n\r\n  supportedDomains: ['nypost.com'],\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['#featured-image-wrapper', '.entry-content'],\r\n      '.entry-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '#featured-image-wrapper': 'figure',\r\n      '.wp-caption-text': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.modal-trigger'],\r\n  },\r\n};\r\n","export const ThefederalistpapersOrgExtractor = {\r\n  domain: 'thefederalistpapers.org',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author-meta-title', 'main span.entry-author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'header',\r\n      '.article-sharing',\r\n      '.after-article',\r\n      '.type-commenting',\r\n      '.more-posts',\r\n      ['p[style]'],\r\n    ],\r\n  },\r\n};\r\n","export const WwwCbssportsComExtractor = {\r\n  domain: 'www.cbssports.com',\r\n\r\n  title: {\r\n    selectors: ['.Article-headline', '.article-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.ArticleAuthor-nameText', '.author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\r\n    timezone: 'UTC',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.Article-subline', '.article-subline'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMsnbcComExtractor = {\r\n  domain: 'www.msnbc.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.is-title-pane'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-name', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n      ['meta[name=\"DC.date.issued\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body__content', '.pane-node-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.pane-node-body': ($node, $) => {\r\n        const [\r\n          selector,\r\n          attr,\r\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\r\n        const src = $(selector).attr(attr);\r\n        if (src) {\r\n          $node.prepend(`<img src=\"${src}\" />`);\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwThepoliticalinsiderComExtractor = {\r\n  domain: 'www.thepoliticalinsider.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMentalflossComExtractor = {\r\n  domain: 'www.mentalfloss.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      ['meta[name=\"og:title\"]', 'value'],\r\n      'h1.title',\r\n      '.title-group',\r\n      '.inner',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a[data-vars-label*=\"authors\"]',\r\n      '.field-name-field-enhanced-authors',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      '.date-display-single',\r\n    ],\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article main', 'div.field.field-name-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['small'],\r\n  },\r\n};\r\n","export const AbcnewsGoComExtractor = {\r\n  domain: 'abcnews.go.com',\r\n\r\n  title: {\r\n    selectors: ['div[class*=\"Article_main__body\"] h1', '.article-header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.ShareByline span:nth-child(2)', '.authors'],\r\n    clean: ['.author-overlay', '.by-text'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.ShareByline', '.timestamp'],\r\n    format: 'MMMM D, YYYY h:mm a',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article-copy'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwNydailynewsComExtractor = {\r\n  domain: 'www.nydailynews.com',\r\n\r\n  title: {\r\n    selectors: ['h1.headline', 'h1#ra-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.article_byline span',\r\n      ['meta[name=\"parsely-author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time', ['meta[name=\"sailthru.date\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', 'article#ra-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\r\n  },\r\n};\r\n","export const WwwCnbcComExtractor = {\r\n  domain: 'www.cnbc.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div#article_body.content',\r\n      'div.story',\r\n      'div.ArticleBody-articleBody',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwPopsugarComExtractor = {\r\n  domain: 'www.popsugar.com',\r\n\r\n  title: {\r\n    selectors: ['h2.post-title', 'title-text'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\r\n  },\r\n};\r\n","export const ObserverComExtractor = {\r\n  domain: 'observer.com',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author', '.vcard'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const PeopleComExtractor = {\r\n  domain: 'people.com',\r\n\r\n  title: {\r\n    selectors: ['.article-header h1', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"sailthru.author\"]', 'value'], 'a.author.url.fn'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      '.mntl-attribution__item-date',\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article-header h2'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[class^=\"loc article-content\"]', 'div.article-body__inner'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwUsmagazineComExtractor = {\r\n  domain: 'www.usmagazine.com',\r\n\r\n  title: {\r\n    selectors: ['header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.author', 'a.article-byline.tracked-offpage'],\r\n  },\r\n\r\n  date_published: {\r\n    timezone: 'America/New_York',\r\n\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.module-related'],\r\n  },\r\n};\r\n","export const WwwRollingstoneComExtractor = {\r\n  domain: 'www.rollingstone.com',\r\n\r\n  title: {\r\n    selectors: ['h1.l-article-header__row--title', 'h1.content-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.c-byline__link', 'a.content-author.tracked-offpage'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'time.content-published-date',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.l-article-header__row--lead', '.content-description'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.l-article-content',\r\n      ['.lead-container', '.article-content'],\r\n      '.article-content',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.c-related-links-wrapper', '.module-related'],\r\n  },\r\n};\r\n","export const twofortysevensportsComExtractor = {\r\n  domain: '247sports.com',\r\n\r\n  title: {\r\n    selectors: ['title', 'article header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article-cnt__author', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time[data-published]', 'data-published']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body', 'section.body.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const UproxxComExtractor = {\r\n  domain: 'uproxx.com',\r\n\r\n  title: {\r\n    selectors: ['div.entry-header h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"qc:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.image': 'figure',\r\n      'div.image .wp-media-credit': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwEonlineComExtractor = {\r\n  domain: 'www.eonline.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-detail__title', 'h1.article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article-detail__meta__author', '.entry-meta__author a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.article-detail__main-content section'],\r\n      ['.post-content section, .post-content div.post-content__image'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.post-content__image': 'figure',\r\n      'div.post-content__image .image__credits': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMiamiheraldComExtractor = {\r\n  domain: 'www.miamiherald.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['p.published-date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.dateline-storybody'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRefinery29ComExtractor = {\r\n  domain: 'www.refinery29.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.contributor'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.full-width-opener', '.article-content'],\r\n      '.article-content',\r\n      '.body',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.loading noscript': $node => {\r\n        const imgHtml = $node.html();\r\n        $node.parents('.loading').replaceWith(imgHtml);\r\n      },\r\n\r\n      '.section-image': 'figure',\r\n\r\n      '.section-image .content-caption': 'figcaption',\r\n\r\n      '.section-text': 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.story-share'],\r\n  },\r\n};\r\n","export const WwwMacrumorsComExtractor = {\r\n  domain: 'www.macrumors.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['article a[rel=\"author\"]', '.author-url'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time', 'datetime']],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article', '.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAndroidcentralComExtractor = {\r\n  domain: 'www.androidcentral.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.main-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.intro', 'blockquote'],\r\n  },\r\n};\r\n","export const WwwSiComExtractor = {\r\n  domain: 'www.si.com',\r\n\r\n  title: {\r\n    selectors: ['h1', 'h1.headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"published\"]', 'value']],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.m-detail-header--dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.m-detail--body',\r\n      ['p', '.marquee_large_2x', '.component.image'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'figure';\r\n        }\r\n\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\r\n    ],\r\n  },\r\n};\r\n","export const WwwRawstoryComExtractor = {\r\n  domain: 'www.rawstory.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.blog-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.main-post-head .social-author__name',\r\n      '.blog-author a:first-of-type',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      '.blog-author a:last-of-type',\r\n    ],\r\n\r\n    timezone: 'EST',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.post-body', '.blog-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwCnetComExtractor = {\r\n  domain: 'www.cnet.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author', 'a.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.c-head_dek', '.article-dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['img.__image-lead__', '.article-main-body'],\r\n      '.article-main-body',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'figure.image': $node => {\r\n        const $img = $node.find('img');\r\n        $img.attr('width', '100%');\r\n        $img.attr('height', '100%');\r\n        $img.addClass('__image-lead__');\r\n        $node.remove('.imgContainer').prepend($img);\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwTodayComExtractor = {\r\n  domain: 'www.today.com',\r\n\r\n  title: {\r\n    selectors: ['h1.article-hero-headline__htag', 'h1.entry-headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.byline-name', ['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time[datetime]', ['meta[name=\"DC.date.issued\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body__content', '.entry-container'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.label-comment'],\r\n  },\r\n};\r\n","export const WwwAlComExtractor = {\r\n  domain: 'www.al.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article_author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\r\n    timezone: 'EST',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwThepennyhoarderComExtractor = {\r\n  domain: 'www.thepennyhoarder.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['link[rel=\"author\"]', 'title']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['.post-img', '.post-text'],\r\n      '.post-text',\r\n      '.single-post-content-inner',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwWesternjournalismComExtractor = {\r\n  domain: 'www.westernjournalism.com',\r\n\r\n  title: {\r\n    selectors: ['title', 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-sharing.top + div'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.ad-notice-small'],\r\n  },\r\n};\r\n","export const WwwAmericanowComExtractor = {\r\n  domain: 'www.americanow.com',\r\n\r\n  title: {\r\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.article-content', '.image', '.body'], '.body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\r\n  },\r\n};\r\n","export const ScienceflyComExtractor = {\r\n  domain: 'sciencefly.com',\r\n\r\n  title: {\r\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.cb-author', 'div.cb-author-title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.theiaPostSlider_slides'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const HellogigglesComExtractor = {\r\n  domain: 'hellogiggles.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.byline-wrapper span.author_name', '.author-link'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[property=\"article:published_time\"]', 'content'],\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.main-content', '.entry-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ThoughtcatalogComExtractor = {\r\n  domain: 'thoughtcatalog.com',\r\n\r\n  title: {\r\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'cite a',\r\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\r\n      'h1.writer-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry.post'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.tc_mark', 'figcaption'],\r\n  },\r\n};\r\n","export const WwwInquisitrComExtractor = {\r\n  domain: 'www.inquisitr.com',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title.story--header--title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.story--header--author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.story', '.entry-content.'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.post-category',\r\n      '.story--header--socials',\r\n      '.story--header--content',\r\n    ],\r\n  },\r\n};\r\n","export const WwwNbcnewsComExtractor = {\r\n  domain: 'www.nbcnews.com',\r\n\r\n  title: {\r\n    selectors: ['div.article-hero-headline h1', 'div.article-hed h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.article-inline-byline span.byline-name',\r\n      'span.byline_author',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published\"]', 'value'],\r\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\r\n      '.flag_article-wrapper time',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body__content', 'div.article-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const FortuneComExtractor = {\r\n  domain: 'fortune.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.MblGHNMJ'],\r\n\r\n    timezone: 'UTC',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['picture', 'article.row'], 'article.row'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwLinkedinComExtractor = {\r\n  domain: 'www.linkedin.com',\r\n\r\n  title: {\r\n    selectors: ['.article-title', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.main-author-card h3',\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      '.entity-name a[rel=author]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      '.base-main-card__metadata',\r\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\r\n    ],\r\n\r\n    timezone: 'America/Los_Angeles',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.article-content__body',\r\n      ['header figure', '.prose'],\r\n      '.prose',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.entity-image'],\r\n  },\r\n};\r\n","export const ObamawhitehouseArchivesGovExtractor = {\r\n  domain: 'obamawhitehouse.archives.gov',\r\n\r\n  supportedDomains: ['whitehouse.gov'],\r\n\r\n  title: {\r\n    selectors: ['h1', '.pane-node-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.blog-author-link', '.node-person-name-link'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.field-name-field-forall-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    defaultCleaner: false,\r\n\r\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\r\n  },\r\n};\r\n","export const WwwOpposingviewsComExtractor = {\r\n  domain: 'www.opposingviews.com',\r\n\r\n  title: {\r\n    selectors: ['h1.m-detail-header--title', 'h1.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value'], 'div.date span span a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"published\"]', 'value'],\r\n      ['meta[name=\"publish_date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.m-detail--body', '.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.show-for-small-only'],\r\n  },\r\n};\r\n","export const WwwProspectmagazineCoUkExtractor = {\r\n  domain: 'www.prospectmagazine.co.uk',\r\n\r\n  title: {\r\n    selectors: ['.blog-header__title', '.page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.blog-header__author-link', '.aside_author .title'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], '.post-info'],\r\n\r\n    timezone: 'Europe/London',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.blog-header__description', '.page-subtitle'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.blog__container', 'article .post_content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ForwardComExtractor = {\r\n  domain: 'forward.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      '.post-author a',\r\n      '.author-name',\r\n      ['meta[name=\"sailthru.author\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['meta[name=\"date\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      '.content-container article',\r\n      ['.post-item-media-wrap', '.post-item p'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.post-author', '.donate-box', '.message', '.subtitle'],\r\n  },\r\n};\r\n","export const WwwQdailyComExtractor = {\r\n  domain: 'www.qdaily.com',\r\n\r\n  title: {\r\n    selectors: ['h2', 'h2.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.date.smart-date', 'data-origindate']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.excerpt'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['.article-detail-hd img', 'src']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.detail'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\r\n  },\r\n};\r\n","export const GothamistComExtractor = {\r\n  domain: 'gothamist.com',\r\n\r\n  supportedDomains: [\r\n    'chicagoist.com',\r\n    'laist.com',\r\n    'sfist.com',\r\n    'shanghaiist.com',\r\n    'dcist.com',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['h1', '.entry-header h1'],\r\n  },\r\n\r\n  author: {\r\n    // There are multiple article-metadata and byline-author classes, but the main article's is the 3rd child of the l-container class\r\n    selectors: ['.article-metadata:nth-child(3) .byline-author', '.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      'abbr',\r\n      'abbr.published',\r\n    ],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [null],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article-body', '.entry-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div.image-none': 'figure',\r\n      '.image-none i': 'figcaption',\r\n      'div.image-left': 'figure',\r\n      '.image-left i': 'figcaption',\r\n      'div.image-right': 'figure',\r\n      '.image-right i': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.image-none br',\r\n      '.image-left br',\r\n      '.image-right br',\r\n      '.galleryEase',\r\n    ],\r\n  },\r\n};\r\n","export const WwwFoolComExtractor = {\r\n  domain: 'www.fool.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      '.author-inline .author-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"date\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value'], 'header h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.tailwind-article-body', '.article-content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      '.caption img': $node => {\r\n        const src = $node.attr('src');\r\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\r\n      },\r\n      '.caption': 'figcaption',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['#pitch'],\r\n  },\r\n};\r\n","export const WwwSlateComExtractor = {\r\n  domain: 'www.slate.com',\r\n\r\n  title: {\r\n    selectors: ['.hed', 'h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[rel=author]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.pub-date'],\r\n\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.dek'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.about-the-author',\r\n      '.pullquote',\r\n      '.newsletter-signup-component',\r\n      '.top-comment',\r\n    ],\r\n  },\r\n};\r\n","export const IciRadioCanadaCaExtractor = {\r\n  domain: 'ici.radio-canada.ca',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\r\n    format: 'YYYY-MM-DD|HH[h]mm',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div.lead-container', '.bunker-component.lead'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'section.document-content-style',\r\n      ['.main-multimedia-item', '.news-story-content'],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwFortinetComExtractor = {\r\n  domain: 'www.fortinet.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.b15-blog-meta__author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\r\n    ],\r\n\r\n    transforms: {\r\n      noscript: $node => {\r\n        const $children = $node.children();\r\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\r\n          return 'figure';\r\n        }\r\n        return null;\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const WwwFastcompanyComExtractor = {\r\n  domain: 'www.fastcompany.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.post__deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.post__article'],\r\n  },\r\n};\r\n","export const BlisterreviewComExtractor = {\r\n  domain: 'blisterreview.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time.entry-date', 'datetime'],\r\n      ['meta[itemprop=\"datePublished\"]', 'content'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      ['meta[itemprop=\"image\"]', 'content'],\r\n      ['meta[name=\"twitter:image\"]', 'content'],\r\n      ['img.attachment-large', 'src'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      [\r\n        '.elementor-section-wrap',\r\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\r\n      ],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      figcaption: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.comments-area'],\r\n  },\r\n};\r\n","export const NewsMynaviJpExtractor = {\r\n  domain: 'news.mynavi.jp',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'a.articleHeader_name',\r\n      'main div.article-author a.article-author__name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article-body', 'main article div'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      img: $node => {\r\n        const src = $node.attr('data-original');\r\n        if (src !== '') {\r\n          $node.attr('src', src);\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ClinicaltrialsGovExtractor = {\r\n  domain: 'clinicaltrials.gov',\r\n\r\n  title: {\r\n    selectors: ['h1.tr-solo_record'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div#sponsor.tr-info-text'],\r\n  },\r\n\r\n  date_published: {\r\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\r\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#tab-body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['.usa-alert> img'],\r\n  },\r\n};\r\n","export const GithubComExtractor = {\r\n  domain: 'github.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      // enter author selectors\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['relative-time[datetime]', 'datetime'],\r\n      ['span[itemprop=\"dateModified\"] relative-time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      ['meta[name=\"description\"]', 'value'],\r\n      'span[itemprop=\"about\"]',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['#readme article']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRedditComExtractor = {\r\n  domain: 'www.reddit.com',\r\n\r\n  title: {\r\n    selectors: [\r\n      'div[data-test-id=\"post-content\"] h1',\r\n      'div[data-test-id=\"post-content\"] h2',\r\n    ],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      'div[data-test-id=\"post-content\"] span[data-click-id=\"timestamp\"]',\r\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      ['div[data-test-id=\"post-content\"] p'], // text post\r\n      [\r\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\r\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\r\n      ], // external link with media preview (YouTube, imgur album, etc...)\r\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\r\n      ['div[data-test-id=\"post-content\"] a'], // external link\r\n      'div[data-test-id=\"post-content\"]',\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'div[role=\"img\"]': $node => {\r\n        // External link image preview\r\n        const $img = $node.find('img');\r\n        const bgImg = $node.css('background-image');\r\n        if ($img.length === 1 && bgImg) {\r\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\r\n          return $img;\r\n        }\r\n        return $node;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.icon',\r\n      'span[id^=\"PostAwardBadges\"]',\r\n      'div a[data-test-id=\"comments-page-link-num-comments\"]',\r\n    ],\r\n  },\r\n};\r\n","export const OtrsComExtractor = {\r\n  domain: 'otrs.com',\r\n\r\n  title: {\r\n    selectors: ['#main article h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.dateplusauthor a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main article'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [\r\n      'div.dateplusauthor',\r\n      'div.gr-12.push-6.footershare',\r\n      '#atftbx',\r\n      'div.category-modul',\r\n    ],\r\n  },\r\n};\r\n","export const WwwOssnewsJpExtractor = {\r\n  domain: 'www.ossnews.jp',\r\n\r\n  title: {\r\n    selectors: ['#alpha-block h1.hxnewstitle'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.fs12'],\r\n    format: 'YYYY年MM月DD日 HH:mm',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const BuzzapJpExtractor = {\r\n  domain: 'buzzap.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['time.entry-date', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.ctiframe'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwAsahiComExtractor = {\r\n  domain: 'www.asahi.com',\r\n\r\n  title: {\r\n    selectors: ['main h1', '.ArticleTitle h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  excerpt: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['main'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['div.AdMod', 'div.LoginSelectArea', 'time', 'div.notPrint'],\r\n  },\r\n};\r\n","export const WwwSanwaCoJpExtractor = {\r\n  domain: 'www.sanwa.co.jp',\r\n\r\n  title: {\r\n    selectors: ['#newsContent h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['dl.date'],\r\n    format: 'YYYY.MM.DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#newsContent'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\r\n  },\r\n};\r\n","export const WwwElecomCoJpExtractor = {\r\n  domain: 'www.elecom.co.jp',\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.section-last'],\r\n    format: 'YYYY.MM.DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['td.TableMain2'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {\r\n      table: $node => {\r\n        $node.attr('width', 'auto');\r\n      },\r\n    },\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const ScanNetsecurityNeJpExtractor = {\r\n  domain: 'scan.netsecurity.ne.jp',\r\n\r\n  title: {\r\n    selectors: ['header.arti-header h1.head'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['header.arti-header p.arti-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.arti-content.arti-content--thumbnail'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['aside.arti-giga'],\r\n  },\r\n};\r\n","export const JvndbJvnJpExtractor = {\r\n  domain: 'jvndb.jvn.jp',\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['div.modifytxt:nth-child(2)'],\r\n    format: 'YYYY/MM/DD',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['#news-list'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const GeniusComExtractor = {\r\n  domain: 'genius.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['h2 a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      [\r\n        'meta[itemprop=page_data]',\r\n        'value',\r\n        res => {\r\n          const json = JSON.parse(res);\r\n          return json.song.release_date;\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      [\r\n        'meta[itemprop=page_data]',\r\n        'value',\r\n        res => {\r\n          const json = JSON.parse(res);\r\n          return json.song.album.cover_art_url;\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.lyrics'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwJnsaOrgExtractor = {\r\n  domain: 'www.jnsa.org',\r\n\r\n  title: {\r\n    selectors: ['#wgtitle h2'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: null,\r\n\r\n  dek: null,\r\n\r\n  excerpt: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main_area'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#pankuzu', '#side'],\r\n  },\r\n};\r\n","export const PhpspotOrgExtractor = {\r\n  domain: 'phpspot.org',\r\n\r\n  title: {\r\n    selectors: ['h3.hl'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['h4.hl'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['div.entrybody'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwInfoqComExtractor = {\r\n  domain: 'www.infoq.com',\r\n\r\n  title: {\r\n    selectors: ['h1.heading'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.widget.article__authors'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.article__readTime.date'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article__data'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwMoongiftJpExtractor = {\r\n  domain: 'www.moongift.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.title a'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['ul.meta li:not(.social):first-of-type'],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#main'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['ul.mg_service.cf'],\r\n  },\r\n};\r\n","export const WwwItmediaCoJpExtractor = {\r\n  domain: 'www.itmedia.co.jp',\r\n\r\n  supportedDomains: [\r\n    'www.atmarkit.co.jp',\r\n    'techtarget.itmedia.co.jp',\r\n    'nlab.itmedia.co.jp',\r\n  ],\r\n\r\n  title: {\r\n    selectors: ['#cmsTitle h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['#byline'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['#cmsAbstract h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#cmsBody'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#snsSharebox'],\r\n  },\r\n};\r\n","export const WwwPublickey1JpExtractor = {\r\n  domain: 'www.publickey1.jp',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.bloggerinchief p:first-of-type', '#subcol p:has(img)'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['div.pubdate'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['#maincol'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\r\n  },\r\n};\r\n","export const TakagihiromitsuJpExtractor = {\r\n  domain: 'takagi-hiromitsu.jp',\r\n\r\n  title: {\r\n    selectors: ['h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['div.body'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const BookwalkerJpExtractor = {\r\n  domain: 'bookwalker.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.p-main__title', 'h1.main-heading'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div.p-author__list', 'div.authors'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      'dl.p-information__data dd:nth-of-type(7)',\r\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\r\n    ],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div.p-main__information',\r\n      ['div.main-info', 'div.main-cover-inner'],\r\n    ],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: [\r\n      'span.label.label--trial',\r\n      'dt.info-head.info-head--coin',\r\n      'dd.info-contents.info-contents--coin',\r\n      'div.info-notice.fn-toggleClass',\r\n    ],\r\n  },\r\n};\r\n","export const WwwYomiuriCoJpExtractor = {\r\n  domain: 'www.yomiuri.co.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.title-article.c-article-title'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.p-main-contents'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const JapanCnetComExtractor = {\r\n  domain: 'japan.cnet.com',\r\n\r\n  title: {\r\n    selectors: ['.leaf-headline-ttl'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.writer'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.date'],\r\n    format: 'YYYY年MM月DD日 HH時mm分',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article_body'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const DeadlineComExtractor = {\r\n  domain: 'deadline.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['section.author h2'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\r\n\r\n    transforms: {\r\n      '.embed-twitter': $node => {\r\n        const innerHtml = $node.html();\r\n        $node.replaceWith(innerHtml);\r\n      },\r\n    },\r\n\r\n    clean: ['figcaption'],\r\n  },\r\n};\r\n","export const WwwGizmodoJpExtractor = {\r\n  domain: 'www.gizmodo.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.p-post-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['li.p-post-AssistAuthor'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.p-post'],\r\n\r\n    transforms: {\r\n      'img.p-post-thumbnailImage': $node => {\r\n        const src = $node.attr('src');\r\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\r\n      },\r\n    },\r\n\r\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\r\n  },\r\n};\r\n","export const GetnewsJpExtractor = {\r\n  domain: 'getnews.jp',\r\n\r\n  title: {\r\n    selectors: ['article h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.prof'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['ul.cattag-top time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.post-bodycopy'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwLifehackerJpExtractor = {\r\n  domain: 'www.lifehacker.jp',\r\n\r\n  title: {\r\n    selectors: ['h1[class^=\"article_pArticle_Title\"]', 'h1.lh-summary-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"author\"]', 'value'],\r\n      'p.lh-entryDetailInner--credit',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['div.lh-entryDetail-header time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div[class^=\"article_pArticle_Body__\"]',\r\n      'div.lh-entryDetail-body',\r\n    ],\r\n\r\n    transforms: {\r\n      'img.lazyload': $node => {\r\n        const src = $node.attr('src');\r\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\r\n      },\r\n    },\r\n\r\n    clean: ['p.lh-entryDetailInner--credit'],\r\n  },\r\n};\r\n","export const SectIijAdJpExtractor = {\r\n  domain: 'sect.iij.ad.jp',\r\n\r\n  title: {\r\n    selectors: ['div.title-box-inner h1', 'h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.post-author a', 'dl.entrydate dd'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n    format: 'YYYY年MM月DD日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.entry-inner', '#article'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['dl.entrydate'],\r\n  },\r\n};\r\n","export const WwwOreillyCoJpExtractor = {\r\n  domain: 'www.oreilly.co.jp',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h3'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=\"author\"]', 'li[itemprop=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['dd[itemprop=\"datePublished\"]', 'content'],\r\n      ['meta[itemprop=\"datePublished\"]', 'value'],\r\n    ],\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image:secure_url\"]', 'value'],\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['section.detail', '#content'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.social-tools'],\r\n  },\r\n};\r\n","export const WwwIpaGoJpExtractor = {\r\n  domain: 'www.ipa.go.jp',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: {\r\n    selectors: ['p.ipar_text_right'],\r\n    format: 'YYYY年M月D日',\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['#ipar_main'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['p.ipar_text_right'],\r\n  },\r\n};\r\n","export const WeeklyAsciiJpExtractor = {\r\n  domain: 'weekly.ascii.jp',\r\n\r\n  title: {\r\n    selectors: ['article h1', 'h1[itemprop=\"headline\"]'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['p.author'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['p.date', ['meta[name=\"odate\"]', 'value']],\r\n\r\n    format: 'YYYY年MM月DD日 HH:mm',\r\n\r\n    timezone: 'Asia/Tokyo',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#contents_detail', 'div.article'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const TechlogIijAdJpExtractor = {\r\n  domain: 'techlog.iij.ad.jp',\r\n\r\n  title: {\r\n    selectors: ['h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a[rel=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['time.entry-date', 'datetime']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.entry-content'],\r\n\r\n    defaultCleaner: false,\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.wp_social_bookmarking_light'],\r\n  },\r\n};\r\n","import URL from 'url';\r\n\r\nexport const WiredJpExtractor = {\r\n  domain: 'wired.jp',\r\n\r\n  title: {\r\n    selectors: ['h1[data-testid=\"ContentHeaderHed\"]', 'h1.post-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      'p[itemprop=\"author\"]',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['meta[name=\"article:published_time\"]', 'value'],\r\n      ['time', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[class^=\"ContentHeaderDek\"]', '.post-intro'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      'div[data-attribute-verso-pattern=\"article-body\"]',\r\n      'article.article-detail',\r\n    ],\r\n\r\n    transforms: {\r\n      'img[data-original]': $node => {\r\n        const dataOriginal = $node.attr('data-original');\r\n        const src = $node.attr('src');\r\n        const url = URL.resolve(src, dataOriginal);\r\n        $node.attr('src', url);\r\n      },\r\n    },\r\n\r\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\r\n  },\r\n};\r\n","export const JapanZdnetComExtractor = {\r\n  domain: 'japan.zdnet.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article_body'],\r\n\r\n    transforms: {},\r\n\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwRbbtodayComExtractor = {\r\n  domain: 'www.rbbtoday.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.writer.writer-name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['header time', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value'], '.arti-summary'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.arti-content'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['.arti-giga'],\r\n  },\r\n};\r\n","export const WwwLemondeFrExtractor = {\r\n  domain: 'www.lemonde.fr',\r\n\r\n  title: {\r\n    selectors: ['h1.article__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.article__desc'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.article__content'],\r\n\r\n    transforms: {},\r\n\r\n    clean: ['figcaption'],\r\n  },\r\n};\r\n","export const WwwPhoronixComExtractor = {\r\n  domain: 'www.phoronix.com',\r\n\r\n  title: {\r\n    selectors: ['article h1', 'article header'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.author a:first-child'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.author'],\r\n    // 1 June 2019 at 08:34 PM EDT\r\n    format: 'D MMMM YYYY at hh:mm',\r\n    timezone: 'America/New_York',\r\n  },\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['.content'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const PitchforkComExtractor = {\r\n  domain: 'pitchfork.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      ['meta[name=\"article:author\"]', 'value'],\r\n      '.authors-detail__display-name',\r\n    ],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['div[class^=\"InfoSliceWrapper-\"]', ['.pub-date', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [\r\n      ['meta[name=\"og:description\"]', 'value'],\r\n      '.review-detail__abstract',\r\n    ],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      ['.single-album-tombstone__art img', 'src'],\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.body__inner-container', '.review-detail__text'],\r\n  },\r\n\r\n  extend: {\r\n    score: {\r\n      selectors: ['p[class*=\"Rating\"]', '.score'],\r\n    },\r\n  },\r\n};\r\n","export const BiorxivOrgExtractor = {\r\n  domain: 'biorxiv.org',\r\n\r\n  title: {\r\n    selectors: ['h1#page-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: [\r\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div#abstract-1'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const EpaperZeitDeExtractor = {\r\n  domain: 'epaper.zeit.de',\r\n\r\n  title: {\r\n    selectors: ['p.title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.article__author'],\r\n  },\r\n\r\n  date_published: null,\r\n\r\n  excerpt: {\r\n    selectors: ['subtitle'],\r\n  },\r\n\r\n  lead_image_url: null,\r\n\r\n  content: {\r\n    selectors: ['.article'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      'p.title': 'h1',\r\n      '.article__author': 'p',\r\n      byline: 'p',\r\n      linkbox: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['image-credits', 'box[type=citation]'],\r\n  },\r\n};\r\n","export const WwwLadbibleComExtractor = {\r\n  domain: 'www.ladbible.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['[class*=Byline]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['time'],\r\n    timezone: 'Europe/London',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['[class*=ArticleContainer]'],\r\n    clean: [\r\n      'time',\r\n      'source',\r\n      'a[href^=\"https://www.ladbible.com/\"]',\r\n      'picture',\r\n      '[class*=StyledCardBlock]',\r\n    ],\r\n  },\r\n};\r\n","export const TimesofindiaIndiatimesComExtractor = {\r\n  domain: 'timesofindia.indiatimes.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  extend: {\r\n    reporter: {\r\n      selectors: ['div.byline'],\r\n      transforms: {},\r\n    },\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.byline'],\r\n    format: 'MMM D, YYYY, HH:mm z',\r\n    timezone: 'Asia/Kolkata',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.contentwrapper:has(section)'],\r\n    defaultCleaner: false,\r\n\r\n    clean: [\r\n      'section',\r\n      'h1',\r\n      '.byline',\r\n      '.img_cptn',\r\n      '.icon_share_wrap',\r\n      'ul[itemtype=\"https://schema.org/BreadcrumbList\"]',\r\n    ],\r\n  },\r\n};\r\n","export const MaTtiasBeExtractor = {\r\n  domain: 'ma.ttias.be',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"twitter:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: [['.content']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: $node => {\r\n        // The \"id\" attribute values would result in low scores and the element being\r\n        // removed.\r\n        $node.attr('id', null);\r\n\r\n        // h1 elements will be demoted to h2, so demote h2 elements to h3.\r\n        return 'h3';\r\n      },\r\n      h1: $node => {\r\n        // The \"id\" attribute values would result in low scores and the element being\r\n        // removed.\r\n        $node.attr('id', null);\r\n\r\n        // A subsequent h2 will be removed if there is not a paragraph before it, so\r\n        // add a paragraph here. It will be removed anyway because it is empty.\r\n        $node.after('<p></p>');\r\n      },\r\n      ul: $node => {\r\n        // Articles contain lists of links which look like, but are not, navigation\r\n        // elements. Adding this class attribute avoids them being incorrectly removed.\r\n        $node.attr('class', 'entry-content-asset');\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const PastebinComExtractor = {\r\n  domain: 'pastebin.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.username', '.paste_box_line2 .t_us + a'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.date', '.paste_box_line2 .t_da + span'],\r\n    timezone: 'America/New_York',\r\n    format: 'MMMM D, YYYY',\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.source', '#selectable .text'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      ol: 'div',\r\n      li: 'p',\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable no-unused-expressions */\r\nexport const WwwAbendblattDeExtractor = {\r\n  domain: 'www.abendblatt.de',\r\n\r\n  title: {\r\n    selectors: ['h2.article__header__headline'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span.author-info__name-text'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [\r\n      ['time.teaser-stream-time', 'datetime'],\r\n      ['time.article__header__date', 'datetime'],\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div.article__body'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      p: $node => {\r\n        if (!$node.hasClass('obfuscated')) return null;\r\n        let o = '';\r\n        let n = 0;\r\n        for (let i = $node.text(); n < i.length; n += 1) {\r\n          const r = i.charCodeAt(n);\r\n          r === 177\r\n            ? (o += '%')\r\n            : r === 178\r\n            ? (o += '!')\r\n            : r === 180\r\n            ? (o += ';')\r\n            : r === 181\r\n            ? (o += '=')\r\n            : r === 32\r\n            ? (o += ' ')\r\n            : r === 10\r\n            ? (o += '\\n')\r\n            : r > 33 && (o += String.fromCharCode(r - 1));\r\n        }\r\n\r\n        $node.html(o);\r\n        $node.removeClass('obfuscated');\r\n        $node.addClass('deobfuscated');\r\n        return null;\r\n      },\r\n      div: $node => {\r\n        if (!$node.hasClass('obfuscated')) return null;\r\n        let o = '';\r\n        let n = 0;\r\n        for (let i = $node.text(); n < i.length; n += 1) {\r\n          const r = i.charCodeAt(n);\r\n          r === 177\r\n            ? (o += '%')\r\n            : r === 178\r\n            ? (o += '!')\r\n            : r === 180\r\n            ? (o += ';')\r\n            : r === 181\r\n            ? (o += '=')\r\n            : r === 32\r\n            ? (o += ' ')\r\n            : r === 10\r\n            ? (o += '\\n')\r\n            : r > 33 && (o += String.fromCharCode(r - 1));\r\n        }\r\n\r\n        $node.html(o);\r\n        $node.removeClass('obfuscated');\r\n        $node.addClass('deobfuscated');\r\n        return null;\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const WwwGrueneDeExtractor = {\r\n  domain: 'www.gruene.de',\r\n\r\n  title: {\r\n    selectors: ['header h1'],\r\n  },\r\n\r\n  author: null,\r\n\r\n  date_published: null,\r\n\r\n  dek: null,\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[property=\"og:image\"]', 'content']],\r\n  },\r\n\r\n  content: {\r\n    // selectors: ['section'],\r\n    selectors: [['section header', 'section h2', 'section p', 'section ol']],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: ['figcaption', 'p[class]'],\r\n  },\r\n};\r\n","export const WwwEngadgetComExtractor = {\r\n  domain: 'www.engadget.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['a.th-meta[data-ylk*=\"subsec:author\"]'],\r\n  },\r\n\r\n  // Engadget stories have publish dates, but the only representation of them on the page\r\n  // is in a format like \"2h ago\". There are also these tags with blank values:\r\n  // <meta class=\"swiftype\" name=\"published_at\" data-type=\"date\" value=\"\">\r\n  date_published: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['div[class*=\"o-title_mark\"] div'],\r\n  },\r\n\r\n  // Engadget stories do have lead images specified by an og:image meta tag, but selecting\r\n  // the value attribute of that tag fails. I believe the \"&#x2111;\" sequence of characters\r\n  // is triggering this inability to select the attribute value.\r\n  lead_image_url: {\r\n    selectors: [\r\n      // enter selectors\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: [\r\n      [\r\n        // Some figures will be inside div.article-text, but some header figures/images\r\n        // will not.\r\n        '#page_body figure:not(div.article-text figure)',\r\n        'div.article-text',\r\n      ],\r\n    ],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","export const ArstechnicaComExtractor = {\r\n  domain: 'arstechnica.com',\r\n\r\n  // Articles from this site are often paginated, but I was unable to write a CSS\r\n  // selector to find the next page. On the last page, there will be a link with a CSS\r\n  // selector indicating that the previous page is next. But the parser appears to find\r\n  // the next page without this extractor finding it, as long as the fallback option is\r\n  // left at its default value of true.\r\n\r\n  title: {\r\n    selectors: ['title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['*[rel=\"author\"] *[itemprop=\"name\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.byline time', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2[itemprop=\"description\"]'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=\"articleBody\"]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      h2: $node => {\r\n        // Some pages have an element h2 that is significant, and that the parser will\r\n        // remove if not following a paragraph. Adding this empty paragraph fixes it, and\r\n        // the empty paragraph will be removed anyway.\r\n        $node.before('<p></p>');\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result.\r\n    clean: [\r\n      // Remove enlarge links and separators inside image captions.\r\n      'figcaption .enlarge-link',\r\n      'figcaption .sep',\r\n\r\n      // I could not transform the video into usable elements, so I\r\n      // removed them.\r\n      'figure.video',\r\n\r\n      // Image galleries that do not work.\r\n      '.gallery',\r\n\r\n      'aside',\r\n      '.sidebar',\r\n    ],\r\n  },\r\n};\r\n","export const WwwNdtvComExtractor = {\r\n  domain: 'www.ndtv.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['span[itemprop=\"author\"] span[itemprop=\"name\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['span[itemprop=\"dateModified\"]', 'content']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['div[itemprop=\"articleBody\"]'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {\r\n      // This site puts a dateline in a 'b' above the first paragraph, and then somehow\r\n      // blends it into the first paragraph with CSS. This transform moves the dateline\r\n      // to the first paragraph.\r\n      '.place_cont': $node => {\r\n        if (!$node.parents('p').length) {\r\n          const nextSibling = $node.next('p');\r\n          if (nextSibling) {\r\n            $node.remove();\r\n            nextSibling.prepend($node);\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      '.highlghts_Wdgt',\r\n      '.ins_instory_dv_caption',\r\n      'input',\r\n      '._world-wrapper .mt20',\r\n    ],\r\n  },\r\n};\r\n","export const SpektrumExtractor = {\r\n  domain: 'www.spektrum.de',\r\n\r\n  title: {\r\n    selectors: ['.content__title'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.content__author__info__name'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: ['.content__meta__date'],\r\n    timezone: 'Europe/Berlin',\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.content__intro'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [\r\n      // This is how the meta tag appears in the original source code.\r\n      ['meta[name=\"og:image\"]', 'value'],\r\n      // This is how the meta tag appears in the DOM in Chrome.\r\n      // The selector is included here to make the code work within the browser as well.\r\n      ['meta[property=\"og:image\"]', 'content'],\r\n      // This is the image that is shown on the page.\r\n      // It can be slightly cropped compared to the original in the meta tag.\r\n      '.image__article__top img',\r\n    ],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['article.content'],\r\n    clean: [\r\n      '.breadcrumbs',\r\n      '.hide-for-print',\r\n      'aside',\r\n      'header h2',\r\n      '.image__article__top',\r\n      '.content__author',\r\n      '.copyright',\r\n      '.callout-box',\r\n    ],\r\n  },\r\n};\r\n","export const PostlightComExtractor = {\r\n  domain: 'postlight.com',\r\n\r\n  title: {\r\n    selectors: [['meta[name=\"og:title\"]', 'value']],\r\n  },\r\n\r\n  author: {\r\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['h2.single-hero__abstract'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['main.post'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [\r\n      'section.pl-post-link',\r\n      'aside',\r\n      'section.insights_featured_case_studies',\r\n    ],\r\n  },\r\n};\r\n","export const WwwInvestmentexecutiveComExtractor = {\r\n  domain: 'www.investmentexecutive.com',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['div[itemprop=\"author\"]'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: [['meta[name=\"og:description\"]', 'value']],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['section.article-body'],\r\n\r\n    clean: ['.hidden'],\r\n  },\r\n};\r\n","export const WwwCbcCaExtractor = {\r\n  domain: 'www.cbc.ca',\r\n\r\n  title: {\r\n    selectors: ['h1'],\r\n  },\r\n\r\n  author: {\r\n    selectors: ['.authorText', '.bylineDetails'],\r\n  },\r\n\r\n  date_published: {\r\n    selectors: [['.timeStamp[datetime]', 'datetime']],\r\n  },\r\n\r\n  dek: {\r\n    selectors: ['.deck'],\r\n  },\r\n\r\n  lead_image_url: {\r\n    selectors: [['meta[name=\"og:image\"]', 'value']],\r\n  },\r\n\r\n  content: {\r\n    selectors: ['.story'],\r\n\r\n    // Is there anything in the content you selected that needs transformed\r\n    // before it's consumable content? E.g., unusual lazy loaded images\r\n    transforms: {},\r\n\r\n    // Is there anything that is in the result that shouldn't be?\r\n    // The clean selectors will remove anything that matches from\r\n    // the result\r\n    clean: [],\r\n  },\r\n};\r\n","import mergeSupportedDomains from 'utils/merge-supported-domains';\r\nimport * as CustomExtractors from './custom/index';\r\n\r\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\r\n  const extractor = CustomExtractors[key];\r\n  return {\r\n    ...acc,\r\n    ...mergeSupportedDomains(extractor),\r\n  };\r\n}, {});\r\n","// CLEAN AUTHOR CONSTANTS\r\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\r\n\r\n// CLEAN DEK CONSTANTS\r\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\r\n// An ordered list of meta tag names that denote likely article deks.\r\n// From most distinct to least distinct.\r\n//\r\n// NOTE: There are currently no meta tags that seem to provide the right\r\n// content consistenty enough. Two options were:\r\n//  - og:description\r\n//  - dc.description\r\n// However, these tags often have SEO-specific junk in them that's not\r\n// header-worthy like a dek is. Excerpt material at best.\r\nexport const DEK_META_TAGS = [];\r\n\r\n// An ordered list of Selectors to find likely article deks. From\r\n// most explicit to least explicit.\r\n//\r\n// Should be more restrictive than not, as a failed dek can be pretty\r\n// detrimental to the aesthetics of an article.\r\nexport const DEK_SELECTORS = ['.entry-summary'];\r\n\r\n// CLEAN DATE PUBLISHED CONSTANTS\r\nexport const MS_DATE_STRING = /^\\d{13}$/i;\r\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\r\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\r\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\r\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\r\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\r\nconst timeUnits = [\r\n  'seconds?',\r\n  'minutes?',\r\n  'hours?',\r\n  'days?',\r\n  'weeks?',\r\n  'months?',\r\n  'years?',\r\n];\r\nconst allTimeUnits = timeUnits.join('|');\r\nexport const TIME_AGO_STRING = new RegExp(\r\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\r\n  'i'\r\n);\r\nconst months = [\r\n  'jan',\r\n  'feb',\r\n  'mar',\r\n  'apr',\r\n  'may',\r\n  'jun',\r\n  'jul',\r\n  'aug',\r\n  'sep',\r\n  'oct',\r\n  'nov',\r\n  'dec',\r\n];\r\nconst allMonths = months.join('|');\r\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\r\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\r\nconst timestamp3 = '-[0-9]{3,4}$';\r\nexport const SPLIT_DATE_STRING = new RegExp(\r\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\r\n  'ig'\r\n);\r\n\r\n// 2016-11-22T08:57-500\r\n// Check if datetime string has an offset at the end\r\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\r\n\r\n// CLEAN TITLE CONSTANTS\r\n// A regular expression that will match separating characters on a\r\n// title, that usually denote breadcrumbs or something similar.\r\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\r\n\r\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\r\n","import { normalizeSpaces } from 'utils/text';\r\nimport { CLEAN_AUTHOR_RE } from './constants';\r\n\r\n// Take an author string (like 'By David Smith ') and clean it to\r\n// just the name(s): 'David Smith'.\r\nexport default function cleanAuthor(author) {\r\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\r\n}\r\n","import validUrl from 'valid-url';\r\n\r\nexport default function clean(leadImageUrl) {\r\n  leadImageUrl = leadImageUrl.trim();\r\n  if (validUrl.isWebUri(leadImageUrl)) {\r\n    return leadImageUrl;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\nimport { excerptContent, normalizeSpaces } from 'utils/text';\r\n\r\nimport { TEXT_LINK_RE } from './constants';\r\n\r\n// Take a dek HTML fragment, and return the cleaned version of it.\r\n// Return None if the dek wasn't good enough.\r\nexport default function cleanDek(dek, { $, excerpt }) {\r\n  // Sanity check that we didn't get too short or long of a dek.\r\n  if (dek.length > 1000 || dek.length < 5) return null;\r\n\r\n  // Check that dek isn't the same as excerpt\r\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\r\n    return null;\r\n\r\n  const dekText = stripTags(dek, $);\r\n\r\n  // Plain text links shouldn't exist in the dek. If we have some, it's\r\n  // not a good dek - bail.\r\n  if (TEXT_LINK_RE.test(dekText)) return null;\r\n\r\n  return normalizeSpaces(dekText.trim());\r\n}\r\n","import moment from 'moment-timezone';\r\nimport parseFormat from 'moment-parseformat';\r\n// Is there a compelling reason to use moment here?\r\n// Mostly only being used for the isValid() method,\r\n// but could just check for 'Invalid Date' string.\r\n\r\nimport {\r\n  MS_DATE_STRING,\r\n  SEC_DATE_STRING,\r\n  CLEAN_DATE_STRING_RE,\r\n  SPLIT_DATE_STRING,\r\n  TIME_AGO_STRING,\r\n  TIME_NOW_STRING,\r\n  TIME_MERIDIAN_SPACE_RE,\r\n  TIME_MERIDIAN_DOTS_RE,\r\n  TIME_WITH_OFFSET_RE,\r\n} from './constants';\r\n\r\nexport function cleanDateString(dateString) {\r\n  return (dateString.match(SPLIT_DATE_STRING) || [])\r\n    .join(' ')\r\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\r\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\r\n    .replace(CLEAN_DATE_STRING_RE, '$1')\r\n    .trim();\r\n}\r\n\r\nexport function createDate(dateString, timezone, format) {\r\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\r\n    return moment(new Date(dateString));\r\n  }\r\n\r\n  if (TIME_AGO_STRING.test(dateString)) {\r\n    const fragments = TIME_AGO_STRING.exec(dateString);\r\n    return moment().subtract(fragments[1], fragments[2]);\r\n  }\r\n\r\n  if (TIME_NOW_STRING.test(dateString)) {\r\n    return moment();\r\n  }\r\n\r\n  return timezone\r\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\r\n    : moment(dateString, format || parseFormat(dateString));\r\n}\r\n\r\n// Take a date published string, and hopefully return a date out of\r\n// it. Return none if we fail.\r\nexport default function cleanDatePublished(\r\n  dateString,\r\n  { timezone, format } = {}\r\n) {\r\n  // If string is in milliseconds or seconds, convert to int and return\r\n  if (MS_DATE_STRING.test(dateString)) {\r\n    return new Date(parseInt(dateString, 10)).toISOString();\r\n  }\r\n  if (SEC_DATE_STRING.test(dateString)) {\r\n    return new Date(parseInt(dateString, 10) * 1000).toISOString();\r\n  }\r\n\r\n  let date = createDate(dateString, timezone, format);\r\n\r\n  if (!date.isValid()) {\r\n    dateString = cleanDateString(dateString);\r\n    date = createDate(dateString, timezone, format);\r\n  }\r\n\r\n  return date.isValid() ? date.toISOString() : null;\r\n}\r\n","import {\r\n  cleanAttributes,\r\n  cleanHeaders,\r\n  cleanHOnes,\r\n  cleanImages,\r\n  cleanTags,\r\n  removeEmpty,\r\n  rewriteTopLevel,\r\n  markToKeep,\r\n  stripJunkTags,\r\n  makeLinksAbsolute,\r\n} from 'utils/dom';\r\n\r\n// Clean our article content, returning a new, cleaned node.\r\nexport default function extractCleanNode(\r\n  article,\r\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\r\n) {\r\n  // Rewrite the tag name to div if it's a top level node like body or\r\n  // html to avoid later complications with multiple body tags.\r\n  rewriteTopLevel(article, $);\r\n\r\n  // Drop small images and spacer images\r\n  // Only do this is defaultCleaner is set to true;\r\n  // this can sometimes be too aggressive.\r\n  if (defaultCleaner) cleanImages(article, $);\r\n\r\n  // Make links absolute\r\n  makeLinksAbsolute(article, $, url);\r\n\r\n  // Mark elements to keep that would normally be removed.\r\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\r\n  // YouTube/Vimeo videos as elements we want to keep.\r\n  markToKeep(article, $, url);\r\n\r\n  // Drop certain tags like <title>, etc\r\n  // This is -mostly- for cleanliness, not security.\r\n  stripJunkTags(article, $);\r\n\r\n  // H1 tags are typically the article title, which should be extracted\r\n  // by the title extractor instead. If there's less than 3 of them (<3),\r\n  // strip them. Otherwise, turn 'em into H2s.\r\n  cleanHOnes(article, $);\r\n\r\n  // Clean headers\r\n  cleanHeaders(article, $, title);\r\n\r\n  // We used to clean UL's and OL's here, but it was leading to\r\n  // too many in-article lists being removed. Consider a better\r\n  // way to detect menus particularly and remove them.\r\n  // Also optionally running, since it can be overly aggressive.\r\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\r\n\r\n  // Remove empty paragraph nodes\r\n  removeEmpty(article, $);\r\n\r\n  // Remove unnecessary attributes\r\n  cleanAttributes(article, $);\r\n\r\n  return article;\r\n}\r\n","import { stripTags } from 'utils/dom';\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nimport { TITLE_SPLITTERS_RE } from './constants';\r\nimport { resolveSplitTitle } from './index';\r\n\r\nexport default function cleanTitle(title, { url, $ }) {\r\n  // If title has |, :, or - in it, see if\r\n  // we can clean it up.\r\n  if (TITLE_SPLITTERS_RE.test(title)) {\r\n    title = resolveSplitTitle(title, url);\r\n  }\r\n\r\n  // Final sanity check that we didn't get a crazy title.\r\n  // if (title.length > 150 || title.length < 15) {\r\n  if (title.length > 150) {\r\n    // If we did, return h1 from the document if it exists\r\n    const h1 = $('h1');\r\n    if (h1.length === 1) {\r\n      title = h1.text();\r\n    }\r\n  }\r\n\r\n  // strip any html tags in the title text\r\n  return normalizeSpaces(stripTags(title, $).trim());\r\n}\r\n","import URL from 'url';\r\nimport wuzzy from 'wuzzy';\r\n\r\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\r\n\r\nfunction extractBreadcrumbTitle(splitTitle, text) {\r\n  // This must be a very breadcrumbed title, like:\r\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\r\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\r\n  if (splitTitle.length >= 6) {\r\n    // Look to see if we can find a breadcrumb splitter that happens\r\n    // more than once. If we can, we'll be able to better pull out\r\n    // the title.\r\n    const termCounts = splitTitle.reduce((acc, titleText) => {\r\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\r\n      (acc, key) => {\r\n        if (acc[1] < termCounts[key]) {\r\n          return [key, termCounts[key]];\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    // We found a splitter that was used more than once, so it\r\n    // is probably the breadcrumber. Split our title on that instead.\r\n    // Note: max_term should be <= 4 characters, so that \" >> \"\r\n    // will match, but nothing longer than that.\r\n    if (termCount >= 2 && maxTerm.length <= 4) {\r\n      splitTitle = text.split(maxTerm);\r\n    }\r\n\r\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\r\n    const longestEnd = splitEnds.reduce(\r\n      (acc, end) => (acc.length > end.length ? acc : end),\r\n      ''\r\n    );\r\n\r\n    if (longestEnd.length > 10) {\r\n      return longestEnd;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction cleanDomainFromTitle(splitTitle, url) {\r\n  // Search the ends of the title, looking for bits that fuzzy match\r\n  // the URL too closely. If one is found, discard it and return the\r\n  // rest.\r\n  //\r\n  // Strip out the big TLDs - it just makes the matching a bit more\r\n  // accurate. Not the end of the world if it doesn't strip right.\r\n  const { host } = URL.parse(url);\r\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\r\n\r\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\r\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\r\n\r\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\r\n    return splitTitle.slice(2).join('');\r\n  }\r\n\r\n  const endSlug = splitTitle\r\n    .slice(-1)[0]\r\n    .toLowerCase()\r\n    .replace(' ', '');\r\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\r\n\r\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\r\n    return splitTitle.slice(0, -2).join('');\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Given a title with separators in it (colons, dashes, etc),\r\n// resolve whether any of the segments should be removed.\r\nexport default function resolveSplitTitle(title, url = '') {\r\n  // Splits while preserving splitters, like:\r\n  // ['The New New York', ' - ', 'The Washington Post']\r\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\r\n  if (splitTitle.length === 1) {\r\n    return title;\r\n  }\r\n\r\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\r\n  if (newTitle) return newTitle;\r\n\r\n  newTitle = cleanDomainFromTitle(splitTitle, url);\r\n  if (newTitle) return newTitle;\r\n\r\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\r\n  // Just return it all.\r\n  return title;\r\n}\r\n","import cleanAuthor from './author';\r\nimport cleanImage from './lead-image-url';\r\nimport cleanDek from './dek';\r\nimport cleanDatePublished from './date-published';\r\nimport cleanContent from './content';\r\nimport cleanTitle from './title';\r\n\r\nconst Cleaners = {\r\n  author: cleanAuthor,\r\n  lead_image_url: cleanImage,\r\n  dek: cleanDek,\r\n  date_published: cleanDatePublished,\r\n  content: cleanContent,\r\n  title: cleanTitle,\r\n};\r\n\r\nexport default Cleaners;\r\n\r\nexport { cleanAuthor };\r\nexport { cleanImage };\r\nexport { cleanDek };\r\nexport { cleanDatePublished };\r\nexport { cleanContent };\r\nexport { cleanTitle };\r\nexport { default as resolveSplitTitle } from './resolve-split-title';\r\n","import { stripUnlikelyCandidates, convertToParagraphs } from 'utils/dom';\r\n\r\nimport { scoreContent, findTopCandidate } from './scoring';\r\n\r\n// Using a variety of scoring techniques, extract the content most\r\n// likely to be article text.\r\n//\r\n// If strip_unlikely_candidates is True, remove any elements that\r\n// match certain criteria first. (Like, does this element have a\r\n// classname of \"comment\")\r\n//\r\n// If weight_nodes is True, use classNames and IDs to determine the\r\n// worthiness of nodes.\r\n//\r\n// Returns a cheerio object $\r\nexport default function extractBestNode($, opts) {\r\n  if (opts.stripUnlikelyCandidates) {\r\n    $ = stripUnlikelyCandidates($);\r\n  }\r\n\r\n  $ = convertToParagraphs($);\r\n  $ = scoreContent($, opts.weightNodes);\r\n  const $topCandidate = findTopCandidate($);\r\n\r\n  return $topCandidate;\r\n}\r\n","import cheerio from 'cheerio';\r\n\r\nimport { nodeIsSufficient } from 'utils/dom';\r\nimport { cleanContent } from 'cleaners';\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nimport extractBestNode from './extract-best-node';\r\n\r\nconst GenericContentExtractor = {\r\n  defaultOpts: {\r\n    stripUnlikelyCandidates: true,\r\n    weightNodes: true,\r\n    cleanConditionally: true,\r\n  },\r\n\r\n  // Extract the content for this resource - initially, pass in our\r\n  // most restrictive opts which will return the highest quality\r\n  // content. On each failure, retry with slightly more lax opts.\r\n  //\r\n  // :param return_type: string. If \"node\", should return the content\r\n  // as a cheerio node rather than as an HTML string.\r\n  //\r\n  // Opts:\r\n  // stripUnlikelyCandidates: Remove any elements that match\r\n  // non-article-like criteria first.(Like, does this element\r\n  //   have a classname of \"comment\")\r\n  //\r\n  // weightNodes: Modify an elements score based on whether it has\r\n  // certain classNames or IDs. Examples: Subtract if a node has\r\n  // a className of 'comment', Add if a node has an ID of\r\n  // 'entry-content'.\r\n  //\r\n  // cleanConditionally: Clean the node to return of some\r\n  // superfluous content. Things like forms, ads, etc.\r\n  extract({ $, html, title, url }, opts) {\r\n    opts = { ...this.defaultOpts, ...opts };\r\n\r\n    $ = $ || cheerio.load(html);\r\n\r\n    // Cascade through our extraction-specific opts in an ordered fashion,\r\n    // turning them off as we try to extract content.\r\n    let node = this.getContentNode($, title, url, opts);\r\n\r\n    if (nodeIsSufficient(node)) {\r\n      return this.cleanAndReturnNode(node, $);\r\n    }\r\n\r\n    // We didn't succeed on first pass, one by one disable our\r\n    // extraction opts and try again.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\r\n      opts[key] = false;\r\n      $ = cheerio.load(html);\r\n\r\n      node = this.getContentNode($, title, url, opts);\r\n\r\n      if (nodeIsSufficient(node)) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return this.cleanAndReturnNode(node, $);\r\n  },\r\n\r\n  // Get node given current options\r\n  getContentNode($, title, url, opts) {\r\n    return cleanContent(extractBestNode($, opts), {\r\n      $,\r\n      cleanConditionally: opts.cleanConditionally,\r\n      title,\r\n      url,\r\n    });\r\n  },\r\n\r\n  // Once we got here, either we're at our last-resort node, or\r\n  // we broke early. Make sure we at least have -something- before we\r\n  // move forward.\r\n  cleanAndReturnNode(node, $) {\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    return normalizeSpaces($.html(node));\r\n  },\r\n};\r\n\r\nexport default GenericContentExtractor;\r\n","// TODO: It would be great if we could merge the meta and selector lists into\r\n// a list of objects, because we could then rank them better. For example,\r\n// .hentry .entry-title is far better suited than <meta title>.\r\n\r\n// An ordered list of meta tag names that denote likely article titles. All\r\n// attributes should be lowercase for faster case-insensitive matching. From\r\n// most distinct to least distinct.\r\nexport const STRONG_TITLE_META_TAGS = [\r\n  'tweetmeme-title',\r\n  'dc.title',\r\n  'rbtitle',\r\n  'headline',\r\n  'title',\r\n];\r\n\r\n// og:title is weak because it typically contains context that we don't like,\r\n// for example the source site's name. Gotta get that brand into facebook!\r\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\r\n\r\n// An ordered list of XPath Selectors to find likely article titles. From\r\n// most explicit to least explicit.\r\n//\r\n// Note - this does not use classes like CSS. This checks to see if the string\r\n// exists in the className, which is not as accurate as .className (which\r\n// splits on spaces/endlines), but for our purposes it's close enough. The\r\n// speed tradeoff is worth the accuracy hit.\r\nexport const STRONG_TITLE_SELECTORS = [\r\n  '.hentry .entry-title',\r\n  'h1#articleHeader',\r\n  'h1.articleHeader',\r\n  'h1.article',\r\n  '.instapaper_title',\r\n  '#meebo-title',\r\n];\r\n\r\nexport const WEAK_TITLE_SELECTORS = [\r\n  'article h1',\r\n  '#entry-title',\r\n  '.entry-title',\r\n  '#entryTitle',\r\n  '#entrytitle',\r\n  '.entryTitle',\r\n  '.entrytitle',\r\n  '#articleTitle',\r\n  '.articleTitle',\r\n  'post post-title',\r\n  'h1.title',\r\n  'h2.article',\r\n  'h1',\r\n  'html head title',\r\n  'title',\r\n];\r\n","import { cleanTitle } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\n\r\nimport {\r\n  STRONG_TITLE_META_TAGS,\r\n  WEAK_TITLE_META_TAGS,\r\n  STRONG_TITLE_SELECTORS,\r\n  WEAK_TITLE_SELECTORS,\r\n} from './constants';\r\n\r\nconst GenericTitleExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    // First, check to see if we have a matching meta tag that we can make\r\n    // use of that is strongly associated with the headline.\r\n    let title;\r\n\r\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Second, look through our content selectors for the most likely\r\n    // article title that is strongly associated with the headline.\r\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Third, check for weaker meta tags that may match.\r\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // Last, look for weaker selector tags that may match.\r\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\r\n    if (title) return cleanTitle(title, { url, $ });\r\n\r\n    // If no matches, return an empty string\r\n    return '';\r\n  },\r\n};\r\n\r\nexport default GenericTitleExtractor;\r\n","// An ordered list of meta tag names that denote likely article authors. All\r\n// attributes should be lowercase for faster case-insensitive matching. From\r\n// most distinct to least distinct.\r\n//\r\n// Note: \"author\" is too often the -developer- of the page, so it is not\r\n// added here.\r\nexport const AUTHOR_META_TAGS = [\r\n  'byl',\r\n  'clmst',\r\n  'dc.author',\r\n  'dcsext.author',\r\n  'dc.creator',\r\n  'rbauthors',\r\n  'authors',\r\n];\r\n\r\nexport const AUTHOR_MAX_LENGTH = 300;\r\n\r\n// An ordered list of XPath Selectors to find likely article authors. From\r\n// most explicit to least explicit.\r\n//\r\n// Note - this does not use classes like CSS. This checks to see if the string\r\n// exists in the className, which is not as accurate as .className (which\r\n// splits on spaces/endlines), but for our purposes it's close enough. The\r\n// speed tradeoff is worth the accuracy hit.\r\nexport const AUTHOR_SELECTORS = [\r\n  '.entry .entry-author',\r\n  '.author.vcard .fn',\r\n  '.author .vcard .fn',\r\n  '.byline.vcard .fn',\r\n  '.byline .vcard .fn',\r\n  '.byline .by .author',\r\n  '.byline .by',\r\n  '.byline .author',\r\n  '.post-author.vcard',\r\n  '.post-author .vcard',\r\n  'a[rel=author]',\r\n  '#by_author',\r\n  '.by_author',\r\n  '#entryAuthor',\r\n  '.entryAuthor',\r\n  '.byline a[href*=author]',\r\n  '#author .authorname',\r\n  '.author .authorname',\r\n  '#author',\r\n  '.author',\r\n  '.articleauthor',\r\n  '.ArticleAuthor',\r\n  '.byline',\r\n];\r\n\r\n// An ordered list of Selectors to find likely article authors, with\r\n// regular expression for content.\r\nconst bylineRe = /^[\\n\\s]*By/i;\r\nexport const BYLINE_SELECTORS_RE = [\r\n  ['#byline', bylineRe],\r\n  ['.byline', bylineRe],\r\n];\r\n","import { cleanAuthor } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\n\r\nimport {\r\n  AUTHOR_META_TAGS,\r\n  AUTHOR_MAX_LENGTH,\r\n  AUTHOR_SELECTORS,\r\n  BYLINE_SELECTORS_RE,\r\n} from './constants';\r\n\r\nconst GenericAuthorExtractor = {\r\n  extract({ $, metaCache }) {\r\n    let author;\r\n\r\n    // First, check to see if we have a matching\r\n    // meta tag that we can make use of.\r\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\r\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\r\n      return cleanAuthor(author);\r\n    }\r\n\r\n    // Second, look through our selectors looking for potential authors.\r\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\r\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\r\n      return cleanAuthor(author);\r\n    }\r\n\r\n    // Last, use our looser regular-expression based selectors for\r\n    // potential authors.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\r\n      const node = $(selector);\r\n      if (node.length === 1) {\r\n        const text = node.text();\r\n        if (regex.test(text)) {\r\n          return cleanAuthor(text);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericAuthorExtractor;\r\n","// An ordered list of meta tag names that denote\r\n// likely date published dates. All attributes\r\n// should be lowercase for faster case-insensitive matching.\r\n// From most distinct to least distinct.\r\nexport const DATE_PUBLISHED_META_TAGS = [\r\n  'article:published_time',\r\n  'displaydate',\r\n  'dc.date',\r\n  'dc.date.issued',\r\n  'rbpubdate',\r\n  'publish_date',\r\n  'pub_date',\r\n  'pagedate',\r\n  'pubdate',\r\n  'revision_date',\r\n  'doc_date',\r\n  'date_created',\r\n  'content_create_date',\r\n  'lastmodified',\r\n  'created',\r\n  'date',\r\n];\r\n\r\n// An ordered list of XPath Selectors to find\r\n// likely date published dates. From most explicit\r\n// to least explicit.\r\nexport const DATE_PUBLISHED_SELECTORS = [\r\n  '.hentry .dtstamp.published',\r\n  '.hentry .published',\r\n  '.hentry .dtstamp.updated',\r\n  '.hentry .updated',\r\n  '.single .published',\r\n  '.meta .published',\r\n  '.meta .postDate',\r\n  '.entry-date',\r\n  '.byline .date',\r\n  '.postmetadata .date',\r\n  '.article_datetime',\r\n  '.date-header',\r\n  '.story-date',\r\n  '.dateStamp',\r\n  '#story .datetime',\r\n  '.dateline',\r\n  '.pubdate',\r\n];\r\n\r\n// An ordered list of compiled regular expressions to find likely date\r\n// published dates from the URL. These should always have the first\r\n// reference be a date string that is parseable by dateutil.parser.parse\r\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\r\nexport const DATE_PUBLISHED_URL_RES = [\r\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\r\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\r\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\r\n];\r\n","import { cleanDatePublished } from 'cleaners';\r\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\r\nimport { extractFromUrl } from 'utils/text';\r\n\r\nimport {\r\n  DATE_PUBLISHED_META_TAGS,\r\n  DATE_PUBLISHED_SELECTORS,\r\n  DATE_PUBLISHED_URL_RES,\r\n} from './constants';\r\n\r\nconst GenericDatePublishedExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    let datePublished;\r\n    // First, check to see if we have a matching meta tag\r\n    // that we can make use of.\r\n    // Don't try cleaning tags from this string\r\n    datePublished = extractFromMeta(\r\n      $,\r\n      DATE_PUBLISHED_META_TAGS,\r\n      metaCache,\r\n      false\r\n    );\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    // Second, look through our selectors looking for potential\r\n    // date_published's.\r\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    // Lastly, look to see if a dately string exists in the URL\r\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\r\n    if (datePublished) return cleanDatePublished(datePublished);\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericDatePublishedExtractor;\r\n","// Currently there is only one selector for\r\n// deks. We should simply return null here\r\n// until we have a more robust generic option.\r\n// Below is the original source for this, for reference.\r\nconst GenericDekExtractor = {\r\n  extract() {\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericDekExtractor;\r\n","// An ordered list of meta tag names that denote likely article leading images.\r\n// All attributes should be lowercase for faster case-insensitive matching.\r\n// From most distinct to least distinct.\r\nexport const LEAD_IMAGE_URL_META_TAGS = [\r\n  'og:image',\r\n  'twitter:image',\r\n  'image_src',\r\n];\r\n\r\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\r\n\r\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\r\n  'upload',\r\n  'wp-content',\r\n  'large',\r\n  'photo',\r\n  'wp-image',\r\n];\r\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\r\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\r\n  'spacer',\r\n  'sprite',\r\n  'blank',\r\n  'throbber',\r\n  'gradient',\r\n  'tile',\r\n  'bg',\r\n  'background',\r\n  'icon',\r\n  'social',\r\n  'header',\r\n  'hdr',\r\n  'advert',\r\n  'spinner',\r\n  'loader',\r\n  'loading',\r\n  'default',\r\n  'rating',\r\n  'share',\r\n  'facebook',\r\n  'twitter',\r\n  'theme',\r\n  'promo',\r\n  'ads',\r\n  'wp-includes',\r\n];\r\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\r\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\r\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\r\n","import {\r\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\r\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\r\n  GIF_RE,\r\n  JPG_RE,\r\n} from './constants';\r\n\r\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\r\n\r\nfunction getSig($node) {\r\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\r\n}\r\n\r\n// Scores image urls based on a variety of heuristics.\r\nexport function scoreImageUrl(url) {\r\n  url = url.trim();\r\n  let score = 0;\r\n\r\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\r\n    score += 20;\r\n  }\r\n\r\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\r\n    score -= 20;\r\n  }\r\n\r\n  // TODO: We might want to consider removing this as\r\n  // gifs are much more common/popular than they once were\r\n  if (GIF_RE.test(url)) {\r\n    score -= 10;\r\n  }\r\n\r\n  if (JPG_RE.test(url)) {\r\n    score += 10;\r\n  }\r\n\r\n  // PNGs are neutral.\r\n\r\n  return score;\r\n}\r\n\r\n// Alt attribute usually means non-presentational image.\r\nexport function scoreAttr($img) {\r\n  if ($img.attr('alt')) {\r\n    return 5;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n// Look through our parent and grandparent for figure-like\r\n// container elements, give a bonus if we find them\r\nexport function scoreByParents($img) {\r\n  let score = 0;\r\n  const $figParent = $img.parents('figure').first();\r\n\r\n  if ($figParent.length === 1) {\r\n    score += 25;\r\n  }\r\n\r\n  const $parent = $img.parent();\r\n  let $gParent;\r\n  if ($parent.length === 1) {\r\n    $gParent = $parent.parent();\r\n  }\r\n\r\n  [$parent, $gParent].forEach($node => {\r\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\r\n      score += 15;\r\n    }\r\n  });\r\n\r\n  return score;\r\n}\r\n\r\n// Look at our immediate sibling and see if it looks like it's a\r\n// caption. Bonus if so.\r\nexport function scoreBySibling($img) {\r\n  let score = 0;\r\n  const $sibling = $img.next();\r\n  const sibling = $sibling.get(0);\r\n\r\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\r\n    score += 25;\r\n  }\r\n\r\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\r\n    score += 15;\r\n  }\r\n\r\n  return score;\r\n}\r\n\r\nexport function scoreByDimensions($img) {\r\n  let score = 0;\r\n\r\n  const width = parseFloat($img.attr('width'));\r\n  const height = parseFloat($img.attr('height'));\r\n  const src = $img.attr('src');\r\n\r\n  // Penalty for skinny images\r\n  if (width && width <= 50) {\r\n    score -= 50;\r\n  }\r\n\r\n  // Penalty for short images\r\n  if (height && height <= 50) {\r\n    score -= 50;\r\n  }\r\n\r\n  if (width && height && !src.includes('sprite')) {\r\n    const area = width * height;\r\n    if (area < 5000) {\r\n      // Smaller than 50 x 100\r\n      score -= 100;\r\n    } else {\r\n      score += Math.round(area / 1000);\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n\r\nexport function scoreByPosition($imgs, index) {\r\n  return $imgs.length / 2 - index;\r\n}\r\n","import { extractFromMeta } from 'utils/dom';\r\nimport { cleanImage } from 'cleaners';\r\n\r\nimport {\r\n  LEAD_IMAGE_URL_META_TAGS,\r\n  LEAD_IMAGE_URL_SELECTORS,\r\n} from './constants';\r\n\r\nimport {\r\n  scoreImageUrl,\r\n  scoreAttr,\r\n  scoreByParents,\r\n  scoreBySibling,\r\n  scoreByDimensions,\r\n  scoreByPosition,\r\n} from './score-image';\r\n\r\n// Given a resource, try to find the lead image URL from within\r\n// it. Like content and next page extraction, uses a scoring system\r\n// to determine what the most likely image may be. Short circuits\r\n// on really probable things like og:image meta tags.\r\n//\r\n// Potential signals to still take advantage of:\r\n//   * domain\r\n//   * weird aspect ratio\r\nconst GenericLeadImageUrlExtractor = {\r\n  extract({ $, content, metaCache, html }) {\r\n    let cleanUrl;\r\n    if (!$.browser && $('head').length === 0) {\r\n      $('*')\r\n        .first()\r\n        .prepend(html);\r\n    }\r\n\r\n    // Check to see if we have a matching meta tag that we can make use of.\r\n    // Moving this higher because common practice is now to use large\r\n    // images on things like Open Graph or Twitter cards.\r\n    // images usually have for things like Open Graph.\r\n    const imageUrl = extractFromMeta(\r\n      $,\r\n      LEAD_IMAGE_URL_META_TAGS,\r\n      metaCache,\r\n      false\r\n    );\r\n\r\n    if (imageUrl) {\r\n      cleanUrl = cleanImage(imageUrl);\r\n\r\n      if (cleanUrl) return cleanUrl;\r\n    }\r\n\r\n    // Next, try to find the \"best\" image via the content.\r\n    // We'd rather not have to fetch each image and check dimensions,\r\n    // so try to do some analysis and determine them instead.\r\n    const $content = $(content);\r\n    const imgs = $('img', $content).toArray();\r\n    const imgScores = {};\r\n\r\n    imgs.forEach((img, index) => {\r\n      const $img = $(img);\r\n      const src = $img.attr('src');\r\n\r\n      if (!src) return;\r\n\r\n      let score = scoreImageUrl(src);\r\n      score += scoreAttr($img);\r\n      score += scoreByParents($img);\r\n      score += scoreBySibling($img);\r\n      score += scoreByDimensions($img);\r\n      score += scoreByPosition(imgs, index);\r\n\r\n      imgScores[src] = score;\r\n    });\r\n\r\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\r\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\r\n      [null, 0]\r\n    );\r\n\r\n    if (topScore > 0) {\r\n      cleanUrl = cleanImage(topUrl);\r\n\r\n      if (cleanUrl) return cleanUrl;\r\n    }\r\n\r\n    // If nothing else worked, check to see if there are any really\r\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\r\n      const $node = $(selector).first();\r\n      const src = $node.attr('src');\r\n      if (src) {\r\n        cleanUrl = cleanImage(src);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n\r\n      const href = $node.attr('href');\r\n      if (href) {\r\n        cleanUrl = cleanImage(href);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n\r\n      const value = $node.attr('value');\r\n      if (value) {\r\n        cleanUrl = cleanImage(value);\r\n        if (cleanUrl) return cleanUrl;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericLeadImageUrlExtractor;\r\n","import difflib from 'difflib';\r\n\r\nexport default function scoreSimilarity(score, articleUrl, href) {\r\n  // Do this last and only if we have a real candidate, because it's\r\n  // potentially expensive computationally. Compare the link to this\r\n  // URL using difflib to get the % similarity of these URLs. On a\r\n  // sliding scale, subtract points from this link based on\r\n  // similarity.\r\n  if (score > 0) {\r\n    const similarity = new difflib.SequenceMatcher(\r\n      null,\r\n      articleUrl,\r\n      href\r\n    ).ratio();\r\n    // Subtract .1 from diff_percent when calculating modifier,\r\n    // which means that if it's less than 10% different, we give a\r\n    // bonus instead. Ex:\r\n    //  3% different = +17.5 points\r\n    // 10% different = 0 points\r\n    // 20% different = -25 points\r\n    const diffPercent = 1.0 - similarity;\r\n    const diffModifier = -(250 * (diffPercent - 0.2));\r\n    return score + diffModifier;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { IS_DIGIT_RE } from 'utils/text/constants';\r\n\r\nexport default function scoreLinkText(linkText, pageNum) {\r\n  // If the link text can be parsed as a number, give it a minor\r\n  // bonus, with a slight bias towards lower numbered pages. This is\r\n  // so that pages that might not have 'next' in their text can still\r\n  // get scored, and sorted properly by score.\r\n  let score = 0;\r\n\r\n  if (IS_DIGIT_RE.test(linkText.trim())) {\r\n    const linkTextAsNum = parseInt(linkText, 10);\r\n    // If it's the first page, we already got it on the first call.\r\n    // Give it a negative score. Otherwise, up to page 10, give a\r\n    // small bonus.\r\n    if (linkTextAsNum < 2) {\r\n      score = -30;\r\n    } else {\r\n      score = Math.max(0, 10 - linkTextAsNum);\r\n    }\r\n\r\n    // If it appears that the current page number is greater than\r\n    // this links page number, it's a very bad sign. Give it a big\r\n    // penalty.\r\n    if (pageNum && pageNum >= linkTextAsNum) {\r\n      score -= 50;\r\n    }\r\n  }\r\n\r\n  return score;\r\n}\r\n","export default function scorePageInLink(pageNum, isWp) {\r\n  // page in the link = bonus. Intentionally ignore wordpress because\r\n  // their ?p=123 link style gets caught by this even though it means\r\n  // separate documents entirely.\r\n  if (pageNum && !isWp) {\r\n    return 50;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","export const DIGIT_RE = /\\d/;\r\n\r\n// A list of words that, if found in link text or URLs, likely mean that\r\n// this link is not a next page link.\r\nexport const EXTRANEOUS_LINK_HINTS = [\r\n  'print',\r\n  'archive',\r\n  'comment',\r\n  'discuss',\r\n  'e-mail',\r\n  'email',\r\n  'share',\r\n  'reply',\r\n  'all',\r\n  'login',\r\n  'sign',\r\n  'single',\r\n  'adx',\r\n  'entry-unrelated',\r\n];\r\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\r\n  EXTRANEOUS_LINK_HINTS.join('|'),\r\n  'i'\r\n);\r\n\r\n// Match any link text/classname/id that looks like it could mean the next\r\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\r\n// mean last page.\r\nexport const NEXT_LINK_TEXT_RE = new RegExp(\r\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\r\n  'i'\r\n);\r\n\r\n// Match any link text/classname/id that looks like it is an end link: things\r\n// like \"first\", \"last\", \"end\", etc.\r\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\r\n\r\n// Match any link text/classname/id that looks like it means the previous\r\n// page.\r\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\r\n\r\n// Match any phrase that looks like it could be page, or paging, or pagination\r\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\r\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nexport default function scoreExtraneousLinks(href) {\r\n  // If the URL itself contains extraneous values, give a penalty.\r\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\r\n    return -25;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { range } from 'utils';\r\nimport {\r\n  NEGATIVE_SCORE_RE,\r\n  POSITIVE_SCORE_RE,\r\n  PAGE_RE,\r\n} from 'utils/dom/constants';\r\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nfunction makeSig($link) {\r\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\r\n}\r\n\r\nexport default function scoreByParents($link) {\r\n  // If a parent node contains paging-like classname or id, give a\r\n  // bonus. Additionally, if a parent_node contains bad content\r\n  // (like 'sponsor'), give a penalty.\r\n  let $parent = $link.parent();\r\n  let positiveMatch = false;\r\n  let negativeMatch = false;\r\n  let score = 0;\r\n\r\n  Array.from(range(0, 4)).forEach(() => {\r\n    if ($parent.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const parentData = makeSig($parent, ' ');\r\n\r\n    // If we have 'page' or 'paging' in our data, that's a good\r\n    // sign. Add a bonus.\r\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\r\n      positiveMatch = true;\r\n      score += 25;\r\n    }\r\n\r\n    // If we have 'comment' or something in our data, and\r\n    // we don't have something like 'content' as well, that's\r\n    // a bad sign. Give a penalty.\r\n    if (\r\n      !negativeMatch &&\r\n      NEGATIVE_SCORE_RE.test(parentData) &&\r\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\r\n    ) {\r\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\r\n        negativeMatch = true;\r\n        score -= 25;\r\n      }\r\n    }\r\n\r\n    $parent = $parent.parent();\r\n  });\r\n\r\n  return score;\r\n}\r\n","import { PREV_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scorePrevLink(linkData) {\r\n  // If the link has something like \"previous\", its definitely\r\n  // an old link, skip it.\r\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\r\n    return -200;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\r\n\r\nexport default function shouldScore(\r\n  href,\r\n  articleUrl,\r\n  baseUrl,\r\n  parsedUrl,\r\n  linkText,\r\n  previousUrls\r\n) {\r\n  // skip if we've already fetched this url\r\n  if (previousUrls.find(url => href === url) !== undefined) {\r\n    return false;\r\n  }\r\n\r\n  // If we've already parsed this URL, or the URL matches the base\r\n  // URL, or is empty, skip it.\r\n  if (!href || href === articleUrl || href === baseUrl) {\r\n    return false;\r\n  }\r\n\r\n  const { hostname } = parsedUrl;\r\n  const { hostname: linkHost } = URL.parse(href);\r\n\r\n  // Domain mismatch.\r\n  if (linkHost !== hostname) {\r\n    return false;\r\n  }\r\n\r\n  // If href doesn't contain a digit after removing the base URL,\r\n  // it's certainly not the next page.\r\n  const fragment = href.replace(baseUrl, '');\r\n  if (!DIGIT_RE.test(fragment)) {\r\n    return false;\r\n  }\r\n\r\n  // This link has extraneous content (like \"comment\") in its link\r\n  // text, so we skip it.\r\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\r\n    return false;\r\n  }\r\n\r\n  // Next page link text is never long, skip if it is too long.\r\n  if (linkText.length > 25) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","export default function scoreBaseUrl(href, baseRegex) {\r\n  // If the baseUrl isn't part of this URL, penalize this\r\n  // link. It could still be the link, but the odds are lower.\r\n  // Example:\r\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\r\n  if (!baseRegex.test(href)) {\r\n    return -25;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { NEXT_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scoreNextLinkText(linkData) {\r\n  // Things like \"next\", \">>\", etc.\r\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\r\n    return 50;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\r\n\r\nexport default function scoreCapLinks(linkData) {\r\n  // Cap links are links like \"last\", etc.\r\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\r\n    // If we found a link like \"last\", but we've already seen that\r\n    // this link is also \"next\", it's fine. If it's not been\r\n    // previously marked as \"next\", then it's probably bad.\r\n    // Penalize.\r\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\r\n      return -65;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { getAttrs, isWordpress } from 'utils/dom';\r\nimport { removeAnchor, pageNumFromUrl } from 'utils/text';\r\n\r\nimport {\r\n  scoreSimilarity,\r\n  scoreLinkText,\r\n  scorePageInLink,\r\n  scoreExtraneousLinks,\r\n  scoreByParents,\r\n  scorePrevLink,\r\n  shouldScore,\r\n  scoreBaseUrl,\r\n  scoreCapLinks,\r\n  scoreNextLinkText,\r\n} from './utils';\r\n\r\nexport function makeBaseRegex(baseUrl) {\r\n  return new RegExp(`^${baseUrl}`, 'i');\r\n}\r\n\r\nfunction makeSig($link, linkText) {\r\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\r\n    'id'\r\n  ) || ''}`;\r\n}\r\n\r\nexport default function scoreLinks({\r\n  links,\r\n  articleUrl,\r\n  baseUrl,\r\n  parsedUrl,\r\n  $,\r\n  previousUrls = [],\r\n}) {\r\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\r\n  const baseRegex = makeBaseRegex(baseUrl);\r\n  const isWp = isWordpress($);\r\n\r\n  // Loop through all links, looking for hints that they may be next-page\r\n  // links. Things like having \"page\" in their textContent, className or\r\n  // id, or being a child of a node with a page-y className or id.\r\n  //\r\n  // After we do that, assign each page a score, and pick the one that\r\n  // looks most like the next page link, as long as its score is strong\r\n  // enough to have decent confidence.\r\n  const scoredPages = links.reduce((possiblePages, link) => {\r\n    // Remove any anchor data since we don't do a good job\r\n    // standardizing URLs (it's hard), we're going to do\r\n    // some checking with and without a trailing slash\r\n    const attrs = getAttrs(link);\r\n\r\n    // if href is undefined, return\r\n    if (!attrs.href) return possiblePages;\r\n\r\n    const href = removeAnchor(attrs.href);\r\n    const $link = $(link);\r\n    const linkText = $link.text();\r\n\r\n    if (\r\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\r\n    ) {\r\n      return possiblePages;\r\n    }\r\n\r\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\r\n    if (!possiblePages[href]) {\r\n      possiblePages[href] = {\r\n        score: 0,\r\n        linkText,\r\n        href,\r\n      };\r\n    } else {\r\n      possiblePages[href].linkText = `${\r\n        possiblePages[href].linkText\r\n      }|${linkText}`;\r\n    }\r\n\r\n    const possiblePage = possiblePages[href];\r\n    const linkData = makeSig($link, linkText);\r\n    const pageNum = pageNumFromUrl(href);\r\n\r\n    let score = scoreBaseUrl(href, baseRegex);\r\n    score += scoreNextLinkText(linkData);\r\n    score += scoreCapLinks(linkData);\r\n    score += scorePrevLink(linkData);\r\n    score += scoreByParents($link);\r\n    score += scoreExtraneousLinks(href);\r\n    score += scorePageInLink(pageNum, isWp);\r\n    score += scoreLinkText(linkText, pageNum);\r\n    score += scoreSimilarity(score, articleUrl, href);\r\n\r\n    possiblePage.score = score;\r\n\r\n    return possiblePages;\r\n  }, {});\r\n\r\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\r\n}\r\n","import URL from 'url';\r\n\r\nimport { articleBaseUrl, removeAnchor } from 'utils/text';\r\nimport scoreLinks from './scoring/score-links';\r\n\r\n// Looks for and returns next page url\r\n// for multi-page articles\r\nconst GenericNextPageUrlExtractor = {\r\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\r\n    parsedUrl = parsedUrl || URL.parse(url);\r\n\r\n    const articleUrl = removeAnchor(url);\r\n    const baseUrl = articleBaseUrl(url, parsedUrl);\r\n\r\n    const links = $('a[href]').toArray();\r\n\r\n    const scoredLinks = scoreLinks({\r\n      links,\r\n      articleUrl,\r\n      baseUrl,\r\n      parsedUrl,\r\n      $,\r\n      previousUrls,\r\n    });\r\n\r\n    // If no links were scored, return null\r\n    if (!scoredLinks) return null;\r\n\r\n    // now that we've scored all possible pages,\r\n    // find the biggest one.\r\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\r\n      (acc, link) => {\r\n        const scoredLink = scoredLinks[link];\r\n        return scoredLink.score > acc.score ? scoredLink : acc;\r\n      },\r\n      { score: -100 }\r\n    );\r\n\r\n    // If the score is less than 50, we're not confident enough to use it,\r\n    // so we fail.\r\n    if (topPage.score >= 50) {\r\n      return topPage.href;\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default GenericNextPageUrlExtractor;\r\n","export const CANONICAL_META_SELECTORS = ['og:url'];\r\n","import URL from 'url';\r\nimport { extractFromMeta } from 'utils/dom';\r\n\r\nimport { CANONICAL_META_SELECTORS } from './constants';\r\n\r\nfunction parseDomain(url) {\r\n  const parsedUrl = URL.parse(url);\r\n  const { hostname } = parsedUrl;\r\n  return hostname;\r\n}\r\n\r\nfunction result(url) {\r\n  return {\r\n    url,\r\n    domain: parseDomain(url),\r\n  };\r\n}\r\n\r\nconst GenericUrlExtractor = {\r\n  extract({ $, url, metaCache }) {\r\n    const $canonical = $('link[rel=canonical]');\r\n    if ($canonical.length !== 0) {\r\n      const href = $canonical.attr('href');\r\n      if (href) {\r\n        return result(href);\r\n      }\r\n    }\r\n\r\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\r\n    if (metaUrl) {\r\n      return result(metaUrl);\r\n    }\r\n\r\n    return result(url);\r\n  },\r\n};\r\n\r\nexport default GenericUrlExtractor;\r\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\r\n","import ellipsize from 'ellipsize';\r\n\r\nimport { extractFromMeta, stripTags } from 'utils/dom';\r\n\r\nimport { EXCERPT_META_SELECTORS } from './constants';\r\n\r\nexport function clean(content, $, maxLength = 200) {\r\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\r\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\r\n}\r\n\r\nconst GenericExcerptExtractor = {\r\n  extract({ $, content, metaCache }) {\r\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\r\n    if (excerpt) {\r\n      return clean(stripTags(excerpt, $));\r\n    }\r\n    // Fall back to excerpting from the extracted content\r\n    const maxLength = 200;\r\n    const shortContent = content.slice(0, maxLength * 5);\r\n    return clean($(shortContent).text(), $, maxLength);\r\n  },\r\n};\r\n\r\nexport default GenericExcerptExtractor;\r\n","import cheerio from 'cheerio';\r\n\r\nimport { normalizeSpaces } from 'utils/text';\r\n\r\nconst getWordCount = content => {\r\n  const $ = cheerio.load(content);\r\n  const $content = $('div').first();\r\n  const text = normalizeSpaces($content.text());\r\n  return text.split(/\\s/).length;\r\n};\r\n\r\nconst getWordCountAlt = content => {\r\n  content = content.replace(/<[^>]*>/g, ' ');\r\n  content = content.replace(/\\s+/g, ' ');\r\n  content = content.trim();\r\n  return content.split(' ').length;\r\n};\r\n\r\nconst GenericWordCountExtractor = {\r\n  extract({ content }) {\r\n    let count = getWordCount(content);\r\n    if (count === 1) count = getWordCountAlt(content);\r\n    return count;\r\n  },\r\n};\r\n\r\nexport default GenericWordCountExtractor;\r\n","import cheerio from 'cheerio';\r\nimport stringDirection from 'string-direction';\r\n\r\nimport GenericContentExtractor from './content/extractor';\r\nimport GenericTitleExtractor from './title/extractor';\r\nimport GenericAuthorExtractor from './author/extractor';\r\nimport GenericDatePublishedExtractor from './date-published/extractor';\r\nimport GenericDekExtractor from './dek/extractor';\r\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\r\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\r\nimport GenericUrlExtractor from './url/extractor';\r\nimport GenericExcerptExtractor from './excerpt/extractor';\r\nimport GenericWordCountExtractor from './word-count/extractor';\r\n\r\nconst GenericExtractor = {\r\n  // This extractor is the default for all domains\r\n  domain: '*',\r\n  title: GenericTitleExtractor.extract,\r\n  date_published: GenericDatePublishedExtractor.extract,\r\n  author: GenericAuthorExtractor.extract,\r\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\r\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\r\n  dek: GenericDekExtractor.extract,\r\n  next_page_url: GenericNextPageUrlExtractor.extract,\r\n  url_and_domain: GenericUrlExtractor.extract,\r\n  excerpt: GenericExcerptExtractor.extract,\r\n  word_count: GenericWordCountExtractor.extract,\r\n  direction: ({ title }) => stringDirection.getDirection(title),\r\n\r\n  extract(options) {\r\n    const { html, $ } = options;\r\n\r\n    if (html && !$) {\r\n      const loaded = cheerio.load(html);\r\n      options.$ = loaded;\r\n    }\r\n\r\n    const title = this.title(options);\r\n    const date_published = this.date_published(options);\r\n    const author = this.author(options);\r\n    const content = this.content({ ...options, title });\r\n    const lead_image_url = this.lead_image_url({ ...options, content });\r\n    const dek = this.dek({ ...options, content });\r\n    const next_page_url = this.next_page_url(options);\r\n    const excerpt = this.excerpt({ ...options, content });\r\n    const word_count = this.word_count({ ...options, content });\r\n    const direction = this.direction({ title });\r\n    const { url, domain } = this.url_and_domain(options);\r\n\r\n    return {\r\n      title,\r\n      author,\r\n      date_published: date_published || null,\r\n      dek,\r\n      lead_image_url,\r\n      content,\r\n      next_page_url,\r\n      url,\r\n      domain,\r\n      excerpt,\r\n      word_count,\r\n      direction,\r\n    };\r\n  },\r\n};\r\n\r\nexport default GenericExtractor;\r\n","import { MediumExtractor, BloggerExtractor } from './custom';\r\n\r\nconst Detectors = {\r\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\r\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor,\r\n};\r\n\r\nexport default function detectByHtml($) {\r\n  const selector = Reflect.ownKeys(Detectors).find(s => $(s).length > 0);\r\n\r\n  return Detectors[selector];\r\n}\r\n","import URL from 'url';\r\n\r\nimport Extractors from './all';\r\nimport GenericExtractor from './generic';\r\nimport detectByHtml from './detect-by-html';\r\nimport { apiExtractors } from './add-extractor';\r\n\r\nexport default function getExtractor(url, parsedUrl, $) {\r\n  parsedUrl = parsedUrl || URL.parse(url);\r\n  const { hostname } = parsedUrl;\r\n  const baseDomain = hostname\r\n    .split('.')\r\n    .slice(-2)\r\n    .join('.');\r\n\r\n  return (\r\n    apiExtractors[hostname] ||\r\n    apiExtractors[baseDomain] ||\r\n    Extractors[hostname] ||\r\n    Extractors[baseDomain] ||\r\n    detectByHtml($) ||\r\n    GenericExtractor\r\n  );\r\n}\r\n","import Cleaners from 'cleaners';\r\nimport { convertNodeTo, makeLinksAbsolute } from 'utils/dom';\r\nimport GenericExtractor from './generic';\r\n\r\n// Remove elements by an array of selectors\r\nexport function cleanBySelectors($content, $, { clean }) {\r\n  if (!clean) return $content;\r\n\r\n  $(clean.join(','), $content).remove();\r\n\r\n  return $content;\r\n}\r\n\r\n// Transform matching elements\r\nexport function transformElements($content, $, { transforms }) {\r\n  if (!transforms) return $content;\r\n\r\n  Reflect.ownKeys(transforms).forEach(key => {\r\n    const $matches = $(key, $content);\r\n    const value = transforms[key];\r\n\r\n    // If value is a string, convert directly\r\n    if (typeof value === 'string') {\r\n      $matches.each((index, node) => {\r\n        convertNodeTo($(node), $, transforms[key]);\r\n      });\r\n    } else if (typeof value === 'function') {\r\n      // If value is function, apply function to node\r\n      $matches.each((index, node) => {\r\n        const result = value($(node), $);\r\n        // If function returns a string, convert node to that value\r\n        if (typeof result === 'string') {\r\n          convertNodeTo($(node), $, result);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return $content;\r\n}\r\n\r\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\r\n  return selectors.find(selector => {\r\n    if (Array.isArray(selector)) {\r\n      if (extractHtml) {\r\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\r\n      }\r\n\r\n      const [s, attr] = selector;\r\n      return (\r\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\r\n        $(s).attr(attr) &&\r\n        $(s)\r\n          .attr(attr)\r\n          .trim() !== ''\r\n      );\r\n    }\r\n\r\n    return (\r\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\r\n      $(selector)\r\n        .text()\r\n        .trim() !== ''\r\n    );\r\n  });\r\n}\r\n\r\nexport function select(opts) {\r\n  const { $, type, extractionOpts, extractHtml = false } = opts;\r\n  // Skip if there's not extraction for this type\r\n  if (!extractionOpts) return null;\r\n\r\n  // If a string is hardcoded for a type (e.g., Wikipedia\r\n  // contributors), return the string\r\n  if (typeof extractionOpts === 'string') return extractionOpts;\r\n\r\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\r\n\r\n  const overrideAllowMultiple = type === 'lead_image_url' || allowMultiple;\r\n\r\n  const matchingSelector = findMatchingSelector(\r\n    $,\r\n    selectors,\r\n    extractHtml,\r\n    overrideAllowMultiple\r\n  );\r\n\r\n  if (!matchingSelector) return null;\r\n\r\n  function transformAndClean($node) {\r\n    makeLinksAbsolute($node, $, opts.url || '');\r\n    cleanBySelectors($node, $, extractionOpts);\r\n    transformElements($node, $, extractionOpts);\r\n    return $node;\r\n  }\r\n\r\n  function selectHtml() {\r\n    // If the selector type requests html as its return type\r\n    // transform and clean the element with provided selectors\r\n    let $content;\r\n\r\n    // If matching selector is an array, we're considering this a\r\n    // multi-match selection, which allows the parser to choose several\r\n    // selectors to include in the result. Note that all selectors in the\r\n    // array must match in order for this selector to trigger\r\n    if (Array.isArray(matchingSelector)) {\r\n      $content = $(matchingSelector.join(','));\r\n      const $wrapper = $('<div></div>');\r\n      $content.each((_, element) => {\r\n        $wrapper.append(element);\r\n      });\r\n\r\n      $content = $wrapper;\r\n    } else {\r\n      $content = $(matchingSelector);\r\n    }\r\n\r\n    // Wrap in div so transformation can take place on root element\r\n    $content.wrap($('<div></div>'));\r\n    $content = $content.parent();\r\n    $content = transformAndClean($content);\r\n    if (Cleaners[type]) {\r\n      Cleaners[type]($content, { ...opts, defaultCleaner });\r\n    }\r\n\r\n    if (allowMultiple) {\r\n      return $content\r\n        .children()\r\n        .toArray()\r\n        .map(el => $.html($(el)));\r\n    }\r\n\r\n    return $.html($content);\r\n  }\r\n\r\n  if (extractHtml) {\r\n    return selectHtml(matchingSelector);\r\n  }\r\n\r\n  let $match;\r\n  let result;\r\n  // if selector is an array (e.g., ['img', 'src']),\r\n  // extract the attr\r\n  if (Array.isArray(matchingSelector)) {\r\n    const [selector, attr, transform] = matchingSelector;\r\n    $match = $(selector);\r\n    $match = transformAndClean($match);\r\n    result = $match.map((_, el) => {\r\n      const item = $(el)\r\n        .attr(attr)\r\n        .trim();\r\n      return transform ? transform(item) : item;\r\n    });\r\n  } else {\r\n    $match = $(matchingSelector);\r\n    $match = transformAndClean($match);\r\n    result = $match.map((_, el) =>\r\n      $(el)\r\n        .text()\r\n        .trim()\r\n    );\r\n  }\r\n\r\n  result =\r\n    Array.isArray(result.toArray()) && allowMultiple\r\n      ? result.toArray()\r\n      : result[0];\r\n  // Allow custom extractor to skip default cleaner\r\n  // for this type; defaults to true\r\n  if (defaultCleaner && Cleaners[type]) {\r\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function selectExtendedTypes(extend, opts) {\r\n  const results = {};\r\n  Reflect.ownKeys(extend).forEach(t => {\r\n    if (!results[t]) {\r\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\r\n    }\r\n  });\r\n  return results;\r\n}\r\n\r\nfunction extractResult(opts) {\r\n  const { type, extractor, fallback = true } = opts;\r\n\r\n  const result = select({ ...opts, extractionOpts: extractor[type] });\r\n\r\n  // If custom parser succeeds, return the result\r\n  if (result) {\r\n    return result;\r\n  }\r\n\r\n  // If nothing matches the selector, and fallback is enabled,\r\n  // run the Generic extraction\r\n  if (fallback) return GenericExtractor[type](opts);\r\n\r\n  return null;\r\n}\r\n\r\nconst RootExtractor = {\r\n  extract(extractor = GenericExtractor, opts) {\r\n    const { contentOnly, extractedTitle } = opts;\r\n    // This is the generic extractor. Run its extract method\r\n    if (extractor.domain === '*') return extractor.extract(opts);\r\n\r\n    opts = {\r\n      ...opts,\r\n      extractor,\r\n    };\r\n\r\n    if (contentOnly) {\r\n      const content = extractResult({\r\n        ...opts,\r\n        type: 'content',\r\n        extractHtml: true,\r\n        title: extractedTitle,\r\n      });\r\n      return {\r\n        content,\r\n      };\r\n    }\r\n    const title = extractResult({ ...opts, type: 'title' });\r\n    const date_published = extractResult({ ...opts, type: 'date_published' });\r\n    const author = extractResult({ ...opts, type: 'author' });\r\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\r\n    const content = extractResult({\r\n      ...opts,\r\n      type: 'content',\r\n      extractHtml: true,\r\n      title,\r\n    });\r\n    const lead_image_url = extractResult({\r\n      ...opts,\r\n      type: 'lead_image_url',\r\n      content,\r\n    });\r\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\r\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\r\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\r\n    const direction = extractResult({ ...opts, type: 'direction', title });\r\n    const { url, domain } = extractResult({\r\n      ...opts,\r\n      type: 'url_and_domain',\r\n    }) || { url: null, domain: null };\r\n\r\n    let extendedResults = {};\r\n    if (extractor.extend) {\r\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\r\n    }\r\n\r\n    return {\r\n      title,\r\n      content,\r\n      author,\r\n      date_published,\r\n      lead_image_url,\r\n      dek,\r\n      next_page_url,\r\n      url,\r\n      domain,\r\n      excerpt,\r\n      word_count,\r\n      direction,\r\n      ...extendedResults,\r\n    };\r\n  },\r\n};\r\n\r\nexport default RootExtractor;\r\n","import { removeAnchor } from 'utils/text';\r\nimport RootExtractor from 'extractors/root-extractor';\r\nimport GenericExtractor from 'extractors/generic';\r\nimport Resource from 'resource';\r\n\r\nexport default async function collectAllPages({\r\n  next_page_url,\r\n  html,\r\n  $,\r\n  metaCache,\r\n  result,\r\n  Extractor,\r\n  title,\r\n  url,\r\n}) {\r\n  // At this point, we've fetched just the first page\r\n  let pages = 1;\r\n  const previousUrls = [removeAnchor(url)];\r\n  // If we've gone over 26 pages, something has\r\n  // likely gone wrong.\r\n  while (next_page_url && pages < 26) {\r\n    pages += 1;\r\n    // eslint-disable-next-line no-await-in-loop\r\n    $ = await Resource.create(next_page_url);\r\n    if(!$ || $.html === undefined){\r\n      console.error(`collectAllPages failed ${next_page_url}`);\r\n      next_page_url = false;\r\n    }else {\r\n      html = $.html();\r\n\r\n      const extractorOpts = {\r\n        url: next_page_url,\r\n        html,\r\n        $,\r\n        metaCache,\r\n        extractedTitle: title,\r\n        previousUrls,\r\n      };\r\n\r\n      const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\r\n\r\n      previousUrls.push(next_page_url);\r\n      result = {\r\n        ...result,\r\n        content: `${result.content}<hr><h4>Page ${pages}</h4>${\r\n          nextPageResult.content\r\n        }`,\r\n      };\r\n\r\n      // eslint-disable-next-line prefer-destructuring\r\n      next_page_url = nextPageResult.next_page_url;\r\n    }\r\n  }\r\n\r\n  const word_count = GenericExtractor.word_count({\r\n    content: `<div>${result.content}</div>`,\r\n  });\r\n  return {\r\n    ...result,\r\n    total_pages: pages,\r\n    rendered_pages: pages,\r\n    word_count,\r\n  };\r\n}\r\n","import URL from 'url';\r\nimport cheerio from 'cheerio';\r\nimport TurndownService from 'turndown';\r\n\r\nimport Resource from 'resource';\r\nimport { validateUrl } from 'utils';\r\nimport addCustomExtractor from 'extractors/add-extractor';\r\nimport getExtractor from 'extractors/get-extractor';\r\nimport RootExtractor, { selectExtendedTypes } from 'extractors/root-extractor';\r\nimport collectAllPages from 'extractors/collect-all-pages';\r\n\r\nconst Parser = {\r\n  async parse(url, { html, ...opts } = {}) {\r\n    const {\r\n      fetchAllPages = true,\r\n      fallback = true,\r\n      contentType = 'html',\r\n      headers = {},\r\n      extend,\r\n      customExtractor,\r\n    } = opts;\r\n\r\n    // if no url was passed and this is the browser version,\r\n    // set url to window.location.href and load the html\r\n    // from the current page\r\n    if (!url && cheerio.browser) {\r\n      url = window.location.href; // eslint-disable-line no-undef\r\n      html = html || cheerio.html();\r\n    }\r\n\r\n    const parsedUrl = URL.parse(url);\r\n\r\n    if (!validateUrl(parsedUrl)) {\r\n      return {\r\n        error: true,\r\n        message:\r\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\r\n      };\r\n    }\r\n\r\n    const $ = await Resource.create(url, html, parsedUrl, headers);\r\n\r\n    // If we found an error creating the resource, return that error\r\n    if ($.failed) {\r\n      return $;\r\n    }\r\n\r\n    // Add custom extractor via cli.\r\n    if (customExtractor) {\r\n      addCustomExtractor(customExtractor);\r\n    }\r\n\r\n    const Extractor = getExtractor(url, parsedUrl, $);\r\n    // console.log(`Using extractor for ${Extractor.domain}`);\r\n\r\n    // if html still has not been set (i.e., url passed to Parser.parse),\r\n    // set html from the response of Resource.create\r\n    if (!html) {\r\n      html = $.html();\r\n    }\r\n\r\n    // Cached value of every meta name in our document.\r\n    // Used when extracting title/author/date_published/dek\r\n    const metaCache = $('meta')\r\n      .map((_, node) => $(node).attr('name'))\r\n      .toArray();\r\n\r\n    let extendedTypes = {};\r\n    if (extend) {\r\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\r\n    }\r\n\r\n    let result = RootExtractor.extract(Extractor, {\r\n      url,\r\n      html,\r\n      $,\r\n      metaCache,\r\n      parsedUrl,\r\n      fallback,\r\n      contentType,\r\n    });\r\n\r\n    const { title, next_page_url } = result;\r\n\r\n    // Fetch more pages if next_page_url found\r\n    if (fetchAllPages && next_page_url) {\r\n      result = await collectAllPages({\r\n        Extractor,\r\n        next_page_url,\r\n        html,\r\n        $,\r\n        metaCache,\r\n        result,\r\n        title,\r\n        url,\r\n      });\r\n    } else {\r\n      result = {\r\n        ...result,\r\n        total_pages: 1,\r\n        rendered_pages: 1,\r\n      };\r\n    }\r\n\r\n    if (contentType === 'markdown') {\r\n      const turndownService = new TurndownService();\r\n      result.content = turndownService.turndown(result.content);\r\n    } else if (contentType === 'text') {\r\n      result.content = $.text($(result.content));\r\n    }\r\n\r\n    return { ...result, ...extendedTypes };\r\n  },\r\n\r\n  browser: !!cheerio.browser,\r\n\r\n  // A convenience method for getting a resource\r\n  // to work with, e.g., for custom extractor generator\r\n  fetchResource(url) {\r\n    return Resource.create(url);\r\n  },\r\n\r\n  addExtractor(extractor) {\r\n    return addCustomExtractor(extractor);\r\n  },\r\n};\r\n\r\nexport default Parser;\r\n"],"names":["NORMALIZE_RE","normalizeSpaces","text","replace","trim","extractFromUrl","url","regexList","matchRe","find","re","test","exec","PAGE_IN_HREF_RE","RegExp","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","DEFAULT_ENCODING","pageNumFromUrl","matches","match","pageNum","_parseInt","removeAnchor","split","isGoodSegment","segment","index","firstSegmentHasLetters","goodSegment","length","toLowerCase","articleBaseUrl","parsed","parsedUrl","URL","parse","protocol","host","path","cleanedSegments","reverse","reduce","acc","rawSegment","includes","_segment$split","_segment$split2","_slicedToArray","possibleSegment","fileExt","push","concat","join","SENTENCE_END_RE","hasSentenceEnd","excerptContent","content","words","arguments","undefined","slice","getEncoding","str","encoding","_matches","iconv","encodingExists","REQUEST_HEADERS","cheerio","browser","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","get","options","_Promise","resolve","reject","request","err","response","body","validateResponse","parseNon200","statusMessage","statusCode","Error","error","_response$headers","headers","contentType","contentLength","fetchResource","_x","_x2","_fetchResource","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$get","_args","wrap","_callee$","_context","prev","next","encodeURI","_objectSpread","href","timeout","jar","gzip","followAllRedirects","window","followRedirect","sent","abrupt","t0","message","stop","convertMetaProp","$","from","to","each","_","node","$node","value","attr","removeAttr","normalizeMetaTags","SPACER_RE","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","IS_WP_SELECTOR","PAGE_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","stripUnlikelyCandidates","not","classes","id","classAndId","remove","brsToPs","collapsing","element","$element","nextElement","tagName","paragraphize","br","sibling","nextSibling","p","_sibling","appendTo","replaceWith","convertDivs","div","$div","convertible","children","convertNodeTo","convertSpans","span","$span","parents","convertToParagraphs","tag","attrs","getAttrs","attribString","_Reflect$ownKeys","map","key","html","contents","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","article","tags","_URL$parse","hostname","_toConsumableArray","addClass","stripJunkTags","cleanHOnes","$hOnes","removeAllButWhitelist","setAttrs","_defineProperty","removeClass","cleanAttributes","parent","removeEmpty","$p","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","READABILITY_ASSET","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","getWeight","score","getScore","_parseFloat","scoreCommas","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","setScore","addScore","amount","getOrInitScore","e","addToParent","weightNodes","scoreNode","_$node$get","addScoreTo","scorePs","$parent","rawScore","scoreContent","forEach","_ref","_ref2","parentSelector","childSelector","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","findTopCandidate","removeUnlessContent","weight","hasClass","pCount","inputCount","imgCount","nodeIsList","previousNode","scriptCount","cleanTags","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel","absolutize","rootUrl","baseUrl","absoluteUrl","setAttr","absolutizeSet","$content","urlSet","srcset","candidates","absoluteCandidates","candidate","parts","absoluteUrlSet","_Set","makeLinksAbsolute","totalTextLength","linkText","linkLength","extractFromMeta","metaNames","cachedNames","foundNames","filter","name","indexOf","_iterator","_createForOfIteratorHelper","_step","_loop","type","nodes","values","toArray","metaValue","stripTags","_values","v","s","n","done","_ret","_typeof","f","isGoodNode","maxChildren","withinComment","extractFromSelectors","selectors","textOnly","selector","cleanText","commentParent","nodeClass","nodeIsSufficient","isWordpress","attribs","attributes","val","setAttribute","removeAttribute","IS_LINK","IMAGE_RE","IS_IMAGE","IS_SRCSET","TAGS_TO_REMOVE","convertLazyLoadedImages","extractSrcFromJSON","_JSON$parse","JSON","src","existingSrc","isComment","cleanComments","root","clean","Resource","create","preparedResponse","_arguments","_this","result","validResponse","alreadyDecoded","failed","generateDoc","_ref$alreadyDecoded","_response$headers$con","encodeDoc","_ref2$alreadyDecoded","load","decodedContent","decode","contentTypeSelector","metaContentType","properEncoding","range","start","end","range$","_marked","validateUrl","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","apiExtractors","addExtractor","_Object$assign","BloggerExtractor","transforms","noscript","author","date_published","NYMagExtractor","h1","$children","dek","WikipediaExtractor","defaultCleaner","infoboxImg","prepend","TwitterExtractor","permalinkRoleMain","tweets","$tweetContainer","NYTimesExtractor","imgGLazy","lead_image_url","next_page_url","excerpt","TheAtlanticExtractor","NewYorkerExtractor","timezone","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","h2","divLongform_custom_header_media","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","iframeLazyloadDataRecommendIdYoutube","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","divDataRenderReactIdImagesLazyPicture","data","sources","MediumExtractor","sectionSpanFirstOfType","$text","iframe","ytRe","thumb","decodeURIComponent","_thumb$match","_thumb$match2","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","divInlineContent","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","znBody__paragraphEl__leafmediaSourcedParagraph","znBody__paragraph","WwwAolComExtractor","WwwYoutubeComExtractor","playerApi","videoId","playerContainerOuter","description","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","format","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","figureEImage__imageNoscript","imgHtml","NewsNationalgeographicComExtractor","parsysContent","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","trb_ar_la","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","paneNodeBody","_WwwMsnbcComExtractor","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","divLoadingNoscript","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","figureImage","WwwTodayComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","WwwProspectmagazineCoUkExtractor","ForwardComExtractor","WwwQdailyComExtractor","GothamistComExtractor","WwwFoolComExtractor","captionImg","WwwSlateComExtractor","IciRadioCanadaCaExtractor","WwwFortinetComExtractor","WwwFastcompanyComExtractor","BlisterreviewComExtractor","figcaption","NewsMynaviJpExtractor","ClinicaltrialsGovExtractor","GithubComExtractor","WwwRedditComExtractor","divRoleImg","bgImg","css","OtrsComExtractor","WwwOssnewsJpExtractor","BuzzapJpExtractor","WwwAsahiComExtractor","WwwSanwaCoJpExtractor","WwwElecomCoJpExtractor","table","ScanNetsecurityNeJpExtractor","JvndbJvnJpExtractor","GeniusComExtractor","res","json","song","release_date","album","cover_art_url","WwwJnsaOrgExtractor","PhpspotOrgExtractor","WwwInfoqComExtractor","WwwMoongiftJpExtractor","WwwItmediaCoJpExtractor","WwwPublickey1JpExtractor","TakagihiromitsuJpExtractor","BookwalkerJpExtractor","WwwYomiuriCoJpExtractor","JapanCnetComExtractor","DeadlineComExtractor","embedTwitter","innerHtml","WwwGizmodoJpExtractor","imgPPostThumbnailImage","GetnewsJpExtractor","WwwLifehackerJpExtractor","imgLazyload","SectIijAdJpExtractor","WwwOreillyCoJpExtractor","WwwIpaGoJpExtractor","WeeklyAsciiJpExtractor","TechlogIijAdJpExtractor","WiredJpExtractor","imgDataOriginal","dataOriginal","JapanZdnetComExtractor","WwwRbbtodayComExtractor","WwwLemondeFrExtractor","WwwPhoronixComExtractor","PitchforkComExtractor","extend","BiorxivOrgExtractor","EpaperZeitDeExtractor","byline","linkbox","WwwLadbibleComExtractor","TimesofindiaIndiatimesComExtractor","reporter","MaTtiasBeExtractor","after","ul","PastebinComExtractor","ol","li","WwwAbendblattDeExtractor","o","i","r","charCodeAt","String","fromCharCode","WwwGrueneDeExtractor","WwwEngadgetComExtractor","ArstechnicaComExtractor","before","WwwNdtvComExtractor","place_cont","SpektrumExtractor","PostlightComExtractor","WwwInvestmentexecutiveComExtractor","WwwCbcCaExtractor","_Object$keys","CustomExtractors","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","TIME_NOW_STRING","timeUnits","allTimeUnits","TIME_AGO_STRING","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","leadImageUrl","validUrl","isWebUri","cleanDek","dekText","cleanDateString","dateString","createDate","moment","Date","fragments","subtract","tz","parseFormat","cleanDatePublished","toISOString","date","isValid","extractCleanNode","cleanConditionally","_ref$title","_ref$url","_ref$defaultCleaner","cleanTitle","resolveSplitTitle","extractBreadcrumbTitle","splitTitle","termCounts","titleText","_Reflect$ownKeys$redu","_Reflect$ownKeys$redu2","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","wuzzy","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","cleanImage","cleanContent","extractBestNode","opts","$topCandidate","GenericContentExtractor","defaultOpts","extract","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","_step$value","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","difflib","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","NEXT_LINK_TEXT_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","scoreExtraneousLinks","makeSig","$link","positiveMatch","negativeMatch","_Array$from","parentData","scorePrevLink","linkData","shouldScore","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","scoreLinks","links","_ref$previousUrls","scoredPages","possiblePages","link","possiblePage","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","maxLength","ellipsize","ellipse","GenericExcerptExtractor","shortContent","getWordCount","getWordCountAlt","GenericWordCountExtractor","count","GenericExtractor","bind","url_and_domain","word_count","direction","stringDirection","getDirection","loaded","_this$url_and_domain","Detectors","detectByHtml","getExtractor","_parsedUrl","baseDomain","Extractors","cleanBySelectors","transformElements","$matches","findMatchingSelector","extractHtml","allowMultiple","_Array$isArray","_selector","select","extractionOpts","_opts$extractHtml","_extractionOpts$defau","overrideAllowMultiple","matchingSelector","transformAndClean","selectHtml","$wrapper","el","$match","_matchingSelector","transform","item","selectExtendedTypes","results","t","extractResult","_opts$fallback","fallback","RootExtractor","_opts","contentOnly","extractedTitle","_ref3","extendedResults","collectAllPages","_collectAllPages","Extractor","pages","extractorOpts","nextPageResult","console","total_pages","rendered_pages","Parser","_opts$fetchAllPages","fetchAllPages","_opts$contentType","_opts$headers","customExtractor","extendedTypes","_result","turndownService","_objectWithoutProperties","location","addCustomExtractor","TurndownService","turndown"],"mappings":"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"}